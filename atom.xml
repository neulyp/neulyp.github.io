<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lyp&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-18T14:05:23.221Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Loren</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hadoop笔记-备考</title>
    <link href="http://yoursite.com/2016/12/18/hadoop%E7%AC%94%E8%AE%B0-%E5%A4%87%E8%80%83/"/>
    <id>http://yoursite.com/2016/12/18/hadoop笔记-备考/</id>
    <published>2016-12-18T13:10:31.000Z</published>
    <updated>2016-12-18T14:05:23.221Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h3><p>hadoop安装模式:</p>
<ul>
<li>单机模式</li>
<li>伪分布式</li>
<li>完全分布式</li>
</ul>
<p>namenode datanode jobtracker tasktracker secondaryNamenode</p>
<h3 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h3><p>1.命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hadoop namenode -format</div><div class="line">sbin/start-all.sh</div><div class="line">sbin/stop-all.sh</div></pre></td></tr></table></figure></p>
<p>2.配置文件（考点）</p>
<p><img src="http://i.imgur.com/xm8ivA9.png" alt=""></p>
<h3 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h3><p>编写mapreduce函数：</p>
<ul>
<li>mapper类 </li>
<li>reducer类</li>
<li>main类</li>
</ul>
<p>详情见wordcount例子</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> wordcount;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.StringTokenizer;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.TextInputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountMap</span> <span class="keyword">extends</span></span></div><div class="line">			<span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; &#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> IntWritable one = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</div><div class="line">		<span class="keyword">private</span> Text word = <span class="keyword">new</span> Text();</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span></span></div><div class="line">				<span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">			String line = value.toString();</div><div class="line">			StringTokenizer token = <span class="keyword">new</span> StringTokenizer(line);</div><div class="line">			<span class="keyword">while</span> (token.hasMoreTokens()) &#123;</div><div class="line">				word.set(token.nextToken());</div><div class="line">				context.write(word, one);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountReduce</span> <span class="keyword">extends</span></span></div><div class="line">			<span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; &#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values,</span></span></div><div class="line">				Context context) <span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">			<span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span> (IntWritable val : values) &#123;</div><div class="line">				sum += val.get();</div><div class="line">			&#125;</div><div class="line">			context.write(key, <span class="keyword">new</span> IntWritable(sum));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">		Job job = <span class="keyword">new</span> Job(conf);</div><div class="line">		job.setJarByClass(WordCount.class);</div><div class="line">		job.setJobName(<span class="string">"wordcount"</span>);</div><div class="line">		job.setOutputKeyClass(Text.class);</div><div class="line">		job.setOutputValueClass(IntWritable.class);</div><div class="line">		job.setMapperClass(WordCountMap.class);</div><div class="line">		job.setReducerClass(WordCountReduce.class);</div><div class="line">		job.setInputFormatClass(TextInputFormat.class);</div><div class="line">		job.setOutputFormatClass(TextOutputFormat.class);</div><div class="line">		FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</div><div class="line">		FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</div><div class="line">		job.waitForCompletion(<span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>configuration类：怼佢hadoop的配置文件</li>
<li>job类： 表示一个mapreduce任务</li>
</ul>
<h3 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h3><ul>
<li>打包：<code>wordcount -&gt;export-&gt;jar file</code> 把jar放在$hadoop_home 下</li>
<li>部署和运行： <code>hadoop fs -put /file1 /input/</code></li>
<li>运行： <code>hadoop jar wordcount.jar wordcount.WordMain /file1 /output</code></li>
<li>测试结果：_success _logs part-r-00000</li>
</ul>
<h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>hdfs的特点？</p>
<p>hdfs架构？（主从结构，一个namenode节点，多个datanode节点）</p>
<p>hadoop的rpc机制？</p>
<p>hadoop文件系统的访问/</p>
<p>```<br>hadoop fs -ls /<br>hadoop fs -mkdir /input<br>hadoop fs -put file1 /input<br>hadoop fs -text /input/file1<br>hadoop fs -get /input/file1 //复制到本地<br>hadoop fs -rm /input/file1<br>hadoop namenode -format<br>hadoop secondarynamenode<br>hadoop dfsadmin<br>hadoop job<br>hadoop version</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2-2&quot;&gt;&lt;a href=&quot;#2-2&quot; class=&quot;headerlink&quot; title=&quot;2.2&quot;&gt;&lt;/a&gt;2.2&lt;/h3&gt;&lt;p&gt;hadoop安装模式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单机模式&lt;/li&gt;
&lt;li&gt;伪分布式&lt;/li&gt;
&lt;li&gt;完全分布式&lt;/li&gt;
&lt;/
    
    </summary>
    
      <category term="hadoop" scheme="http://yoursite.com/categories/hadoop/"/>
    
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>hbase</title>
    <link href="http://yoursite.com/2016/12/15/hbase/"/>
    <id>http://yoursite.com/2016/12/15/hbase/</id>
    <published>2016-12-15T05:22:02.000Z</published>
    <updated>2016-12-18T13:01:41.550Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-hbase"><a href="#1-hbase" class="headerlink" title="1.hbase"></a>1.hbase</h4><p>hbase是一个<strong>高可靠、高性能、面向列、可伸缩</strong>的分布式存储系统，利用hbase技术可以再廉价pc server上搭建大规模结构化存储集群。</p>
<p>hbase的特点：</p>
<ul>
<li>大</li>
<li>面向列</li>
<li>稀疏</li>
</ul>
<p>hbase访问接口：</p>
<ul>
<li>native java api</li>
<li>hbase shell</li>
<li>thrift gateway</li>
<li>rest gateway</li>
<li>pig</li>
<li>hive</li>
</ul>
<h4 id="2-hbase存储结构"><a href="#2-hbase存储结构" class="headerlink" title="2.hbase存储结构"></a>2.hbase存储结构</h4><p><img src="http://i.imgur.com/nzZrDc1.png" alt=""></p>
<ol>
<li><p>client<br>管理类操作：client与hmaster进行rpc操作。<br>数据读写类操作：client与hregionserver进行rpc操作。</p>
</li>
<li><p>zookeeper<br>zookeeper quorum中，除了存储-root-表的地址和hmaster的地址，hregion-server也会以ephemeral方式把自己注册到zookeeper中，使得hmaster可以随时的感知各个HRegionServer的健康状态。zookeeper的master election机制保证总有一个master运行</p>
</li>
<li><p>hmaster<br>hmaster主要负责table和region的管理工作。具体包含以下功能：</p>
<ul>
<li>管理用户对table的增删改查操作</li>
<li>管理hregionserver的负载均衡，调整region分布</li>
<li>在region split后，负责新region的分配</li>
<li>在hregionserver停机后，负责失效hregionserver上region迁移</li>
</ul>
</li>
<li><p>hregionserver<br>hregionserver主要负责响应用户i/o请求。向hdfs文件系统中读写数据。是hbase中最核心的模块。<br><img src="http://i.imgur.com/HsVM38Z.png" alt=""><br>hregionserver内部管理了一系列hregion对象，每个hregion对应table中的一个region，</p>
</li>
<li><p>hstore<br>hstore存储是hbase存储的核心，其中有两部分组成，一部分是memstore，一部分是storefile。用户写入的数据首先会放入memstore中，当memstore满了以后，会执行一个flush操作，变成一个storefile。当storefile增加到一定的阈值。会出发compact合并操作将多个storefile合并成一个storefile，合并过程中进行版本合并和数据删除。</p>
</li>
<li><p>hlog<br>每个hregionserver都有一个hlog对象，hlog是一个实现write ahead log的类，每次用户写入memstore同时，也会写一份数据到hlog中，hlog文件会定期回滚出新的，并删除old的文件（已经持久化到memstore）。当hregionserver意外终止的时候，hmaster汇通过zookeeper感知到，hmaster会首先处理遗留下来的hlog。将其中不同region的log数据进行拆分，分别放到相应region的目录下，然后再将失效的region重新分配。领取这些region的hregionserver在load region的过程中，会发现有历史hlog需要处理。因此会重新加载hlog中的数据到memstore中，然后保存到哦storefile，完成数据恢复。</p>
</li>
</ol>
<h4 id="3-hbase存储格式"><a href="#3-hbase存储格式" class="headerlink" title="3.hbase存储格式"></a>3.hbase存储格式</h4><ul>
<li>hfile</li>
<li>hlog file</li>
</ul>
<p>1.hfile<br><img src="http://i.imgur.com/Lqn3NUh.png" alt=""></p>
<p>2.hlogfile</p>
<p><img src="http://i.imgur.com/PYr0eFk.png" alt=""></p>
<h4 id="4-数据模型"><a href="#4-数据模型" class="headerlink" title="4.数据模型"></a>4.数据模型</h4><p><img src="http://i.imgur.com/jEb1inN.png" alt=""></p>
<ul>
<li>row key</li>
<li>列族</li>
<li>时间戳</li>
<li>cell</li>
</ul>
<p><img src="http://i.imgur.com/dmLyotO.png" alt=""></p>
<p>hbase中有两张特殊的表，-root- .meta</p>
<p>.meta. 记录用户表的region信息，可以有多个region<br>-root- 记录.meta.表的region信息，只能有一个region</p>
<p>zookeper中记录-root-表的location </p>
<p><img src="http://i.imgur.com/vBzRFlR.png" alt=""></p>
<h4 id="4-hbase红的算法和流程"><a href="#4-hbase红的算法和流程" class="headerlink" title="4.hbase红的算法和流程"></a>4.hbase红的算法和流程</h4><p>region 定位<br><img src="http://i.imgur.com/FBfy26s.png" alt=""></p>
<p>region 分配</p>
<p>region server上线和下线</p>
<p>master上线和下线</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-hbase&quot;&gt;&lt;a href=&quot;#1-hbase&quot; class=&quot;headerlink&quot; title=&quot;1.hbase&quot;&gt;&lt;/a&gt;1.hbase&lt;/h4&gt;&lt;p&gt;hbase是一个&lt;strong&gt;高可靠、高性能、面向列、可伸缩&lt;/strong&gt;的分布式存储系统，利
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hive</title>
    <link href="http://yoursite.com/2016/12/13/hive/"/>
    <id>http://yoursite.com/2016/12/13/hive/</id>
    <published>2016-12-13T07:44:16.000Z</published>
    <updated>2016-12-15T05:24:43.748Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-hive介绍"><a href="#1-hive介绍" class="headerlink" title="1.hive介绍"></a>1.hive介绍</h4><p>hive是基于hadoop的一个数据仓库工具。</p>
<p>Hive由Facebook实现并开源，是建立在Hadoop之上的数据仓库解决方案，支持将结构化的<br>数据文件映射为一张表，提供HQL（Hive SQL）实现方便高效的数据查询，底层数据存储在<br>HDFS上。 Hive的本质是<strong>将HQL转换为MapReduce程序去执行</strong>，使不熟悉MapReduce的用<br>户很方便地利用HQL进行数据ETL操作。</p>
<p>工作原理：<br><img src="http://i.imgur.com/UpnpvV5.png" alt=""></p>
<p>hive的入口是driver，执行的sql语句首先提交大driver驱动，然后调用compiler解释驱动，最终解释成mapreduce任务执行，最后结果返回。</p>
<p>特点：</p>
<ul>
<li>更友好的接口：<br>Hive提供类SQL语法使开发人员在使用接口时几乎没有门槛。</li>
<li>更低的学习成本：<br>Hive底层自动实现SQL到MapReduce任务的转换，大大减少开发人员学习和应用MapReduce成本。</li>
<li>更好的可扩展性：<br>Hive可自由扩展集群规模而无需重启服务，此外Hive还支持用户自定义函数。</li>
<li>良好的容错性：<br>当Hive节点出现问题，SQL仍可继续无中断执行</li>
</ul>
<p>hive数据类型：</p>
<ul>
<li>基本数据类型</li>
<li>复杂数据类型</li>
</ul>
<p><img src="http://i.imgur.com/T2N79nW.png" alt=""></p>
<p>hive和关系型数据库对比：<br><img src="http://i.imgur.com/8yl4sPC.png" alt=""><br>针对比较的部分解释：</p>
<ol>
<li>查询语言：由于sql被广泛的应用在数据仓库中，专门针对hive的特性设计了类sql的查询语句。HQL。</li>
<li>数据存储位置：hive建立在hadoop之上，所有hive的数据都存储在hdfs中，而数据库则将数据保存在块设备或者本地文件系统中。</li>
<li>数据格式：hive中没有专门定义的数据结构，数据格式由用户指定，用户定义数据格式需要指定三个属性：列分割符（通常是空格 ‘\t’ ‘\x001’）行分割符（\n）以及读文件的方法（hive默认有三个文件格式textfile sequencefile rcfile）。hive在加载过程中不会对数据本身进行修改，只是将数据内容复制或者移动到相应的hdfs目录中。</li>
<li>数据更新：hive是针对数据仓库应用设计的，而数据仓库内容读多写少，因此hive不支持对数据的改写和添加。</li>
<li>索引：由于不需要对数据进行处理加载的时候，所以不用对数据中的某些key建立索引</li>
<li>执行： 通过hadoop的mapreduce执行</li>
<li>执行延迟：由于查询数据的时候没有索引，所以需要扫描整个表，因此延迟较高。另一个导致hive执行延迟高的银锁是mapreduce框架。</li>
<li>可扩展性，hive建立在hadoop上，扩展性和hadoop一致</li>
</ol>
<h4 id="2-centos7，hive安装"><a href="#2-centos7，hive安装" class="headerlink" title="2.centos7，hive安装"></a>2.centos7，hive安装</h4><p>Hive原则上可以安装在集群上的任何一台机器上面.</p>
<ol>
<li>准备工作-创建配置数据存储位置（非必须？）<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hadoopfs-mkdir/tmp</div><div class="line">hadoopfs-mkdir/user/hive/warehouse</div><div class="line">hadoopfs-chmodg+w/tmp</div><div class="line">hadoopfs-chmodg+w/user/hive/warehouse</div></pre></td></tr></table></figure>
</li>
</ol>
<p>如果进行这一步的话，在hive-site.xml中配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hive.metastore.warehouse.dir</div><div class="line">/user/hive/warehouse</div><div class="line">locationofdefaultdatabaseforthewarehouse</div></pre></td></tr></table></figure></p>
<ol>
<li><p>安装mysql作为元数据存储</p>
<p> CentOS7的yum源中默认好像是没有mysql的。为了解决这个问题，我们要先下载mysql的repo源。</p>
<ul>
<li>下载mysql的repo源<br><code>wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</code></li>
<li>安装mysql-community-release-el7-5.noarch.rpm包<br><code>sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm</code></li>
<li>安装mysql<br><code>sudo yum install mysql-server</code></li>
<li>重启mysql<br><code>sudo systemctl restart mysqld.service</code></li>
<li>设置远程登录<br><code>grant all privileges on *.* to root@&quot;%&quot; identified by &quot;password&quot; with grant option;</code><br><code>flush privileges;</code></li>
<li>为hive设置单独的账户密码登录（我认为可选吧，懒省事直接用root，反正是虚拟机实验）<br><code>create user &#39;hive&#39; identified by &#39;mysql&#39;</code><br><code>grant all privileges on *.* to &#39;hive&#39;@&#39;%&#39; with grant option</code></li>
</ul>
</li>
<li><p>hive下载，针对hadoop2.7.2 hbase1.2.4，选择版本hive2.1.1进行安装。</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget &quot;http://mirrors.cnnic.cn/apache/hive/hive-2.0.0/apache-hive-2.0.0-bin.tar.gz&quot;</div><div class="line">tar -xzvf apache-hive-2.0.0-bin.tar.gz</div></pre></td></tr></table></figure>
</code></pre></li>
<li><p>拷贝mysql驱动文件<br>下载地址：<a href="http://dev.mysql.com/downloads/connector/j/" target="_blank" rel="external">http://dev.mysql.com/downloads/connector/j/</a> ，解压后拷贝其中的mysql-connector-Java-5.1.38-bin.jar到hive的lib文件夹下。</p>
</li>
<li><p>配置环境变量</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi /etc/profile</div><div class="line">export HIVE_HOME=/usr/hive/apache-hive-2.1.1-bin</div><div class="line">export PATH=$PATH:$HIVE_HOME/bin</div></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件</p>
</li>
</ol>
<p>hive-site.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</div><div class="line">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/hive?createDatabaseIfNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Username to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>password to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.local.scratchdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/hive/apache-hive-2.1.1-bin/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Local scratch space for Hive jobs<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.downloaded.resources.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/hive/apache-hive-2.1.1-bin/tmp/resources<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Temporary local directory for added resources in the remote file system.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.querylog.location<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/hive/apache-hive-2.1.1-bin/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Location of Hive run time structured log file<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.logging.operation.log.location<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/hive/apache-hive-2.1.1-bin/tmp/operation_logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Top level directory where operation logs are stored if logging functionality is enabled<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>修改hive-en.sh：添加jdk和hadoop根目录路径（可选）</p>
<ol>
<li>初始化数据库<br> <code>schematool -initSchema -dbType mysql</code></li>
<li>启动hive <code>bin/hive</code></li>
</ol>
<h4 id="3-hive架构"><a href="#3-hive架构" class="headerlink" title="3.hive架构"></a>3.hive架构</h4><p><img src="http://i.imgur.com/0xW0CN6.png" alt=""></p>
<p>hive的架构可以分为四个部分：</p>
<ul>
<li>用户接口</li>
<li>元数据存储</li>
<li>解释器、编译器、优化器</li>
<li>数据存储</li>
</ul>
<p>以下分别详细介绍;</p>
<p>1.hive用户接口</p>
<p>hive对外提供三种服务模式，命令行模式（CLI）hive的web模式（WUI）、hive的远程服务（client）</p>
<ul>
<li><p>hive命令行模式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./hive</div><div class="line"> hive --service cli</div></pre></td></tr></table></figure>
</li>
<li><p>hive web模式 <code>hive --service hwi</code> 默认端口是9999</p>
</li>
<li>hive远程服务 <code>nohup hive --service hiveserver &amp;</code>（默认端口10000）</li>
</ul>
<p>2.hive元数据库</p>
<p>hive将源数据存储在rdbms中，一般常用mysql和derby。hive默认存储元数据信息在derby。我们已经将其更改为mysql。</p>
<p>理由如下：</p>
<ul>
<li>hive源数据保存在内嵌的derby数据库中么只允许一个会话连接，只适合简单的测试。实际生产环境中不合适，</li>
<li>为了支持多会话，则需要一个独立的元数据库，使用mysql作为元数据库，hive内部对mysql提供了很好的支持。具体配置 参照上面hive安装</li>
</ul>
<p>3.hive的数据存储</p>
<ul>
<li>hive没有专门的数据格式，也没有为数据建立索引。</li>
<li>hive所有的数据存储在hdfs中</li>
<li>hive的数据模型包括（table,external, partition,bucket）</li>
</ul>
<p>部分详细介绍：</p>
<p>table：每一个table在hive中都有一个相应的目录存储数据，例如一个表mytest，他在hdfs中的目录为/user/hive/warehouse/mytest 其中warehouse是在hive-site.xml中<code>hive.metastore.warehouse.dir</code>配置的。所有的table（不包括external table）包含在该目录下</p>
<p>partition:对应于数据库中partition列的密集索引，在，hive中，表中一个partition对应于表下的一个目录，所有的partition的数据都存在对应的目录中，例如mytest表中优name和no两个partition，</p>
<ul>
<li>name=asd,no=4854的hdfs子目录为：<code>/warehouse/mytest/name=asd/no=4854</code></li>
</ul>
<p>buckets对指定列计算hash，根据hash切分数据，目的是并行，每一个bucket对应一个文件，将user列分先至32个bucket，首先对user列计算hash，对应：</p>
<ul>
<li>hash为0的hdfs目录：<code>/warehouse/mytest/name=asd/no=4854、part-00000</code></li>
<li>hash为20的hdfs目录：<code>/warehouse/mytest/name=asd/no=4854、part-00020</code></li>
</ul>
<p><img src="http://i.imgur.com/f3ne7LT.png" alt=""></p>
<p>4.hive解释器</p>
<ul>
<li>解析器</li>
<li>语义分析器</li>
<li>逻辑策略生成器</li>
<li>优化器</li>
</ul>
<h4 id="4-hive文件格式"><a href="#4-hive文件格式" class="headerlink" title="4.hive文件格式"></a>4.hive文件格式</h4><p>四种：textfile sequencefile rcfile 自定义</p>
<p>1.textfile格式</p>
<p>textfile为默认个事，数据不做压缩，磁盘开销大，数据解析开销大。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">create table text(str STRING)</div><div class="line">STORED AS TEXTFILE;</div><div class="line">load data local &apos;/data/test.txt&apos; into table text</div></pre></td></tr></table></figure></p>
<p>2.sequencefile格式</p>
<p>sequencefile格式是hadoop api提供的二进制文件支持。其具有使用方便，可分割，可压缩的特点。一般建议使用block压缩。</p>
<p>3.RCfile格式</p>
<p>一个集行存储和列存储优点于一身，压缩比更高，读取列更快。</p>
<h4 id="5-hive操作"><a href="#5-hive操作" class="headerlink" title="5.hive操作"></a>5.hive操作</h4><ol>
<li>表操作：感觉类似sql。不做介绍了</li>
<li>视图操作</li>
<li>分区操作</li>
<li>桶操作</li>
<li>struct类型<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> struct_test(<span class="keyword">id</span> <span class="built_in">INT</span>,info <span class="keyword">struct</span>&lt;<span class="keyword">name</span>:<span class="keyword">String</span>,age <span class="built_in">INT</span>&gt;)</div><div class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span></div><div class="line">collection items <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">':'</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>准备一个文件,内容如下：<br>1,liu：30<br>2,zhang:30<br>执行<br><code>load data local inpath &#39;/test&#39; into table struct_test</code></p>
<ol>
<li>array类型<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> struct_test(<span class="keyword">id</span> <span class="built_in">INT</span>,info <span class="built_in">array</span>&lt;<span class="built_in">INT</span>&gt;)</div><div class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span></div><div class="line">collection items <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">':'</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>准备一个文件,内容如下：<br>1,1:2:3<br>2,20:30<br>执行<br><code>load data local inpath &#39;/test&#39; into table struct_test</code></p>
<ol>
<li>map类型<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(<span class="keyword">id</span> <span class="keyword">String</span>,info <span class="keyword">map</span>&lt;<span class="keyword">STRING</span>,<span class="built_in">INT</span>&gt;)</div><div class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span></div><div class="line">collection items <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span></div><div class="line"><span class="keyword">map</span> <span class="keyword">keys</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">':'</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>准备一个文件,内容如下：<br>1    job:80,team:60<br>2    job:30,team:60,person:100<br>执行<br><code>load data local inpath &#39;/test&#39; into table test</code></p>
<ol>
<li>join操作</li>
<li>hive函数与自定义函数</li>
<li>hive权限控制</li>
</ol>
<h4 id="5-hive优劣分析"><a href="#5-hive优劣分析" class="headerlink" title="5.hive优劣分析"></a>5.hive优劣分析</h4><p>Hive在扩展性和容错性方面有强大优势，但是在执行引擎高效化和多样化接口与可视化等方面，与传<br>统并行数据仓库还存在一定差距。此外像Tenzing、 DryadLINQ、 Dremel、 HadoopDB 等新兴数据<br>仓库，都有Hive值得借鉴的地方。 Hive的诞生带动了Hadoop开源栈系统的进一步发展，支持用户从<br>零开始快速搭建数据仓库系统，推动了整个产业链的进步。</p>
<ul>
<li>存储灵活性：<br>Hive的元数据存储在RDBMS中，所有其它数据都基于HDFS存储。Hive没有专门的数据存储格式也没有为数据建立索引。 Hive默认支持多种文件格式，也支持用户自定义格式。基于Hive的分析过程支持从不同数据源<br>装载数据</li>
<li>执行效率：Hive基于MapReduce，因此Sort和Groupby等都依赖MapReduce。MapReduce可以理解为固化了的执行算子。此外Hive对Join算子的支持不够全面。在特定应用场景下，内存拷贝和数据预处理同样可能影响Hive的执行效率</li>
<li>可扩展性：Hive的数据处理量是PB级的，因此它具备非常好的水平可扩展性，支持集群部署，支持通过简单地增加资源以支持更大的数据量和负载</li>
<li>可视化：Hive的可视化界面基本属于字符终端，对用户的技术水平要求比较高。提供个性化的可视化展现<br>（GUI），是Hive改进的重要方向。</li>
<li>容错性：Hive基于Hadoop HDFS和MapReduce构建，天然具备较好的容错性，基于Hive实的数据仓库可以部署在普通机器构建的分布式集群之上。</li>
</ul>
<h4 id="6-hive-vs-hbase"><a href="#6-hive-vs-hbase" class="headerlink" title="6.hive vs hbase"></a>6.hive vs hbase</h4><p>Hive主要是为简化编写MapReduce程序而生，而HBase是为查询而生。通过Hive的存储接口Hive和HBase可以整合使用。 Hive通过与HBase集成后能够实现快速的查询。同时，由于HBase不持类SQL语句，通过与Hive集成，Hive为HBase提供SQL语法解析的外壳。</p>
<p>Hive与HBase的整合实现是利用两者对外的API接口互相进行通信的，相互通信主要是依靠<br>hive_hbase-handler.jar工具类。在将HBase和Hive集成的过程中注意确保hbase jar包的一致性。</p>
<p>Hive集成HBase需要在Hive表和HBase表之间建立映射关系，也就是Hive表的列和列类型与HBase表的列族及列限定词建立关联。每一个在Hive表中的列都存在于HBase中，但反过来在Hive表中则不需要包含所有的HBase中的列</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-hive介绍&quot;&gt;&lt;a href=&quot;#1-hive介绍&quot; class=&quot;headerlink&quot; title=&quot;1.hive介绍&quot;&gt;&lt;/a&gt;1.hive介绍&lt;/h4&gt;&lt;p&gt;hive是基于hadoop的一个数据仓库工具。&lt;/p&gt;
&lt;p&gt;Hive由Facebook实现
    
    </summary>
    
      <category term="hadoop" scheme="http://yoursite.com/categories/hadoop/"/>
    
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>java并发编程实战-线程安全性</title>
    <link href="http://yoursite.com/2016/12/13/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7/"/>
    <id>http://yoursite.com/2016/12/13/java并发编程实战-线程安全性/</id>
    <published>2016-12-13T05:01:13.000Z</published>
    <updated>2016-12-13T07:36:38.980Z</updated>
    
    <content type="html"><![CDATA[<p>无状态对象是线程安全的。</p>
<p>###1.线程安全###</p>
<p>竞态条件：当某个计算的正确性取决于多个线程的交替执行时序时，那么就会发生竞态条件。</p>
<ul>
<li>先检查后执行–星巴克见面的例子</li>
<li>读取修改写入操作–计数器的例子</li>
</ul>
<p>怎么解决竞态条件呢？如果一些列符合操作是原子的话，就可以解决。我们可以采用加锁机制或者使用线程安全类来解决。</p>
<p><code>java.util.concurrrent.atomic</code>包中包含一些原子变量类。</p>
<p>内置锁：intrinsic lock， 线程在进入同步代码块之前会自动获取锁，并且在退出同步代码块的时候自动释放锁。是一种互斥锁。</p>
<p>重入：为每一个锁关联一个获取计数器和一个所有者线程。当计数器为0时，这个锁被认为是没有人持有的。当一个线程请求一个未被持有的锁，jvm会记录下锁的持有者，并且将获取计数器置为1.如果同一个线程再次获取该锁。计数器将递增。而当线程退出同步代码块时，计数器会相应的递减。当计数值为0时，这个锁将会被释放。</p>
<p>###2.对象的共享###</p>
<p>同步：</p>
<ul>
<li>实现原子性或者确定临界区</li>
<li>内存可见性，希望却摆一个线程修改了对象状态后，其他线程能够看到状态发生的变化。</li>
</ul>
<p>失效数据；<br>非原子的64位操作：jvm允许将64位的读操作和写操作分解为两个32位的操作。</p>
<p>volatile变量：当吧变量声明成volatile类型后，编译期和运行时都会注意到这个变量是共享的，因此不会将该变量上的 操作和其他内存操作一起重排序。volatile变量不会缓存在寄存器或者对其他处理器不可见的地方，因此在读取volatile类型的变量时总会返回最新写入的值。</p>
<p>发布：发布一个对象的意思是指使对象能够在当前作用于之外的代码中使用。</p>
<p>溢出：当某个不该发布的对象被发布。</p>
<p>不变性：不变的对象一定是线程安全的</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无状态对象是线程安全的。&lt;/p&gt;
&lt;p&gt;###1.线程安全###&lt;/p&gt;
&lt;p&gt;竞态条件：当某个计算的正确性取决于多个线程的交替执行时序时，那么就会发生竞态条件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先检查后执行–星巴克见面的例子&lt;/li&gt;
&lt;li&gt;读取修改写入操作–计数器的例子&lt;/
    
    </summary>
    
      <category term="并发编程" scheme="http://yoursite.com/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="并发编程" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java EE 7 Tutorial分析</title>
    <link href="http://yoursite.com/2016/12/10/javaee7/"/>
    <id>http://yoursite.com/2016/12/10/javaee7/</id>
    <published>2016-12-10T08:47:25.000Z</published>
    <updated>2016-12-10T16:06:22.572Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>##分析要求##</p>
<p>install Java EE7.0 JDK<br>learn Java EE 7 Tutorial，run and analysis Javae EE7.0 Samples，include</p>
<ul>
<li>Servlet 3.1<ul>
<li>The Annotations Servlet Sample Application</li>
<li>The Absolute Ordering of Web Fragments Servlet …</li>
<li>The File Upload Servlet Sample Application</li>
</ul>
</li>
<li>JAX-RS 2.0<ul>
<li>The Asynchronous Chat JAX-RS Sample Application</li>
</ul>
</li>
<li>JSON Processing 1.0<ul>
<li>The JAX-RS JSONP Sample Application</li>
</ul>
</li>
<li>WebSocket 1.0<ul>
<li>The Echo WebSocket Sample Application</li>
<li>The Auction WebSocket Sample Application</li>
</ul>
</li>
</ul>
<p><img src="http://i.imgur.com/Ev34ZJs.png" alt=""></p>
<p>##第一章：java ee7 总览##</p>
<p>JavaEE 7提供了一个完整、全面、集成的堆栈来帮助你构建企业和Web应用程序。</p>
<p>###javaEE 容器###</p>
<p>主要就是JSF（JavaServer Faces）和EJB（Enterprise Java Bean）两大部分，JSF依赖于EJB，并且是重量级的，JSF使用了一大堆组件控制页面，跟Struts2的标签差不多；EJB目前做得不错，相比Spring，EJB完全不需要作任何配置，内部包含JPA规范，可以和Hibernate无缝接入，但是学习曲线依然很大，并且对服务器有要求，用tomcat做服务器还需要和JBoss搭配，新手学习可以使用Glassfish。</p>
<p><img src="http://i.imgur.com/HOEo1LM.png" alt=""></p>
<p>###WEB 容器###</p>
<p>这部分内容比较多，JavaEE 7新添加的为下图棕黄色的部分，即WebSocket、Concurrency Utilities、Batch、JSON-P，新添加部分主要是为HTML5提供更好的伸缩性。</p>
<p><img src="http://i.imgur.com/Yp8A2E6.png" alt=""></p>
<p>###名词 概念###</p>
<p>JWS：即Java Web Service,指与webservice相关的JavaEE技术部分，webservice是一种基于XML的独立的、跨平台的、互操作的应用程序，XML又包含XSD、DTD、XPath等相关技术，这个撇开不说。webservice平台元素主要有SOAP（简易对象访问协议）、UDDI（通用描述、发现及整理）、WSDL（WS描述语言）。</p>
<p>JAX：即Java Xml，类似地JAXB（Java Xml Binding）</p>
<p>目前JWS主要有：</p>
<ul>
<li>JAX-WS 全称JavaTM API forXML-Based Web Services 又叫JAX-RPC（远程调用），顾名思义就是基于Web Services</li>
<li>JAX-RS 全称JavaTM API forRESTful Web Services 即使用REST风格</li>
<li>JAXB</li>
<li>JAXR</li>
<li>SAAJ</li>
<li>STAX</li>
</ul>
<p>网上说关于JAX-WS与JAX-RS有这么说的： 两者是不同风格的SOA架构。前者以动词为中心，指定的是每次执行函数。而后者以名词为中心，每次执行的时候指的是资源。</p>
<p>感觉这个说法比较靠谱，JAX-WS是<strong>面向消息</strong>的，每次请求的时候指定了请求的方法。JAX-RS是<strong>面向资源</strong>的。后则将网络上的东西当做一种资源，每次请求都是对该资源进行操作，比如对资源的增删查改。</p>
<p>CDI：即Contexts Dependency Injection，和Spring的IOC差不多的东西，就是可以在组件中通过注解注入上下文、请求和响应等。</p>
<p>JTA：即Java Transaction API，使用过Hibernate和EJB的应该知道，就是事务处理，JTA依赖于所处的容器，如果不是分布式开发的话，我们一般使用本地事务，即是数据库本身的事务处理。</p>
<p>PA：即Java Persistence API，就是最常用的持久化技术，原本属于EJB中的部分，EJB3.0之后分离出来，作为一个独立的规范。作为一种ORM技术，JPA提供了基本的统一标准。</p>
<p>MS：即Java Message Service，和JDBC类似，提供了一个统一的API供其他厂商实现，主要用于客户机信息的交互，JMS主要有点到点和订阅/发布两种方式</p>
<p>##第二章：servlet 3.1技术##</p>
<p>本章主要分两部分来介绍servlet技术。</p>
<p>第一部分讲解servlet的一些知识，主要参考17章：java servlet technology。主要包含以下内容：</p>
<p>3.0新特性：</p>
<ul>
<li>开发的简易型<ul>
<li>新增注解支持</li>
</ul>
</li>
<li>可插拔性和可扩展性<ul>
<li>Web 片段是将 web 应用程序逻辑分区为 servlet、servlet-mapping、servlet-filter、filter-mapping、servlet-listener 之类的元素及其子元素</li>
</ul>
</li>
<li>异步支持<ul>
<li>将新的 API 添加到 ServletRequest 和 ServletResponse，用于挂起、恢复和查询请求的状况、启用禁用和查询响应的状况。开发人员可以分别通过 requestSuspended(), requestResumed() 和 requestCompleted() 方法使用请求的 resume、suspend 和 complete 方法通知事件</li>
</ul>
</li>
<li>安全性增强<ul>
<li>Servlet3.0方案建议提供通过编程实现登录和注销功能。HTTPServletRequest 中添加的新 API 可以启用这项功能。HTTPServletRequest 的 login 方法使应用程序或者框架强制进行以容器为中介的验证。HTTPServletRequest 和 HTTPSession 的 logout 方法允许应用程序重置请求的验证状态</li>
</ul>
</li>
<li>其它杂项变化</li>
</ul>
<p>3.1新特性：</p>
<ul>
<li>无阻塞 I/O</li>
<li>协议升级</li>
<li>安全性增强</li>
</ul>
<p>第二部分分析javaee 7 simples 下面的个例子。分为以下6个模块：</p>
<ul>
<li>最基本的操作实例<ul>
<li>cookies</li>
<li>error-mapping</li>
<li>file-upload</li>
</ul>
</li>
<li>servlet3中引入的注解的例子<ul>
<li>servlet-filters</li>
<li>event-listeners</li>
</ul>
</li>
<li>注解与web.xml并存或分片处理的例子<ul>
<li>metadata-complete</li>
<li>web-fragment</li>
</ul>
</li>
<li>异步请求处理<ul>
<li>async-servlet</li>
<li>nonblocking</li>
</ul>
</li>
<li>安全验证<ul>
<li>form-based-security</li>
<li>servlet-security</li>
</ul>
</li>
<li>资源打包<ul>
<li>resource-packaging</li>
</ul>
</li>
<li>协议操作</li>
<li>protocol-handler</li>
</ul>
<h3 id="第一部分：servlet-3-1"><a href="#第一部分：servlet-3-1" class="headerlink" title="第一部分：servlet 3.1"></a>第一部分：servlet 3.1</h3><p>####2.1.1 what is a servlet? ####</p>
<p>A servlet is a Java™ technology-based Web component, managed by a container,that generates dynamic content. —— from JSR315</p>
<p><img src="http://i.imgur.com/t7UqWCg.png" alt=""></p>
<p>The service() method is given an implementation in the HTTPServletbase class, where the doGet() and doPost() methods are called.</p>
<p><img src="http://i.imgur.com/dQTarFP.png" alt=""></p>
<p>####2.1.2 Servlet Lifecycle ####<br><img src="http://i.imgur.com/n3iYiRE.png" alt=""></p>
<p>####2.1.3 writing service methods ####<br>servletrequest:</p>
<p>ServletRequest接口中封装了客户请求信息，如客户请求方式、参数名和参数值、客户端正在使用的协议, 以及发出客户请求的远程主机信息等。</p>
<p><img src="http://i.imgur.com/qfIhhsO.png" alt=""></p>
<p>ServletResponse:</p>
<p>Defines an object to assist a servlet in sending a response to the client. </p>
<p><img src="http://i.imgur.com/0ETpjHg.png" alt=""></p>
<p>####2.1.4 filtering requests and responses ####<br>Filters are Java components—very similar to servlets—that you can use to intercept and process requests before they are sent to the servlet, or to process responses after the servlet has completed, but before the response goes back to the client.</p>
<p><img src="http://i.imgur.com/zqO4Q71.png" alt=""></p>
<ul>
<li>init()</li>
<li>doFilter()</li>
<li>destory()</li>
</ul>
<p>####2.1.5 invoking other web resources ####</p>
<p>web组件能够直接或者间接的调用其他web资源。一个web组件间接地调用其他web资源通过把一个指向另一个web组件的url嵌入到返回客户端的内容中，当他被执行的时候，一个web组件直接的调用另一个资源或者包换另一个资源的内容或者只想另一个资源的请求。</p>
<p><strong>RequestDispatcher</strong></p>
<pre><code>include（request,response）
forward()
</code></pre><p>####2.1.6 accessing the web context ####</p>
<p>web组件执行的context是一个实现servletContext接口的对象，你可以取出该对象通过getServletContext方法。web context子宫访问以下内容的访问方法：</p>
<ul>
<li>Initialization parameters</li>
<li>Resources associated with the web context</li>
<li>Object-valued attributes</li>
<li>Logging capabilities</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">setAttribute(String name, Object object) </div><div class="line"> <span class="comment">//Binds an object to a given attribute name in this ServletContext.</span></div><div class="line">getAttribute(String name)</div><div class="line"><span class="comment">//Returns the servlet container attribute with the given name, or null if there is no attribute by that name.</span></div><div class="line">getRequestDispatcher(String path) </div><div class="line"><span class="comment">//Returns a RequestDispatcher object that acts as a wrapper for the resource located at the given path. </span></div><div class="line"> log(String msg) </div><div class="line"><span class="comment">//Writes the specified message to a servlet log file, usually an event log.  </span></div><div class="line">getRealPath(String path) </div><div class="line"><span class="comment">//Gets the real path corresponding to the given virtual path.</span></div></pre></td></tr></table></figure>
<p>####2.1.7 maintaining client state ####</p>
<p>http协议是无状态的。为了支持需要获取状态的应用，java servlet 技术提供了一个管理sessions的api和允许多种实现sessions的机制。</p>
<p>getSession()：返还和request关联的session对象，没有的话，创建一个。<br>getSession(false)： 返回返还和request关联的session对象，没有的话，返回null<br>isNew(）//如果客户端还没有返回具有该sessionid的session，为true</p>
<p>####2.1.8 uploading files with java servlet technology ####</p>
<p>@MultipartConfig :支持一下属性</p>
<ul>
<li>location:文件系统中目录的绝对路径</li>
<li>fileSizeThreshold:在文件被暂时存储在disk上，文件的自己额大小，默认是0字节。</li>
<li>MaxFileSize:允许上传文件的最大大小</li>
<li>maxRequestSize:最大允许一个multipart/form-data请求的数量。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@MultipartConfig</span>(location=<span class="string">"/tmp"</span>, fileSizeThreshold=<span class="number">1024</span>*<span class="number">1024</span>,</div><div class="line">maxFileSize=<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">5</span>, maxRequestSize=<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">5</span>*<span class="number">5</span>)</div></pre></td></tr></table></figure>
<ul>
<li>Collection<part> getParts()</part></li>
<li>Part getPart(String name)</li>
</ul>
<p>####2.1.9 Asynchronous Processing in Servlets ####</p>
<p>使用asyncSupported属性</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebServlet</span>(urlPatterns=&#123;<span class="string">"/asyncservlet"</span>&#125;, asyncSupported=<span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>
<p><code>javax.servlet.AsyncContext</code>提供方法，这些方法包含你需要异步处理的功能。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;</div><div class="line">...</div><div class="line">AsyncContext acontext = req.startAsync();</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/vc6RIea.png" alt=""></p>
<p>####2.1.10 Nonblocking I/O ####</p>
<p>java ee 对于servlets和filters提供非阻塞i/o ，当在异步模式下处理请求。下面的步骤总结了怎么使用非阻塞io来处理请求和写回复，在service方法中。</p>
<ol>
<li>Put the request in asynchronous mode as described in Asynchronous Processing.</li>
<li>Obtain an input stream and/or an output stream from the request and response<br>objects in the service method.</li>
<li>Assign a read listener to the input stream and/or a write listener to the output<br>stream.</li>
<li>Process the request and the response inside the listener’s callback methods.</li>
</ol>
<p><img src="http://i.imgur.com/rgWh3iZ.png" alt=""></p>
<h3 id="第二部分：-Examples-of-the-servlet"><a href="#第二部分：-Examples-of-the-servlet" class="headerlink" title="第二部分： Examples of the servlet"></a>第二部分： Examples of the servlet</h3><p>####2.2.1 Example 1：session-cookie-config ####</p>
<p>这个例子展示了session的获取和cookie的获取。</p>
<p>首先定义一个监听器，来初始化SessionCookieConfig对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebListener</span>()</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Receives notification that the web application initialization</div><div class="line">     * process is starting.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> sce The servlet context event</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</div><div class="line">        SessionCookieConfig scc =</div><div class="line">            sce.getServletContext().getSessionCookieConfig();</div><div class="line">        scc.setName(<span class="string">"MYJSESSIONID"</span>);</div><div class="line">        scc.setPath(<span class="string">"/myPath"</span>);</div><div class="line">        scc.setDomain(<span class="string">"mydomain"</span>);</div><div class="line">        scc.setComment(<span class="string">"myComment"</span>);</div><div class="line">        scc.setSecure(<span class="keyword">true</span>);</div><div class="line">        scc.setHttpOnly(<span class="keyword">true</span>);</div><div class="line">        scc.setMaxAge(<span class="number">123</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</div><div class="line">        <span class="comment">// Do nothing</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当接收到get请求的时候，我们通过</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateSession</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span></span></div><div class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"></div><div class="line">        req.getSession(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        String sessionCookie = res.getHeader(<span class="string">"Set-Cookie"</span>);</div><div class="line">        <span class="keyword">if</span> (sessionCookie == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Missing Set-Cookie response header"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// name</span></div><div class="line">        <span class="keyword">if</span> (sessionCookie.indexOf(<span class="string">"MYJSESSIONID="</span>) == -<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Missing session id"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// comment</span></div><div class="line">       <span class="comment">/* if (sessionCookie.indexOf("Comment=myComment") == -1) &#123;</span></div><div class="line">            throw new ServletException("Missing cookie comment");</div><div class="line">        &#125;*/</div><div class="line"></div><div class="line">        <span class="comment">// domain</span></div><div class="line">        <span class="keyword">if</span> (sessionCookie.indexOf(<span class="string">"domain=mydomain"</span>) == -<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Missing cookie domain"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// path</span></div><div class="line">        <span class="keyword">if</span> (sessionCookie.indexOf(<span class="string">"path=/myPath"</span>) == -<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Missing cookie path"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// secure</span></div><div class="line">        <span class="keyword">if</span> (sessionCookie.indexOf(<span class="string">"Secure"</span>) == -<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Missing Secure attribute"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// http-only</span></div><div class="line">        <span class="keyword">if</span> (sessionCookie.indexOf(<span class="string">"HttpOnly"</span>) == -<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Missing HttpOnly attribute"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// max-age</span></div><div class="line">        <span class="keyword">if</span> (sessionCookie.indexOf(<span class="string">"Max-Age=123"</span>) == -<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Missing max-age"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        res.getWriter().println(sessionCookie);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-2-2-Example-2：注解的使用"><a href="#2-2-2-Example-2：注解的使用" class="headerlink" title="2.2.2 Example 2：注解的使用"></a>2.2.2 Example 2：注解的使用</h4><p>TestServlet分析：<br>Servlet3.1规范大量使用注解来声明Servlet中，过滤器，监听器和安全性。配置文件web.xml中现在是可选的。</p>
<p>servlet：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebInitParam;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * This class illustrate WebServlet annotation</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Shing Wai Chan</div><div class="line"> */</div><div class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"TestServlet"</span>, urlPatterns = &#123;<span class="string">"/"</span>&#125;,</div><div class="line">            initParams = &#123;<span class="meta">@WebInitParam</span>(name = <span class="string">"message"</span>, value = <span class="string">"my servlet"</span>)&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String listenerMessage = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">        <span class="keyword">super</span>.init(config);</div><div class="line">        listenerMessage = (String) config.getServletContext().getAttribute(<span class="string">"listenerMessage"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span></span></div><div class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line">        PrintWriter writer = res.getWriter();</div><div class="line">        writer.write(<span class="string">"Hello, "</span> + getInitParameter(<span class="string">"message"</span>) + <span class="string">", "</span>);</div><div class="line">        writer.write(req.getAttribute(<span class="string">"filterMessage"</span>) + <span class="string">", "</span>);</div><div class="line">        writer.write(listenerMessage + <span class="string">".\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>拦截器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"TestFilter"</span>, urlPatterns = &#123;<span class="string">"/"</span>&#125;,</div><div class="line">           initParams = &#123;<span class="meta">@WebInitParam</span>(name = <span class="string">"mesg"</span>, value = <span class="string">"my filter"</span>)&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line"></div><div class="line">    String mesg = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">        mesg = filterConfig.getInitParameter(<span class="string">"mesg"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res,</span></span></div><div class="line">            FilterChain chain) <span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line">        req.setAttribute(<span class="string">"filterMessage"</span>, mesg);</div><div class="line">        chain.doFilter(req, res);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>监听器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebListener</span>()</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServletContextListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</div><div class="line">        ServletContext context = sce.getServletContext();</div><div class="line">        String msg = <span class="string">"my listener"</span>;</div><div class="line">        context.setAttribute(<span class="string">"listenerMessage"</span>, msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果:<br><img src="http://i.imgur.com/ZRBC2kM.png" alt=""></p>
<h4 id="2-2-3-Example-3：文件上传"><a href="#2-2-3-Example-3：文件上传" class="headerlink" title="2.2.3 Example 3：文件上传"></a>2.2.3 Example 3：文件上传</h4><p>解释：<br>一个file是一个part，并且filename可以自己写方法解析，也可以直接调用方法part.getSubmittedFileName()。<br>写文件到本地，可以直接调用write（）方法，也可以自己实现。总的来说是一个很方便的功能。</p>
<p>@WebServlet标注使用URL模式属性来定义的servlet映射。</p>
<p>@MultipartConfig注释指示该servlet的期望请求被使用的multipart / form-data的MIME类型进行。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.util.Collection;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.MultipartConfig;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.Part;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> Kinman Chung</div><div class="line"> * <span class="doctag">@author</span> Daniel Guo</div><div class="line"> */</div><div class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"TestServlet"</span>, urlPatterns = &#123;<span class="string">"/TestServlet"</span>&#125;)</div><div class="line"><span class="meta">@MultipartConfig</span>()</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Processes requests for both HTTP</div><div class="line">     * &lt;code&gt;GET&lt;/code&gt; and</div><div class="line">     * &lt;code&gt;POST&lt;/code&gt; methods.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> request servlet request</div><div class="line">     * <span class="doctag">@param</span> response servlet response</div><div class="line">     * <span class="doctag">@throws</span> ServletException if a servlet-specific error occurs</div><div class="line">     * <span class="doctag">@throws</span> IOException if an I/O error occurs</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">    	request.setCharacterEncoding(<span class="string">"utf-8"</span>);</div><div class="line">    	Collection&lt;Part&gt; parts= request.getParts();</div><div class="line">    	System.out.println(parts.size());</div><div class="line">    	<span class="keyword">for</span>(Part part:parts)&#123;</div><div class="line">    		System.out.println(getFileName(part));</div><div class="line">    		String name=getFileName(part);</div><div class="line">    		<span class="keyword">if</span>(name==<span class="keyword">null</span>||name.equals(<span class="string">""</span>))&#123;</div><div class="line">    			<span class="comment">//do nothing</span></div><div class="line">    		&#125;<span class="keyword">else</span>&#123;</div><div class="line">    			part.write(<span class="string">"e:/a/"</span> +getFileName(part));	</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">       request.getRequestDispatcher(<span class="string">"getParts.jsp"</span>).forward(request, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getFileName</span><span class="params">(Part part)</span> </span>&#123;</div><div class="line">        String header = part.getHeader(<span class="string">"Content-Disposition"</span>);</div><div class="line">        String fileName = header.substring(header.indexOf(<span class="string">"filename=\""</span>) + <span class="number">10</span>, header.lastIndexOf(<span class="string">"\""</span>));</div><div class="line"></div><div class="line">        <span class="keyword">return</span> fileName;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(String fileName, Part part)</span> <span class="keyword">throws</span> IOException, FileNotFoundException </span>&#123;</div><div class="line">        InputStream in = part.getInputStream();</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"e:/a/"</span> + fileName);</div><div class="line">        OutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="string">"e:/a/"</span> + fileName);</div><div class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> length = -<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> ((length = in.read(buffer)) != -<span class="number">1</span>) &#123;</div><div class="line">            out.write(buffer, <span class="number">0</span>, length);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        in.close();</div><div class="line">        out.close();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// &lt;editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code."&gt;</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Handles the HTTP</div><div class="line">     * &lt;code&gt;GET&lt;/code&gt; method.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> request servlet request</div><div class="line">     * <span class="doctag">@param</span> response servlet response</div><div class="line">     * <span class="doctag">@throws</span> ServletException if a servlet-specific error occurs</div><div class="line">     * <span class="doctag">@throws</span> IOException if an I/O error occurs</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">        processRequest(request, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Handles the HTTP</div><div class="line">     * &lt;code&gt;POST&lt;/code&gt; method.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> request servlet request</div><div class="line">     * <span class="doctag">@param</span> response servlet response</div><div class="line">     * <span class="doctag">@throws</span> ServletException if a servlet-specific error occurs</div><div class="line">     * <span class="doctag">@throws</span> IOException if an I/O error occurs</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">        processRequest(request, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a short description of the servlet.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> a String containing servlet description</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Short description"</span>;</div><div class="line">    &#125;<span class="comment">// &lt;/editor-fold&gt;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：<br><img src="http://i.imgur.com/gr81LUH.png" alt=""></p>
<h4 id="2-2-4-Example-4：web模块化"><a href="#2-2-4-Example-4：web模块化" class="headerlink" title="2.2.4 Example 4：web模块化"></a>2.2.4 Example 4：web模块化</h4><p>原本一个web应用的任何配置都需要在web.xml中进行，因此会使得web.xml变得很混乱，而且灵活性差，因此Servlet 3.0可以将每个Servlet、Filter、Listener打成jar包，然后放在WEB-INF\lib中；注意各自的模块都有各自的配置文件，这个配置文件的名称为  web-fragment.xml ;</p>
<p>步骤如下：</p>
<ol>
<li>编写Servlet，并编译；</li>
<li>将此编译class文件及所在包通过jar包命令打成jar包；</li>
<li>将此jar包用winrar打开，并将其中的META-INF中的manifest删除并添加 web-fragment.xml；</li>
<li>将此jar包放入WEB-INF\lib中即可；</li>
</ol>
<p>web-fragment.xml注意点：</p>
<ol>
<li>根元素为<web-fragment>;</web-fragment></li>
<li><name></name>表示模块名称；</li>
<li><ordering></ordering>是此模块的加载顺序；</li>
<li><before><others></others></before>表示第一个加载；</li>
<li><after><name>A</name></after>表示比A后面加载；</li>
<li>可以在里面部署listener、filter、servlet</li>
</ol>
<p>针对本例子而言，<br>为了更好地进行适配，减少配置，一个web-fragment是可指定的，并包括在一个库或框架jar文件中的web.xml的一部分或全部。如果有很多个web-fragment jars时，那么人们可能会喜欢指定处理Web-fragment.xml之和注释的顺序。这个很重要。例如，过滤器可以为在web.xml中指定的顺序被执行，类似于监听。在Servlet3.1中，引入了web.xml 中的的标签和web-fragment.xml中的标签。</p>
<p>Web Fragments的顺序被指定在以下优先级：</p>
<ul>
<li>(1)在web.xml中如果存在</li>
<li>(2)如果存在于每一个web-fragment.xml</li>
<li>(3)其他未指定</li>
</ul>
<p>在web.xml的 中提供了一种方法，以指定加载web的fragment.xml之和web fragments的注释处理的顺序。代码如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="3.0" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"&gt;</div><div class="line">    &lt;absolute-ordering&gt;</div><div class="line">        &lt;name&gt;A&lt;/name&gt;</div><div class="line">        &lt;others/&gt;</div><div class="line">        &lt;name&gt;B&lt;/name&gt;</div><div class="line">    &lt;/absolute-ordering&gt;</div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure>
<p>另外，在上述例子中，web fragment A 将被第一个处理，web fragment B 被最后处理。名称A和B在web-fragment.xml之中的元素指定的（见下面的例子）。</p>
<p>排序是在web-fragment.xml中被指定的。如果在web.xml中没有，会查找web-fragment.xml中的。<br>仅仅在web-fragment.xml存在一个的jar包，代码如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;web-fragment&gt;</div><div class="line">            &lt;name&gt;A&lt;/name&gt;</div><div class="line">            ...</div><div class="line">            &lt;ordering&gt;</div><div class="line">                &lt;before&gt;</div><div class="line">                    &lt;others/&gt;</div><div class="line">                &lt;/before&gt;</div><div class="line">            &lt;/ordering&gt;</div><div class="line">&lt;/web-fragment&gt;</div></pre></td></tr></table></figure>
<p>在这种情况下，web-fragment A将首先被处理。<br>下面是在web-fragment.xml存在两个的示例，代码如下:<br>web-fragment A</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;web-fragment&gt;</div><div class="line">            &lt;name&gt;A&lt;/name&gt;</div><div class="line">            ...</div><div class="line">            &lt;ordering&gt;</div><div class="line">                &lt;before&gt;</div><div class="line">                    &lt;others/&gt;</div><div class="line">                &lt;/before&gt;</div><div class="line">            &lt;/ordering&gt;</div><div class="line">&lt;/web-fragment&gt;</div></pre></td></tr></table></figure>
<p>web-fragment B</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;web-fragment&gt;</div><div class="line">            &lt;name&gt;B&lt;/name&gt;</div><div class="line">            ...</div><div class="line">            &lt;ordering&gt;</div><div class="line">                &lt;before&gt;</div><div class="line">                    &lt;others/&gt;</div><div class="line">                &lt;/before&gt;</div><div class="line">            &lt;/ordering&gt;</div><div class="line">&lt;/web-fragment&gt;</div></pre></td></tr></table></figure>
<p>这时web-fragment A和web-fragment B会首先被处理。在这种情况下，人们只能保证web-fragment A和web-fragment B在其他web-fragment之前处理。但是A和B的顺序并不确定，在这种情况下这是随机的。<br>有两个包含 的jars 存在于web-fragment.xml之中，如下</p>
<p>web-fragment A</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;web-fragment&gt;</div><div class="line">            &lt;name&gt;A&lt;/name&gt;</div><div class="line">            ...</div><div class="line">            &lt;ordering&gt;</div><div class="line">                &lt;before&gt;</div><div class="line">                    &lt;others/&gt;</div><div class="line">                &lt;/before&gt;</div><div class="line">            &lt;/ordering&gt;</div><div class="line">&lt;/web-fragment&gt;</div></pre></td></tr></table></figure>
<p>web-fragment B</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;web-fragment&gt;</div><div class="line">            &lt;name&gt;B&lt;/name&gt;</div><div class="line">            ...</div><div class="line">            &lt;ordering&gt;</div><div class="line">                &lt;after&gt;</div><div class="line">                    &lt;name&gt;A&lt;/name&gt;</div><div class="line">                &lt;/after&gt;</div><div class="line">                &lt;before&gt;</div><div class="line">                    &lt;others/&gt;</div><div class="line">                &lt;/before&gt;</div><div class="line">            &lt;/ordering&gt;</div><div class="line">&lt;/web-fragment&gt;</div></pre></td></tr></table></figure>
<p>在这种情况下，A将首先被处理，其次是B，然后其他web fragments。如果想有一个确定的顺序，那么建议使用在web.xml中的absolute-ordering。<br>如何存放web fragments？如果一个框架被打包为一个jar文件，并在部署描述符的形式的元数据信息，那么Web fragments需要被放置在jar文件的META-INF/文件夹。</p>
<p>另一方面，如果一个框架，优先使用web fragment.xml这种方法，而且它增强了Web应用程序的web.xml，该框架必须在Web应用程序中被放置在的WEB-INF/ lib目录中。</p>
<p>运行结果：<br><img src="http://i.imgur.com/OvCgqQc.png" alt=""></p>
<p>##第三章：JAX-RS 2.0 技术##<br>当JAX-RS 1.0在2008年第一次由JSR-311——特别是其领导者Marc Hadley和Paul Sandoz——公之于众的时候，它就成为了第一个基于POJO/Annotation的、用于创建健壮的Web应用的框架。</p>
<p>五年后，Java EE 7已经发布并且它包含了最新的JAX-RS 2.0版本，JSR-339的实现由Marek Potociar和Santiago Pericas-Geertsen发起。与Java EE 7的核心主题相一致，JAX-RS 2.0添加了一些期待已久的特性，这些特性主要围绕Oracle所称的“简化API”。</p>
<p>本章主要介绍rest和jax-rs技术。分两个部分。</p>
<p>第一部分介绍相关知识和概念，主要参考第31章内容。主要包含以下内容：</p>
<ul>
<li>客户端API</li>
<li>异步</li>
<li>HATEOAS（超媒体）</li>
<li>注解</li>
<li>验证</li>
<li>过滤器与处理程序</li>
<li>内容协商</li>
</ul>
<p>第二部分主要介绍一些simples。</p>
<ul>
<li>async-chat</li>
<li>message-board</li>
</ul>
<p>###第一部分：JAX-RS: Advanced Topics####</p>
<ul>
<li><p>rest：</p>
<p>  REpresentational State Transfer：代表性状态传输、具象状态传输</p>
<p>  REST定义了应该如何正确地使用Web标准，例如HTTP和URI。REST并非标准，而是一种开发 Web 应用的架构风格，可以将其理解为一种设计模式。</p>
</li>
<li><p>jax-rs：</p>
<p>  Java API forRESTful WebServices旨在定义一个统一的规范，使得 Java 程序员可以使用一套固定的接口来开发 REST 应用，避免了依赖于第三方框架。是一个Java编程语言的应用程序接口，支持按照表象化状态转变 (REST)架构风格创建Web服务Web服务。</p>
<p>  与传统的 servlet 模型相比，JAX-RS 提供了一种可行的、更为简便、移植性更好的方式来在 Java 内实现 RESTful 服务。使用注释让您能够轻松提供 Java 资源的路径位置并将 Java 方法绑定到 HTTP 请求方法。一种可移植的数据绑定架构提供了一些本机的 Java 类型支持并允许进行序列化/反序列化处理的完全定制。javax.ws.rs.core.Application 子类的扩展以及 web.xml 内的相应清单表明了用最少的部署描述符配置就能进行轻松部署。</p>
<p>  JAX-RS 的具体实现由第三方提供，例如 Sun 的参考实现 Jersey、Apache 的 CXF 以及 JBoss 的 RESTEasy。</p>
</li>
</ul>
<p>####3.1.1 注解####</p>
<p>注释<br>新的注释已经嵌入，例如支持新的注入。<br>JAX-RS提供注解如下：<br><img src="http://i.imgur.com/ydDwiFZ.png" alt=""></p>
<ul>
<li><p>@Path，标注资源类或方法的相对路径</p>
</li>
<li><p>@GET，@PUT，@POST，@DELETE，标注方法是用的HTTP请求的类型，分别对应 4 种 HTTP 方法，用于对资源进行创建、检索、更新和删除的操作。</p>
<ul>
<li>若要创建资源，应该使用 POST 方法；</li>
<li>若要检索某个资源，应该使用 GET 方法；</li>
<li>若要更改资源状态或对其进行更新，应该使用 PUT 方法；</li>
<li>若要删除某个资源，应该使用 DELETE 方法。</li>
</ul>
</li>
<li><p>@Produces，标注返回的MIME媒体类型</p>
</li>
<li><p>@Consumes，标注可接受请求的MIME媒体类型</p>
</li>
<li><p>@PathParam，@QueryParam，@HeaderParam，@CookieParam，@MatrixParam，@FormParam，分别标注方法的参数来自于HTTP请求的不同位置，</p>
<ul>
<li>@PathParam来自于URL的路径，</li>
<li>@QueryParam来自于URL的查询参数，</li>
<li>@HeaderParam来自于HTTP请求的头信息，</li>
<li>@CookieParam来自于HTTP请求的Cookie。</li>
</ul>
</li>
</ul>
<p>具体例子如下：</p>
<ul>
<li><p>获取path参数：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Path</span>(<span class="string">"/employees/&#123;firstname&#125;.&#123;lastname&#125;@&#123;domain&#125;.com"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpResource</span> </span>&#123;</div><div class="line"><span class="meta">@GET</span></div><div class="line"><span class="meta">@Produces</span>(<span class="string">"text/xml"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmployeelastname</span><span class="params">(@PathParam(<span class="string">"lastname"</span>)</span> String lastName) </span>&#123;</div><div class="line">...</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 在这个例子中，@path注解定义了url变量(firstname lastname domain),request请求中pathparm标签从url中获取lastname属性。你也可以使用正则表达式，比如你想要求lastname只包含大小写字母，你可以定义如下。在这里，如果lastname没有匹配正则表达式，一个404 response将会被返回。<code>@Path(&quot;/employees/{firstname}.{lastname[a-zA-Z]*}@{domain}.com&quot;)</code></p>
</li>
<li><p>获取query参数：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Path</span>(<span class="string">"/employees/"</span>)</div><div class="line"><span class="meta">@GET</span></div><div class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">getEmployees</span><span class="params">(</span></span></div><div class="line">@DefaultValue(<span class="string">"2003"</span>) @<span class="title">QueryParam</span><span class="params">(<span class="string">"minyear"</span>)</span> <span class="keyword">int</span> minyear,</div><div class="line">@<span class="title">DefaultValue</span><span class="params">(<span class="string">"2013"</span>)</span> @<span class="title">QueryParam</span><span class="params">(<span class="string">"maxyear"</span>)</span> <span class="keyword">int</span> maxyear)</div><div class="line">&#123;...&#125;</div></pre></td></tr></table></figure>
<pre><code>这段代码定义了连个参数minyear和maxyear。请求如下：`GET /employees?maxyear=2013&amp;minyear=2003`我们可以得到这两个参数。
</code></pre></li>
<li><p>获取表单数据</p>
<p>  使用@formparm注解来从html forms中抽取参数。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;FORM action=&quot;http://example.com/employees/&quot; method=&quot;post&quot;&gt;</div><div class="line">&lt;p&gt;</div><div class="line">&lt;fieldset&gt;</div><div class="line">Employee name: &lt;INPUT type=&quot;text&quot; name=&quot;empname&quot; tabindex=&quot;1&quot;&gt;</div><div class="line">Employee address: &lt;INPUT type=&quot;text&quot; name=&quot;empaddress&quot; tabindex=&quot;2&quot;&gt;</div><div class="line">Manager name: &lt;INPUT type=&quot;text&quot; name=&quot;managername&quot; tabindex=&quot;3&quot;&gt;</div><div class="line">&lt;/fieldset&gt;</div><div class="line">&lt;/p&gt;</div><div class="line">&lt;/FORM&gt;</div></pre></td></tr></table></figure>
<p>  获取指定参数：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@POST</span></div><div class="line"><span class="meta">@Consumes</span>(<span class="string">"application/x-www-form-urlencoded"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(@FormParam(<span class="string">"managername"</span>)</span> String managername) </span>&#123;</div><div class="line"><span class="comment">// Store the value</span></div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  获取一个键值对map：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@POST</span></div><div class="line"><span class="meta">@Consumes</span>(<span class="string">"application/x-www-form-urlencoded"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(MultivaluedMap&lt;String, String&gt; formParams)</span> </span>&#123;</div><div class="line"><span class="comment">// Store the message</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>获取java类型</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getParams</span><span class="params">(@Context UriInfo ui)</span> </span>&#123;</div><div class="line">MultivaluedMap&lt;String, String&gt; queryParams = ui.getQueryParameters();</div><div class="line">MultivaluedMap&lt;String, String&gt; pathParams = ui.getPathParameters();</div><div class="line">&#125;</div><div class="line"><span class="meta">@GET</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHeaders</span><span class="params">(@Context HttpHeaders hh)</span> </span>&#123;</div><div class="line">MultivaluedMap&lt;String, String&gt; headerParams = hh.getRequestHeaders();</div><div class="line">MultivaluedMap&lt;String, Cookie&gt; pathParams = hh.getCookies();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>####3.1.2 resource类和resource方法####</p>
<p>Web 资源作为一个 Resource 类来实现，对资源的请求由 Resource 方法来处理。</p>
<p>Resource 类或 Resource 方法被打上了 Path 标注，Path 标注的值是一个相对的 URI 路径，用于对资源进行定位，路径中可以包含任意的正则表达式以匹配资源。和大多数 JAX-RS 标注一样，Path 标注是可继承的，子类或实现类可以继承超类或接口中的 Path 标注。</p>
<p>Resource 类是 POJO，使用 JAX-RS 标注来实现相应的 Web 资源。</p>
<p>Resource 类分为根 Resource 类和子 Resource 类，区别在于子 Resource 类没有打在类上的 @Path 标注。</p>
<p>Resource 类的实例方法打上了@Path 标注，则为 Resource 方法或子 Resource 定位器，子 Resource 定位器上没有任何 @GET、@POST、@PUT、@DELETE 或者自定义的 @HttpMethod</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Path</span>(<span class="string">"/"</span>)   </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookkeepingService</span> </span>&#123;   </div><div class="line">    ......   </div><div class="line">    <span class="meta">@Path</span>(<span class="string">"/person/"</span>) <span class="comment">//资源方法；若无@POST，则为子资源定位器  </span></div><div class="line">    <span class="meta">@POST</span>   </div><div class="line">    <span class="meta">@Consumes</span>(<span class="string">"application/json"</span>)   </div><div class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">createPerson</span><span class="params">(Person person)</span> </span>&#123; <span class="comment">//JSON 格式的请求体被自动映射为实体参数person  </span></div><div class="line">        ......   </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    <span class="meta">@Path</span>(<span class="string">"/person/"</span>)   </div><div class="line">    <span class="meta">@PUT</span>   </div><div class="line">    <span class="meta">@Consumes</span>(<span class="string">"application/json"</span>)   </div><div class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">updatePerson</span><span class="params">(Person person)</span> </span>&#123;   </div><div class="line">        ......   </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    <span class="meta">@Path</span>(<span class="string">"/person/&#123;id:\\d+&#125;/"</span>) <span class="comment">//正则表达式  </span></div><div class="line">    <span class="meta">@DELETE</span>   </div><div class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">deletePerson</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span>   </span></div><div class="line">    <span class="keyword">int</span> id) &#123;   </div><div class="line">        ......   </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    <span class="meta">@Path</span>(<span class="string">"/person/&#123;id:\\d+&#125;/"</span>)   </div><div class="line">    <span class="meta">@GET</span>   </div><div class="line">    <span class="meta">@Produces</span>(<span class="string">"application/json"</span>)   </div><div class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">readPerson</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span>   </span></div><div class="line">    <span class="keyword">int</span> id) &#123;   </div><div class="line">        ......   </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    <span class="meta">@Path</span>(<span class="string">"/persons/"</span>)   </div><div class="line">    <span class="meta">@GET</span>   </div><div class="line">    <span class="meta">@Produces</span>(<span class="string">"application/json"</span>)   </div><div class="line">    <span class="keyword">public</span> Person[] readAllPersons() &#123; <span class="comment">//数组类型的返回值被自动映射为 JSON 格式的响应体——？  </span></div><div class="line">        ......   </div><div class="line">    &#125;   </div><div class="line">  </div><div class="line">    <span class="meta">@Path</span>(<span class="string">"/person/&#123;name&#125;/"</span>)   </div><div class="line">    <span class="meta">@GET</span>   </div><div class="line">    <span class="meta">@Produces</span>(<span class="string">"application/json"</span>)   </div><div class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">readPersonByName</span><span class="params">(@PathParam(<span class="string">"name"</span>)</span>   </span></div><div class="line">    String name) &#123;   </div><div class="line">        ......   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Resource 方法合法的参数类型包括：</p>
<ol>
<li>原生类型</li>
<li>构造函数接收单个字符串参数，或者包含拥有一个static的valueOf(String)方法</li>
<li>List<t>，Set<t>，SortedSet<t>（T 为以上的 2 种类型）</t></t></t></li>
<li>用于映射请求体的实体参数</li>
</ol>
<p>Resource 方法合法的返回值类型包括：</p>
<ol>
<li>void：状态码 204 和空响应体</li>
<li>Response：Response 的 status 属性指定了状态码，entity 属性映射为响应体<code>return Response.status(Status.OK).entity(JsonUtils.toString(result)).build();</code></li>
<li>GenericEntity：GenericEntity 的 entity 属性映射为响应体，entity 属性为空则状态码为 204，非空则状态码为 200</li>
<li>其它类型：返回的对象实例映射为响应体，实例为空则状态码为 204，非空则状态码为 200</li>
</ol>
<p>对于错误处理，Resource 方法可以抛出非受控异常 WebApplicationException 或者返回包含了适当的错误码集合的 Response 对象。</p>
<p>####3.1.3 内容协商与数据绑定####<br>Web 资源可以有不同的表现形式，服务端与客户端之间需要一种称为内容协商（Content Negotiation）的机制：</p>
<p>作为服务端，Resource 方法的@Produces 标注用于指定响应体的数据格式（MIME 类型），@Consumes 标注用于指定请求体的数据格式；</p>
<p>作为客户端，Accept 请求头用于选择响应体的数据格式，Content-Type 请求头用于标识请求体的数据格式。</p>
<p>服务器端：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>  </div><div class="line"><span class="meta">@Path</span>(value=<span class="string">"/&#123;emailAddress:.+@.+\\.[a-z]+&#125;"</span>)  </div><div class="line"><span class="meta">@Produces</span>(value=&#123;<span class="string">"text/xml"</span>, <span class="string">"application/json"</span>&#125;)  </div><div class="line"><span class="function"><span class="keyword">public</span> ContactInfo <span class="title">getByEmailAddress</span><span class="params">(@PathParam(value=<span class="string">"emailAddress"</span>)</span>   </span></div><div class="line">    String emailAddress) &#123;  </div><div class="line">    ...  </div><div class="line">&#125;     </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="meta">@POST</span>  </div><div class="line"><span class="meta">@Consumes</span>(value=&#123;<span class="string">"text/xml"</span>, <span class="string">"application/json"</span>&#125;)  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addContactInfo</span><span class="params">(ContactInfo contactInfo)</span> </span>&#123;  </div><div class="line">    ...  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>####3.1.4 bean验证####</p>
<p>一个基于注释的机制来识别参数的meta-data。例如“@NotNull shares”代表“shares”参数不允许为null。你同样可以提供传统的注释，比如保证特定的数据格式，例如邮编或者电话号码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@POST</span></div><div class="line"><span class="meta">@Path</span>(<span class="string">"/createUser"</span>)</div><div class="line"><span class="meta">@Consumes</span>(MediaType.APPLICATION_FORM_URLENCODED)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">(@NotNull @FormParam(<span class="string">"username"</span>)</span> String username,</span></div><div class="line">@NotNull @<span class="title">FormParam</span><span class="params">(<span class="string">"firstName"</span>)</span> String firstName,</div><div class="line">@NotNull @<span class="title">FormParam</span><span class="params">(<span class="string">"lastName"</span>)</span> String lastName,</div><div class="line">@Email @<span class="title">FormParam</span><span class="params">(<span class="string">"email"</span>)</span> String email) &#123;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以用到一个resource class中，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Path</span>(<span class="string">"/createUser"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateUserResource</span> </span>&#123;</div><div class="line"><span class="meta">@NotNull</span></div><div class="line"><span class="meta">@FormParam</span>(<span class="string">"username"</span>)</div><div class="line"><span class="keyword">private</span> String username;</div><div class="line"><span class="meta">@NotNull</span></div><div class="line"><span class="meta">@FormParam</span>(<span class="string">"firstName"</span>)</div><div class="line"><span class="keyword">private</span> String firstName;</div><div class="line"><span class="meta">@NotNull</span></div><div class="line"><span class="meta">@FormParam</span>(<span class="string">"lastName"</span>)</div><div class="line"><span class="keyword">private</span> String lastName;</div><div class="line"><span class="meta">@Email</span></div><div class="line"><span class="meta">@FormParam</span>(<span class="string">"email"</span>)</div><div class="line"><span class="keyword">private</span> String email;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>####3.1.5 客户端api####</p>
<p>JAX-RS 1.0是一个严格的客户端API，一些实现对客户端提供了各种等级的支持，但是通常开发人员会安装像Apache软件基Jakarte公共组件中的HttpClient 或 WizTools的 REST Client。</p>
<p>JAX-RS 2.0 为客户端调用Web服务添加了一个”构建” 工具:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Client client=ClientFactory.newClient();</div><div class="line">String shares=client.target(<span class="string">"http://.../portfolio/123"</span>)</div><div class="line">    .pathParam(<span class="string">"identifier"</span>, <span class="string">"IBM"</span>)</div><div class="line">    .queryParameter(<span class="string">"identifierType"</span>, <span class="string">"ticker"</span>)</div><div class="line">    .request(<span class="string">"text/plain).get(String.class"</span>);</div></pre></td></tr></table></figure>
<p>我们看，这个方法首先包含了一个客户端(client)，然后使用了构建模式来构造URL的所有参数，同时，允许开发人员不需要使用各种各样的URL构造器来规划URL。</p>
<p>####3.1.6 异步####<br>异步：<br>在JAX-RS 1.0中，一个要调用的客户端需要等待服务器传回的响应。2.0嵌入了异步支持。这让一个客户端能够发起一个REST的调用，并且在响应完成的时候得到一个Future或者一个InvocationCallback作为通知。</p>
<p>####3.1.7 HATEOAS####<br>根据严格的RESTafarian规范，如果你没有使用HATEOAS，你就不是在做REST！HATEOAS（作为应用状态引擎的超媒体）要求REST的生产者和客户在“每个调用返回一组链接”上达成共识，以便进行下一步。如果你认为REST是一个应用版本的Web页，那么HATEOAS就可以认为是包含一组Web页面的链接。</p>
<p>JAX-RS 2.0提供了Link和Target类，来把超链接嵌入到一个服务器端的响应当中，并把它们响应到客户端去。</p>
<p>###第二部分：Examples of the JAX-RS 2.0 ##</p>
<h4 id="3-2-1-Example-1-async-war"><a href="#3-2-1-Example-1-async-war" class="headerlink" title="3.2.1 Example 1 async-war"></a>3.2.1 Example 1 async-war</h4><p>分析：</p>
<p>chatApplication</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.HashSet;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.ws.rs.ApplicationPath;</div><div class="line"><span class="keyword">import</span> javax.ws.rs.core.Application;</div><div class="line"></div><div class="line"><span class="meta">@ApplicationPath</span>(<span class="string">"/chat"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Set&lt;Class&lt;?&gt;&gt; getClasses() &#123;</div><div class="line">        <span class="keyword">final</span> Set&lt;Class&lt;?&gt;&gt; classes = <span class="keyword">new</span> HashSet&lt;Class&lt;?&gt;&gt;();</div><div class="line">        classes.add(ChatResource.class);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> classes;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Path</span>(<span class="string">"/"</span>)</div><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatResource</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * This queue synchronizes produces/consumes operations. It contains &#123;<span class="doctag">@link</span> AsyncResponse async responses&#125; into</div><div class="line">     * which post message should be written.</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;AsyncResponseWrapper&gt; suspended = <span class="keyword">new</span> ArrayBlockingQueue&lt;AsyncResponseWrapper&gt;(<span class="number">10</span>);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Internal response wrapper which bundles response with id.</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncResponseWrapper</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AsyncResponse asyncResponse;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String id;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">AsyncResponseWrapper</span><span class="params">(AsyncResponse asyncResponse, String id)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.asyncResponse = asyncResponse;</div><div class="line">            <span class="keyword">this</span>.id = id;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> AsyncResponse <span class="title">getAsyncResponse</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> asyncResponse;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> id;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Handle a HTTP get message asynchronously (suspend response in order to release the container thread instead of</div><div class="line">     * blocking it on the blocking queue).</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> asyncResponse Suspended asynchronous response (injected).</div><div class="line">     * <span class="doctag">@param</span> requestId Header identifying the header.</div><div class="line">     */</div><div class="line">    <span class="meta">@GET</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">(@Suspended <span class="keyword">final</span> AsyncResponse asyncResponse, <span class="keyword">final</span> @HeaderParam(<span class="string">"request-id"</span>)</span> String requestId) </span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">// Put actual response to the queue. This response will be later taken and resumed with</span></div><div class="line">                    <span class="comment">// the message.</span></div><div class="line">                    suspended.put(<span class="keyword">new</span> AsyncResponseWrapper(asyncResponse, requestId));</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Handle a HTTP POST method asynchronously (suspend response in order to release the container thread instead of</div><div class="line">     * blocking it on the blocking queue).</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> postAsyncResponse Suspended asynchronous response (injected).</div><div class="line">     * <span class="doctag">@param</span> message Message to be sent.</div><div class="line">     */</div><div class="line">    <span class="meta">@POST</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postMessage</span><span class="params">(@Suspended <span class="keyword">final</span> AsyncResponse postAsyncResponse, <span class="keyword">final</span> String message)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">// Take one response from the queue and resume it with the message. If no message is in the queue now</span></div><div class="line">                    <span class="comment">// then this method will block the thread until the response is put into queue (by GET http method).</span></div><div class="line">                    <span class="keyword">final</span> AsyncResponseWrapper responseWrapper = suspended.take();</div><div class="line">                    responseWrapper.getAsyncResponse().resume(Response.ok()</div><div class="line">                            .entity(message).header(<span class="string">"request-id"</span>, responseWrapper.getId()).build());</div><div class="line"></div><div class="line">                    <span class="comment">// Now resume response connected with the request invoking this post method just reply that the message</span></div><div class="line">                    <span class="comment">// was delivered.</span></div><div class="line">                    postAsyncResponse.resume(<span class="string">"Sent!"</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Get the string representation of internal async response queue &lt;code&gt;suspended&lt;code/&gt;.</div><div class="line">     * &lt;p/&gt;</div><div class="line">     * This resource is requested in regular intervals by clients.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> Plain text with list of request-id of async responses.</div><div class="line">     */</div><div class="line">    <span class="meta">@GET</span></div><div class="line">    <span class="meta">@Path</span>(<span class="string">"queue"</span>)</div><div class="line">    <span class="meta">@Produces</span>(<span class="string">"text/html"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResponseQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div><div class="line">        <span class="keyword">boolean</span> addSeparator = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span> (AsyncResponseWrapper asyncResponseWrapper : suspended) &#123;</div><div class="line">            <span class="keyword">if</span> (addSeparator) &#123;</div><div class="line">                sb.append(<span class="string">", "</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                addSeparator = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            sb.append(asyncResponseWrapper.getId());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-2-2-Example-2：-message-board"><a href="#3-2-2-Example-2：-message-board" class="headerlink" title="3.2.2 Example 2： message-board"></a>3.2.2 Example 2： message-board</h4><p>详情见源代码</p>
<p>##第四章：json processing 1.0 总览##</p>
<p>主要参照第19章：json processing</p>
<h3 id="第一部分：json-processing-介绍"><a href="#第一部分：json-processing-介绍" class="headerlink" title="第一部分：json processing 介绍"></a>第一部分：json processing 介绍</h3><p>####4.1.1 json####</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="attr">"firstName"</span>: <span class="string">"Duke"</span>,</div><div class="line"><span class="attr">"lastName"</span>: <span class="string">"Java"</span>,</div><div class="line"><span class="attr">"age"</span>: <span class="number">18</span>,</div><div class="line"><span class="attr">"streetAddress"</span>: <span class="string">"100 Internet Dr"</span>,</div><div class="line"><span class="attr">"city"</span>: <span class="string">"JavaTown"</span>,</div><div class="line"><span class="attr">"state"</span>: <span class="string">"JA"</span>,</div><div class="line"><span class="attr">"postalCode"</span>: <span class="string">"12345"</span>,</div><div class="line"><span class="attr">"phoneNumbers"</span>: [</div><div class="line">&#123; <span class="attr">"Mobile"</span>: <span class="string">"111-111-1111"</span> &#125;,</div><div class="line">&#123; <span class="attr">"Home"</span>: <span class="string">"222-222-2222"</span> &#125;</div><div class="line">]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>http header:<br><code>Content-Type: application/json</code></p>
<p>####4.1.2 json processing in the java ee platform####</p>
<p><img src="http://i.imgur.com/XUTrGIq.png" alt=""></p>
<p>####4.1.3 using the object model api####</p>
<p>构建json对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">JsonObject model = Json.createObjectBuilder()</div><div class="line">.add(<span class="string">"firstName"</span>, <span class="string">"Duke"</span>)</div><div class="line">.add(<span class="string">"lastName"</span>, <span class="string">"Java"</span>)</div><div class="line">.add(<span class="string">"age"</span>, <span class="number">18</span>)</div><div class="line">.add(<span class="string">"streetAddress"</span>, <span class="string">"100 Internet Dr"</span>)</div><div class="line">.add(<span class="string">"city"</span>, <span class="string">"JavaTown"</span>)</div><div class="line">.add(<span class="string">"state"</span>, <span class="string">"JA"</span>)</div><div class="line">.add(<span class="string">"postalCode"</span>, <span class="string">"12345"</span>)</div><div class="line">.add(<span class="string">"phoneNumbers"</span>, Json.createArrayBuilder()</div><div class="line">.add(Json.createObjectBuilder()</div><div class="line">.add(<span class="string">"type"</span>, <span class="string">"mobile"</span>)</div><div class="line">.add(<span class="string">"number"</span>, <span class="string">"111-111-1111"</span>))</div><div class="line">.add(Json.createObjectBuilder()</div><div class="line">.add(<span class="string">"type"</span>, <span class="string">"home"</span>)</div><div class="line">.add(<span class="string">"number"</span>, <span class="string">"222-222-2222"</span>)))</div><div class="line">.build();</div></pre></td></tr></table></figure></p>
<h3 id="第二部分：Examples-of-json-processing"><a href="#第二部分：Examples-of-json-processing" class="headerlink" title="第二部分：Examples of json processing"></a>第二部分：Examples of json processing</h3><p>jsonobject例子:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Path</span>(<span class="string">"/object"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectResource</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> JsonBuilderFactory bf = Json.createBuilderFactory(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">    <span class="meta">@GET</span></div><div class="line">    <span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</div><div class="line">    <span class="function"><span class="keyword">public</span> JsonObject <span class="title">doGet</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> bf.createObjectBuilder()</div><div class="line">            .add(<span class="string">"firstName"</span>, <span class="string">"John"</span>)</div><div class="line">            .add(<span class="string">"lastName"</span>, <span class="string">"Smith"</span>)</div><div class="line">            .add(<span class="string">"age"</span>, <span class="number">25</span>)</div><div class="line">            .add(<span class="string">"address"</span>, bf.createObjectBuilder()</div><div class="line">                .add(<span class="string">"streetAddress"</span>, <span class="string">"21 2nd Street"</span>)</div><div class="line">                .add(<span class="string">"city"</span>, <span class="string">"New York"</span>)</div><div class="line">                .add(<span class="string">"state"</span>, <span class="string">"NY"</span>)</div><div class="line">                .add(<span class="string">"postalCode"</span>, <span class="string">"10021"</span>))</div><div class="line">            .add(<span class="string">"phoneNumber"</span>, bf.createArrayBuilder()</div><div class="line">                .add(bf.createObjectBuilder()</div><div class="line">                    .add(<span class="string">"type"</span>, <span class="string">"home"</span>)</div><div class="line">                    .add(<span class="string">"number"</span>, <span class="string">"212 555-1234"</span>))</div><div class="line">                .add(bf.createObjectBuilder()</div><div class="line">                    .add(<span class="string">"type"</span>, <span class="string">"fax"</span>)</div><div class="line">                    .add(<span class="string">"number"</span>, <span class="string">"646 555-4567"</span>)))</div><div class="line">            .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@POST</span></div><div class="line">    <span class="meta">@Consumes</span>(MediaType.APPLICATION_JSON)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(JsonObject structure)</span> </span>&#123;</div><div class="line">        System.out.println(structure);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>jsonarray例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Path</span>(<span class="string">"/array"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayResource</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> JsonBuilderFactory bf = Json.createBuilderFactory(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">    <span class="meta">@GET</span></div><div class="line">    <span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</div><div class="line">    <span class="function"><span class="keyword">public</span> JsonArray <span class="title">doGet</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> bf.createArrayBuilder()</div><div class="line">                .add(bf.createObjectBuilder()</div><div class="line">                    .add(<span class="string">"type"</span>, <span class="string">"home"</span>)</div><div class="line">                    .add(<span class="string">"number"</span>, <span class="string">"212 555-1234"</span>))</div><div class="line">                .add(bf.createObjectBuilder()</div><div class="line">                    .add(<span class="string">"type"</span>, <span class="string">"fax"</span>)</div><div class="line">                    .add(<span class="string">"number"</span>, <span class="string">"646 555-4567"</span>))</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@POST</span></div><div class="line">    <span class="meta">@Consumes</span>(MediaType.APPLICATION_JSON)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(JsonArray structure)</span> </span>&#123;</div><div class="line">        System.out.println(structure);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>jsonStructure</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Path</span>(<span class="string">"/structure"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StructureResource</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> JsonBuilderFactory bf = Json.createBuilderFactory(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">    <span class="meta">@GET</span></div><div class="line">    <span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</div><div class="line">    <span class="function"><span class="keyword">public</span> JsonStructure <span class="title">doGet</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> bf.createObjectBuilder()</div><div class="line">            .add(<span class="string">"firstName"</span>, <span class="string">"John"</span>)</div><div class="line">            .add(<span class="string">"lastName"</span>, <span class="string">"Smith"</span>)</div><div class="line">            .add(<span class="string">"age"</span>, <span class="number">25</span>)</div><div class="line">            .add(<span class="string">"address"</span>, bf.createObjectBuilder()</div><div class="line">                .add(<span class="string">"streetAddress"</span>, <span class="string">"21 2nd Street"</span>)</div><div class="line">                .add(<span class="string">"city"</span>, <span class="string">"New York"</span>)</div><div class="line">                .add(<span class="string">"state"</span>, <span class="string">"NY"</span>)</div><div class="line">                .add(<span class="string">"postalCode"</span>, <span class="string">"10021"</span>))</div><div class="line">            .add(<span class="string">"phoneNumber"</span>, bf.createArrayBuilder()</div><div class="line">                .add(bf.createObjectBuilder()</div><div class="line">                    .add(<span class="string">"type"</span>, <span class="string">"home"</span>)</div><div class="line">                    .add(<span class="string">"number"</span>, <span class="string">"212 555-1234"</span>))</div><div class="line">                .add(bf.createObjectBuilder()</div><div class="line">                    .add(<span class="string">"type"</span>, <span class="string">"fax"</span>)</div><div class="line">                    .add(<span class="string">"number"</span>, <span class="string">"646 555-4567"</span>)))</div><div class="line">            .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@POST</span></div><div class="line">    <span class="meta">@Consumes</span>(MediaType.APPLICATION_JSON)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(JsonStructure structure)</span> </span>&#123;</div><div class="line">        System.out.println(structure);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JsonGenerator例子</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Path</span>(<span class="string">"/generator"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratorResource</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@GET</span></div><div class="line">    <span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</div><div class="line">    <span class="function"><span class="keyword">public</span> StreamingOutput <span class="title">doGet</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StreamingOutput() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(OutputStream os)</span> </span>&#123;</div><div class="line">                writeWikiExample(os);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Writes wiki example JSON in a streaming fashion</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeWikiExample</span><span class="params">(OutputStream os)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span>(JsonGenerator gene = Json.createGenerator(os)) &#123;</div><div class="line">            gene.writeStartObject()</div><div class="line">                .write(<span class="string">"firstName"</span>, <span class="string">"John"</span>)</div><div class="line">                .write(<span class="string">"lastName"</span>, <span class="string">"Smith"</span>)</div><div class="line">                .write(<span class="string">"age"</span>, <span class="number">25</span>)</div><div class="line">                .writeStartObject(<span class="string">"address"</span>)</div><div class="line">                    .write(<span class="string">"streetAddress"</span>, <span class="string">"21 2nd Street"</span>)</div><div class="line">                    .write(<span class="string">"city"</span>, <span class="string">"New York"</span>)</div><div class="line">                    .write(<span class="string">"state"</span>, <span class="string">"NY"</span>)</div><div class="line">                    .write(<span class="string">"postalCode"</span>, <span class="string">"10021"</span>)</div><div class="line">                .writeEnd()</div><div class="line">                .writeStartArray(<span class="string">"phoneNumber"</span>)</div><div class="line">                    .writeStartObject()</div><div class="line">                        .write(<span class="string">"type"</span>, <span class="string">"home"</span>)</div><div class="line">                        .write(<span class="string">"number"</span>, <span class="string">"212 555-1234"</span>)</div><div class="line">                    .writeEnd()</div><div class="line">                    .writeStartObject()</div><div class="line">                        .write(<span class="string">"type"</span>, <span class="string">"fax"</span>)</div><div class="line">                        .write(<span class="string">"number"</span>, <span class="string">"646 555-4567"</span>)</div><div class="line">                    .writeEnd()</div><div class="line">                .writeEnd()</div><div class="line">            .writeEnd();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JsonParser例子</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Path</span>(<span class="string">"/parser"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParserResource</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@GET</span></div><div class="line">    <span class="meta">@Produces</span>(<span class="string">"text/plain"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> StreamingOutput <span class="title">doGet</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StreamingOutput() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(OutputStream os)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                writeTwitterFeed(os);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Parses JSON from twitter search REST API</div><div class="line">     *</div><div class="line">     * ... &#123; ... "from_user" : "xxx", ..., "text: "yyy", ... &#125; ...</div><div class="line">     *</div><div class="line">     * then writes to HTTP output stream as follows:</div><div class="line">     *</div><div class="line">     * xxx: yyy</div><div class="line">     * --------</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeTwitterFeed</span><span class="params">(OutputStream os)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://search.twitter.com/search.json?q=%23java"</span>);</div><div class="line">        <span class="keyword">try</span>(InputStream is = url.openStream();</div><div class="line">            JsonParser parser = Json.createParser(is);</div><div class="line">            PrintWriter ps = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> OutputStreamWriter(os, <span class="string">"UTF-8"</span>))) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">while</span>(parser.hasNext()) &#123;</div><div class="line">                Event e = parser.next();</div><div class="line">                <span class="keyword">if</span> (e == Event.KEY_NAME) &#123;</div><div class="line">                    <span class="keyword">if</span> (parser.getString().equals(<span class="string">"from_user"</span>)) &#123;</div><div class="line">                        parser.next();</div><div class="line">                        ps.print(parser.getString());</div><div class="line">                        ps.print(<span class="string">": "</span>);</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parser.getString().equals(<span class="string">"text"</span>)) &#123;</div><div class="line">                        parser.next();</div><div class="line">                        ps.println(parser.getString());</div><div class="line">                        ps.println(<span class="string">"---------"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##第四章：WebSocket 1.0分析##</p>
<p>作为Html5新特性之一的WebSocket组件，在实时性有一定要求的WEB应用开发 中还是有一定用武之地，高版本的IE、Chrome、FF浏览器都支持Websocket，标准的Websocket通信是基于RFC6455实现服务器 端与客户端握手与消息接发的。如果对Websocket通信不是太理解，可以查看RFC文档即可，简单说就是通过发送HTTP请求，实现双方握手，将无状 态的HTTP通信协议进一步升级成有状态的通信协议，同时Websocket还支持子协议选项与安全传输。标准的websocket连接URL以ws开 头，如果是基于TLS的则以wss开头。</p>
<p>###第一部分:java api for websocket###</p>
<p>参考第18章：java api for websocket</p>
<p>###第二部分:Examples for websocket###</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##分析要求##&lt;/p&gt;
&lt;p&gt;install Java EE7.0 JDK&lt;br&gt;learn Java EE 7 Tutorial，run and analysis Javae EE7.0 Samples，include&lt;/p&gt;
&lt;ul
    
    </summary>
    
    
      <category term="javaee" scheme="http://yoursite.com/tags/javaee/"/>
    
  </entry>
  
  <entry>
    <title>hadoop分布式文件系统详解</title>
    <link href="http://yoursite.com/2016/12/06/hadoop%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2016/12/06/hadoop分布式文件系统详解/</id>
    <published>2016-12-06T13:11:33.000Z</published>
    <updated>2016-12-10T16:08:09.342Z</updated>
    
    <content type="html"><![CDATA[<p>###1.大数据概念 ###</p>
<blockquote>
<p>麦肯锡说：大数据指的是所涉及的数据集规模已经超过了传统<br>数据库软件的获取、存储、管理和分析的能力。<br>随着技术的不断发展，符合大数据标准的数据集容量也会增长。<br>并且大数据的定义随着不同行业也有变化。</p>
<p> IBM说：可以用3个特征相结合来定义大数据：<strong>数量（Volume），种类(Variety)，速度(Velocity)</strong>，即庞大容量，极快速度和种类丰富的数据。</p>
</blockquote>
<p>大数据的特征：大量化，快速化，多样化，价值化</p>
<p>###2.数据库VS大数据 ###</p>
<ul>
<li>1、数据规模： “池塘”的处理对象通常以MB 为基本单位，而“大<br>  海”则常常以GB，甚至是TB、PB 为基本处理单位。</li>
<li>2、数据类型：过去的“池塘”中，数据的种类单一，往往仅仅有一<br>  种或少数几种，这些数据又以结构化数据为主。而在“大海”中，数<br>  据的种类繁多，数以千计，而这些数据又包含着结构化、半结构化以<br>  及非结构化的数据，并且半结构化和非结构化数据所占份额越来越大<br>  。</li>
<li>3、模式(Schema)和数据的关系：传统的数据库都是先有模式，然后<br>  才会产生数据。这就好比是先选好合适的“池塘”，然后才会向其中<br>  投放适合在该“池塘”环境生长的“鱼”。而大数据时代很多情况下<br>  难以预先确定模式，模式只有在数据出现之后才能确定，且模式随着<br>  数据量的增长处于不断的演变之中。这就好比先有少量的鱼类，随着<br>  时间推移，鱼的种类和数量都在不断的增长。鱼的变化会使大海的成<br>  分和环境处于不断的变化之中。</li>
<li>4、处理对象：在“池塘”中捕鱼，“鱼”仅仅是其捕捞对象。而在<br>  “大海”中，“鱼”除了是捕捞对象之外，还可以通过某些“鱼”的<br>  存在来判断其他种类的“鱼”是否存在。也就是说传统数据库中数据<br>  仅作为处理对象。而在大数据时代，要将数据作为一种资源来辅助解<br>  决其他诸多领域的问题。</li>
<li>5、处理工具：捕捞“池塘”中的“鱼”，一种渔网或少数几种基本<br>  就可以应对，也就是所谓的One Size Fits All。但是在“大海”中，<br>  不可能存在一种渔网能够捕获所有的鱼类，也就是说No Size Fits All</li>
</ul>
<p>###3.Hadoop###</p>
<ul>
<li>一个分布式文件系统和并行执行环境（框架）</li>
<li>让用户便捷地处理海量数据</li>
<li>Apache软件基金会下面的一个开源项目</li>
<li>目前Yahoo!是最主要的贡献者</li>
</ul>
<p>hadoop的特点：</p>
<ul>
<li>扩容能力（Scalable）：能可靠地（reliably）存储和处理千兆字节（PB）数据。</li>
<li>成本低（Economical）：可以通过普通机器组成的服务器群来分发以及处理数据。这些服务器群总计可达数千个节点。</li>
<li>高效率（Efficient）：通过分发数据，hadoop可以在数据所在的节点上并行地（parallel）处理它们，这使得处理非常的快速。</li>
<li>可靠性（Reliable）：hadoop能自动地维护数据的多份复制，并且在任务失败后能自动地重新部署（redeploy）计算任务。</li>
</ul>
<p>hadoop生态系统：<br><img src="http://i.imgur.com/kFpATOP.png" alt=""></p>
<p>###3.Hdfs文件系统架构###</p>
<p>设计目标：</p>
<ul>
<li>为以流式数据访问模式存储超大文件而设计的文件系统<ul>
<li>超大文件<br>指的是几百MB，几百GB，几百TB，甚至几百PB</li>
<li>流式数据访问<br>HDFS建立的思想是：一次写入、多次读取模式是最高效的。</li>
<li>商用硬件<br>HDFS不需要运行在昂贵并且高可靠的硬件上。</li>
</ul>
</li>
</ul>
<p>设计基础与目标：</p>
<ul>
<li>硬件错误是常态，因此需要冗余。</li>
<li>程序采用“数据就近”原则分配节点执行。</li>
</ul>
<p>hdfs体系：<br>hdfs是一个主从结构的体系，一个hdfs集群由以下部分组成。<br>1.namenode： 一个，用来管理文件的名字空间和调节客户端访问文件的主服务器。<br>2.datanode：一个或多个，用来管理存储。提供真是文件数据的存储服务。</p>
<p><img src="http://i.imgur.com/pdHbox9.png" alt=""></p>
<p>1.机架：rack</p>
<p>2.数据块：block 64M<br>hadoop fsck / -files -blocks</p>
<p>3.元数据节点：namenode<br>namenode 决定是否将文件映射到datanode的复制块上，对于最常见的3个复制快，第一个复制快存储在同一个机架上的不同节点上，最后一个复制快存储在不同机器上的某个节点上。</p>
<p>主要功能：</p>
<p>namenode提供名称查询服务。<br>namenode保存metadate信息。具体包括;文件owership和permissions；文件包含哪些块；block保存在哪个datanode上。<br>namenode的metadate信息在启动后会加载到内存。</p>
<p>4.数据节点：datanode</p>
<ul>
<li>保存block，每个快对应一个元数据信息文件，这个文件主要描述这个块属于哪个文件，第几个块等信息。</li>
<li>启动datanode线程的时候会向namenode回报block信息。</li>
<li>通过向namenode发送心跳保持与其连系（3s一次），如果namenode10分钟没有收到datanode的心跳，认为其已经lost，并将其上的block复制到其他的datanode。</li>
</ul>
<p>5.辅助元数据节点：secondarynamenode</p>
<p><img src="http://i.imgur.com/Lrjf9Tm.png" alt=""><br>辅助元数据节点，会周期性的将editslog文件中记录对hdfs的操作合并到一个fsimage中，然后清空editslog。namenode重启就会加载最新的fsimage文件，并重新创建一个editslog文件来记录hdfs。</p>
<p>6.名字空间 namespace</p>
<p>7.数据复制</p>
<p>8.快备份原理</p>
<p><img src="http://i.imgur.com/ortzuIT.png" alt=""></p>
<p>9.机架感知</p>
<p>###4.hadoop rpc机制###</p>
<p>一般的RPC，都要考虑两个问题。对象调用方式和序列化反序列化机制<br>hadoop rpc使用java动态代理和反射实现了对象调用方式，客户端到服务器数据的序列化和反序列化由hadoop框架或用火自己实现，也就是数据组装时定制的。<br><img src="http://i.imgur.com/BWCh7o4.png" alt=""></p>
<p>文件的读和写<br><img src="http://i.imgur.com/EmUaCxm.png" alt=""></p>
<p>客户端联系NameNode,得到所有数据块信息，以及数据块对应的所有数据服务器的位置信息<br>尝试从某个数据块对应的一组数据服务器中选出一个，进行连接<br>数据被一个包一个包发送回客户端，等到整个数据块的数据都被读取完了，就会断开此链接，尝试连接下一个数据块对应的数据服务器，整个流程，依次如此反复，直到所有想读的都读取完了为止。<br>Namenode并不实际参与数据传输</p>
<p><img src="http://i.imgur.com/6M44r2f.png" alt=""></p>
<p>客户端联系namenode，在namenode命名空间中创建一个新文件，此时，namenode会检查文件是否存在和客户端是否有权限创建新文件，检查通过，就会创建一条记录。<br>然后客户端写文件时，会取得合适的3个datanodes形成一个管线DataStreamer将数据包流式的传输到管线中第一个datanode，第一个datanode存储数据包并发送的第二个datanode, 第二个datanode存储数据包并发送的第三个datanode。<br>当收到管道中所有datanodes的确认信息后对应数据包才会从确认队列中删除。<br>如此反复，直到所有的数据包，都写完，最后向namenode报告写入完成。</p>
<p>###4.hadoop ha机制###<br>如果namenode节点坏掉，将会影响整个集群。 hdfs的高可用性（high availability ha）就可以解决这个问题。通过提供选择运行在同一个集群的一个热备份的‘主/备’两个冗余的namenode，允许在机器宕机或系统维护的时候，快速的转移到另一个namenode。</p>
<p><img src="http://i.imgur.com/mdwV6S7.png" alt=""></p>
<p>###5.hdfs federation机制###</p>
<p>简单来说， hdfs federation 就是使得hdfs支持多个名字空间，并且允许在hdfs中同时存在多个namenode</p>
<p>###6.hdfs处理文件的命令###</p>
<p>hadoop fs -mkdir /input<br>hadoop fs -ls /input<br>hadoop fs - put test.txt /input/<br>hadoop fs -text /input/test.txt<br>hadoop fs -get /input/text.txt<br>hadoop fs -rm /input/text.txt</p>
<p>###7.java api 接口###</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###1.大数据概念 ###&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;麦肯锡说：大数据指的是所涉及的数据集规模已经超过了传统&lt;br&gt;数据库软件的获取、存储、管理和分析的能力。&lt;br&gt;随着技术的不断发展，符合大数据标准的数据集容量也会增长。&lt;br&gt;并且大数据的定义随着不同行业
    
    </summary>
    
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>最近点问题</title>
    <link href="http://yoursite.com/2016/11/30/%E6%9C%80%E8%BF%91%E7%82%B9%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/11/30/最近点问题/</id>
    <published>2016-11-30T04:55:50.000Z</published>
    <updated>2016-11-30T05:16:15.782Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>最近点对问题定义：已知上m个点的集合，找出对接近的一对点。</p>
<p>在二维空间里，可用分治法求解最近点对问题。预处理：分别根据点的x轴和y轴坐标进行排序，得到X和Y,很显然此时X和Y中的点就是S中的点。</p>
<p>情况（1）：点数小于等于三时：</p>
<p><img src="http://i.imgur.com/kyHpBOQ.png" alt=""></p>
<p>情况（2）：点数大于三时：</p>
<p>首先划分集合S为SL和SR，使得SL中的每一个点位于SR中每一个点的左边，并且SL和SR中点数相同。分别在SL和SR中解决最近点对问题，得到DL和DR，分别表示SL和SR中的最近点对的距离。令d=min(DL,DR)。如果S中的最近点对(P1,P2)。P1、P2两点一个在SL和一个在SR中，那么P1和P2一定在以L为中心的间隙内，以L-d和L+d为界，如下图所示：</p>
<p> <img src="http://i.imgur.com/qC1h3Tu.png" alt="">             </p>
<p>如果在SL中的点P和在SR中的点Q成为最近点对，那么P和Q的距离必定小于d。因此对间隙中的每一个点，在合并步骤中，只需要检验yp+d和yp-d内的点即可。</p>
<ul>
<li>步骤1：根据点的y值和x值对S中的点排序。</li>
<li>步骤2：找出中线L将S划分为SL和SR</li>
<li>步骤3：将步骤2递归的应用解决SL和SR的最近点对问题，并令d=min(dL,dR)。</li>
<li>步骤4：将L-d~L+d内的点以y值排序，对于每一个点(x1,y1)找出y值在y1-d~y1+d内的所有点，计算距离为d’。如果d’小于d，令d=d’，最后的d值就是答案。</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">package cloestpoint;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.Arrays;</div><div class="line">import java.util.Collections;</div><div class="line">import java.util.Comparator;</div><div class="line"></div><div class="line">public class CloestPair &#123;</div><div class="line">	private static class Point&#123;</div><div class="line">		private double x;</div><div class="line">		private double y;</div><div class="line">		public Point()&#123;&#125;</div><div class="line">		public Point(double x,double y)&#123;this.x=x;this.y=y;&#125;	</div><div class="line">	&#125;</div><div class="line">	private static double distance(Point p1,Point p2)&#123; </div><div class="line">		return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));</div><div class="line">	&#125;</div><div class="line">		</div><div class="line">	public static double minDistance(Point[] p,int l,int r)&#123;</div><div class="line">		if(l==r)&#123;</div><div class="line">			return Double.MAX_VALUE;</div><div class="line">		&#125;</div><div class="line">		if(l+1==r)&#123;</div><div class="line">			return distance(p[l], p[r]);</div><div class="line">		&#125;</div><div class="line">		int center=(r-l)/2;</div><div class="line">		double dis1=minDistance(p, l, center);</div><div class="line">		double dis2=minDistance(p, center+1, r);</div><div class="line">		double dis=Math.min(dis1, dis2);</div><div class="line">		ArrayList&lt;Point&gt; nearPoints = new ArrayList&lt;&gt;(); </div><div class="line">		for(Point point : p)</div><div class="line">			if(Math.abs(p[center].x-point.x)&lt;=dis)</div><div class="line">				nearPoints.add(point);</div><div class="line">		Collections.sort(nearPoints, new Comparator&lt;Point&gt;() &#123;</div><div class="line">			@Override</div><div class="line">			public int compare(Point o1, Point o2) &#123;</div><div class="line">				if(o1.y&lt;o2.y) return -1;</div><div class="line">				if(o1.y&gt;o2.y) return 1;</div><div class="line">				if(o1.x&lt;o2.x) return -1;</div><div class="line">				if(o1.x&gt;o2.x) return 1;</div><div class="line">				return 0;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">		&#125;);</div><div class="line">		ArrayList&lt;Point&gt; nearL = new ArrayList&lt;&gt;(); </div><div class="line">		ArrayList&lt;Point&gt; nearR = new ArrayList&lt;&gt;();</div><div class="line">		</div><div class="line">		for(int i=0;i&lt;nearPoints.size();i++)&#123; </div><div class="line">			if(nearPoints.get(i).x&lt;p[center].x)&#123;</div><div class="line">				nearL.add(nearPoints.get(i));</div><div class="line">			&#125;else&#123;</div><div class="line">				nearR.add(nearPoints.get(i));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		//有问题</div><div class="line">		for(int i=0;i&lt;nearL.size();i++)&#123;</div><div class="line">			for(int j=0;j&lt;nearR.size();j++)&#123;</div><div class="line">				if(Math.abs(nearR.get(j).y-nearL.get(i).y)&lt;dis)&#123;</div><div class="line">					double d=distance(nearL.get(i), nearR.get(j));</div><div class="line">					dis=d&lt;dis?d:dis;</div><div class="line">				&#125;else&#123;</div><div class="line">					break;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		return dis;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		Point p1= new Point(-2, 1);</div><div class="line">		Point p2= new Point(-1, 3);</div><div class="line">		Point p3= new Point(1, 2);</div><div class="line">		Point p4= new Point(3, 3);</div><div class="line">		Point[] ps=&#123;p1,p2,p3,p4&#125;;</div><div class="line">		System.out.println(minDistance(ps, 0,ps.length-1 ));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h3&gt;&lt;p&gt;最近点对问题定义：已知上m个点的集合，找出对接近的一对点。&lt;/p&gt;
&lt;p&gt;在二维空间里，可用分治法求解最近点对问题。预处理：分别根据点的x轴
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法总结5-哈夫曼编码</title>
    <link href="http://yoursite.com/2016/11/24/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/"/>
    <id>http://yoursite.com/2016/11/24/哈夫曼编码/</id>
    <published>2016-11-24T12:13:15.226Z</published>
    <updated>2016-12-10T16:12:15.407Z</updated>
    
    <content type="html"><![CDATA[<h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><p>前几章的例子：dijkstra，prim，kruskal算法等</p>
<p>1.哈夫曼编码</p>
<p><img src="http://i.imgur.com/VnWxmaH.png" alt=""></p>
<p>2.算法描述</p>
<p>算法对由输组成的一个森林进行。一棵树的权等于他的树叶的频率之和。任意选取最小权的两棵树t1和t2，形成以t1和t2为子树的新树，将这样的过程进行c-1次。在算法的开始，存放c棵单节点树-每个字符一颗。在算法结束时得到一棵树，这可树就是最优哈夫曼编码树。</p>
<p><img src="http://i.imgur.com/Mpaf16W.png" alt=""></p>
<p>3.实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hufman;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayDeque;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.PriorityQueue;</div><div class="line"><span class="keyword">import</span> java.util.Queue;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuffmanTree</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Node</span>&lt;<span class="title">T</span>&gt;&gt;</span>&#123;</div><div class="line">		<span class="keyword">private</span> T data; <span class="comment">//节点</span></div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> weight; <span class="comment">//权值</span></div><div class="line">		<span class="keyword">private</span> String code; <span class="comment">//编码</span></div><div class="line">		<span class="keyword">private</span> Node&lt;T&gt; left; <span class="comment">//左儿子</span></div><div class="line">		<span class="keyword">private</span> Node&lt;T&gt; right; <span class="comment">//右儿子</span></div><div class="line">		</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data, <span class="keyword">int</span> weight)</span></span>&#123;</div><div class="line">			<span class="keyword">this</span>.data = data;  </div><div class="line">	        <span class="keyword">this</span>.weight = weight;</div><div class="line">	        <span class="keyword">this</span>.code=<span class="string">"0"</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data,String code, <span class="keyword">int</span> weight,Node&lt;T&gt; left,Node&lt;T&gt; right)</span></span>&#123;</div><div class="line">			<span class="keyword">this</span>.data = data;  </div><div class="line">	        <span class="keyword">this</span>.weight = weight;  </div><div class="line">	        <span class="keyword">this</span>.left=left;</div><div class="line">	        <span class="keyword">this</span>.right=right;</div><div class="line">	        <span class="keyword">this</span>.code=code;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Node&lt;T&gt; o)</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.weight-o.weight;</div><div class="line">		&#125;	</div><div class="line">		<span class="meta">@Override</span>  </div><div class="line">	    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;  </div><div class="line">	        <span class="keyword">return</span> <span class="string">"data:"</span>+<span class="keyword">this</span>.data+<span class="string">" weight:"</span>+<span class="keyword">this</span>.weight+<span class="string">" code:"</span>+code+<span class="string">"\n"</span>;  </div><div class="line">	    &#125; </div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> &lt;T&gt; <span class="function">Node&lt;T&gt; <span class="title">createTree</span><span class="params">(List&lt;Node&lt;T&gt;&gt; nodes)</span></span>&#123;</div><div class="line">		Queue&lt;Node&lt;T&gt;&gt; q= <span class="keyword">new</span> PriorityQueue&lt;&gt;(nodes);</div><div class="line">		<span class="keyword">while</span>(q.size()&gt;<span class="number">1</span>)&#123;</div><div class="line">			Node&lt;T&gt; left=q.poll();</div><div class="line">			Node&lt;T&gt; right=q.poll();</div><div class="line">			Node&lt;T&gt; parent=<span class="keyword">new</span> Node&lt;T&gt;(<span class="keyword">null</span>,<span class="string">"0"</span>, left.weight+right.weight, left, right);</div><div class="line">			q.offer(parent);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> q.element();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> &lt;T&gt; List&lt;Node&lt;T&gt;&gt; breadth(Node&lt;T&gt; root)&#123;</div><div class="line">		List&lt;Node&lt;T&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Node&lt;T&gt;&gt;();  </div><div class="line">        Queue&lt;Node&lt;T&gt;&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;Node&lt;T&gt;&gt;();  </div><div class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;  </div><div class="line">            queue.offer(root);  </div><div class="line">        &#125; </div><div class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;  </div><div class="line">            list.add(queue.peek());  </div><div class="line">            Node&lt;T&gt; node = queue.poll();               </div><div class="line">            <span class="keyword">if</span>(node.left!= <span class="keyword">null</span>)&#123;  </div><div class="line">                queue.offer(node.left);  </div><div class="line">                node.left.code=node.code+<span class="string">"0"</span>;</div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">if</span>(node.right!= <span class="keyword">null</span>)&#123;  </div><div class="line">                queue.offer(node.right);  </div><div class="line">                node.right.code=node.code+<span class="string">"1"</span>;</div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> list;  	</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		HuffmanTree huffmanTree = <span class="keyword">new</span> HuffmanTree();</div><div class="line">		List&lt;Node&lt;String&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Node&lt;String&gt;&gt;();  </div><div class="line">        list.add(<span class="keyword">new</span> Node&lt;String&gt;(<span class="string">"a"</span>,<span class="number">7</span>));  </div><div class="line">        list.add(<span class="keyword">new</span> Node&lt;String&gt;(<span class="string">"b"</span>,<span class="number">5</span>));  </div><div class="line">        list.add(<span class="keyword">new</span> Node&lt;String&gt;(<span class="string">"c"</span>,<span class="number">4</span>));  </div><div class="line">        list.add(<span class="keyword">new</span> Node&lt;String&gt;(<span class="string">"d"</span>,<span class="number">2</span>));</div><div class="line">        Node&lt;String&gt; root = huffmanTree.createTree(list); </div><div class="line">        System.out.println(huffmanTree.breadth(root));  </div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;贪心算法&quot;&gt;&lt;a href=&quot;#贪心算法&quot; class=&quot;headerlink&quot; title=&quot;贪心算法&quot;&gt;&lt;/a&gt;贪心算法&lt;/h3&gt;&lt;p&gt;前几章的例子：dijkstra，prim，kruskal算法等&lt;/p&gt;
&lt;p&gt;1.哈夫曼编码&lt;/p&gt;
&lt;p&gt;&lt;img src
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法总结2-希尔排序</title>
    <link href="http://yoursite.com/2016/11/21/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B9%8B%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2016/11/21/算法总结之希尔排序/</id>
    <published>2016-11-21T05:50:31.000Z</published>
    <updated>2016-12-10T16:14:27.086Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="http://blog.csdn.net/morewindows/article/details/6668714" target="_blank" rel="external">http://blog.csdn.net/morewindows/article/details/6668714</a></p>
<h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>该方法的基本思想是：先将整个待排元素序列分割成若干个子序列（由相隔某个“增量”的元素组成的）分别进行直接插入排序，然后依次缩减增量再进行排序，待整个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序。因为直接插入排序在元素基本有序的情况下（接近最好情况），效率是很高的，因此希尔排序在时间效率上比前两种方法有较大提高</p>
<p><img src="http://i.imgur.com/FPSyyTw.png" alt=""></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//希尔排序</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">shellsort</span><span class="params">(T[] a)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> j;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> gap=a.length/<span class="number">2</span>;gap&gt;<span class="number">0</span>;gap/=<span class="number">2</span>)&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=gap;i&lt;a.length;i++)&#123;</div><div class="line">				T tmp=a[i];</div><div class="line">				<span class="keyword">for</span>(j=i;j&gt;=gap&amp;&amp;tmp.compareTo(a[j-gap])&lt;<span class="number">0</span>;j-=gap)&#123;</div><div class="line">					a[j]=a[j-gap];</div><div class="line">				&#125;</div><div class="line">				a[j]=tmp;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;a href=&quot;http://blog.csdn.net/morewindows/article/details/6668714&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/morewindows/art
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法总结1-插入排序</title>
    <link href="http://yoursite.com/2016/11/21/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B9%8B%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2016/11/21/算法总结之插入排序/</id>
    <published>2016-11-21T05:20:54.000Z</published>
    <updated>2016-12-10T16:14:10.996Z</updated>
    
    <content type="html"><![CDATA[<h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>直接插入排序(Insertion Sort)的基本思想是：每次将一个待排序的记录，按其关键字大小插入到前面已经排好序的子序列中的适当位置，直到全部记录插入完成为止。</p>
<p>设数组为a[0…n-1]。</p>
<ol>
<li><p>初始时，a[0]自成1个有序区，无序区为a[1..n-1]。令i=1</p>
</li>
<li><p>将a[i]并入当前的有序区a[0…i-1]中形成a[0…i]的有序区间。</p>
</li>
<li><p>i++并重复第二步直到i==n-1。排序完成。</p>
</li>
</ol>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//插入排序</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(T[] a)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> j;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.length;i++)&#123;</div><div class="line">			T tmp=a[i];</div><div class="line">			<span class="keyword">for</span>(j=i;j&gt;<span class="number">0</span>&amp;&amp;tmp.compareTo(a[j-<span class="number">1</span>])&lt;<span class="number">0</span>;j--)&#123;</div><div class="line">				a[j]=a[j-<span class="number">1</span>];</div><div class="line">			&#125;</div><div class="line">			a[j]=tmp;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;思想&quot;&gt;&lt;a href=&quot;#思想&quot; class=&quot;headerlink&quot; title=&quot;思想&quot;&gt;&lt;/a&gt;思想&lt;/h3&gt;&lt;p&gt;直接插入排序(Insertion Sort)的基本思想是：每次将一个待排序的记录，按其关键字大小插入到前面已经排好序的子序列中的适当位置，直
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法总结4-快速排序</title>
    <link href="http://yoursite.com/2016/11/21/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2016/11/21/算法总结之快速排序/</id>
    <published>2016-11-21T04:24:37.000Z</published>
    <updated>2016-12-10T16:14:19.077Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="http://blog.csdn.net/morewindows/article/details/6684558" target="_blank" rel="external">http://blog.csdn.net/morewindows/article/details/6684558</a></p>
<h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>快速排序是C.R.A.Hoare于1962年提出的一种划分交换排序。它采用了一种分治的策略，通常称其为分治法(Divide-and-ConquerMethod)。</p>
<p>该方法的基本思想是：</p>
<p>1．先从数列中取出一个数作为基准数。</p>
<p>2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</p>
<p>3．再对左右区间重复第二步，直到各区间只有一个数</p>
<p>虽然快速排序称为分治法，但分治法这三个字显然无法很好的概括快速排序的全部步骤。因此我的对快速排序作了进一步的说明：<strong>挖坑填数+分治法</strong>：</p>
<p><img src="http://i.imgur.com/lXST5qW.png" alt=""></p>
<p><img src="http://i.imgur.com/6GAncK6.png" alt=""></p>
<p>对挖坑填数进行总结</p>
<p>1．i =L; j = R; 将基准数挖出形成第一个坑a[i]。</p>
<p>2．j–由后向前找比它小的数，找到后挖出此数填前一个坑a[i]中。</p>
<p>3．i++由前向后找比它大的数，找到后也挖出此数填到前一个坑a[j]中。</p>
<p>4．再重复执行2，3二步，直到i==j，将基准数填入a[i]中。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> sort;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 快排</div><div class="line"> * <span class="doctag">@author</span> neuly</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] swap(<span class="keyword">int</span>[] s, <span class="keyword">int</span> l,<span class="keyword">int</span> r)&#123;</div><div class="line">		<span class="comment">//将中间的数和第一个数进行交换</span></div><div class="line">		<span class="keyword">int</span> tmp=s[l];</div><div class="line">		s[l]=s[(r-l)/<span class="number">2</span>];</div><div class="line">		s[(r-l)/<span class="number">2</span>]=tmp;</div><div class="line">		<span class="keyword">return</span> s;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] s, <span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(l&lt;r)&#123;	</div><div class="line">			<span class="keyword">int</span> i=l,j=r,x=s[l];</div><div class="line">			<span class="keyword">while</span>(i&lt;j)&#123;</div><div class="line">				<span class="keyword">while</span>(i&lt;j&amp;&amp;s[j]&gt;=x) j--;</div><div class="line">				<span class="keyword">if</span>(i&lt;j) s[i++]=s[j];</div><div class="line">				</div><div class="line">				<span class="keyword">while</span>(i&lt;j&amp;&amp;s[i]&lt;=x) i++;</div><div class="line">				<span class="keyword">if</span>(i&lt;j) s[j--]=s[i];</div><div class="line">			&#125;</div><div class="line">			s[i]=x;</div><div class="line">			quickSort(s, l, i-<span class="number">1</span>);</div><div class="line">			quickSort(s, i+<span class="number">1</span>, r);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;a href=&quot;http://blog.csdn.net/morewindows/article/details/6684558&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/morewindows/art
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>datastructs</title>
    <link href="http://yoursite.com/2016/11/20/datastructs/"/>
    <id>http://yoursite.com/2016/11/20/datastructs/</id>
    <published>2016-11-20T05:10:58.000Z</published>
    <updated>2016-12-10T16:07:40.716Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>1.数组实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> datastructure;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArrayList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> default_capacity=<span class="number">16</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> size;</div><div class="line">	<span class="keyword">private</span> T[] items;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyArrayList</span><span class="params">()</span> </span>&#123;</div><div class="line">		clear();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</div><div class="line">		size=<span class="number">0</span>;</div><div class="line">		ensureCapacity(default_capacity);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> size;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> size()==<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span></span>&#123;</div><div class="line">		ensureCapacity(size());</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> idx)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(idx&lt;<span class="number">0</span>||idx&gt;=size())&#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> items[idx];</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">set</span><span class="params">(<span class="keyword">int</span> idx,T newVal)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(idx&lt;<span class="number">0</span>||idx&gt;=size())&#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException();</div><div class="line">		&#125;</div><div class="line">		T old =items[idx];</div><div class="line">		items[idx]=newVal;</div><div class="line">		<span class="keyword">return</span> old;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T x)</span></span>&#123;</div><div class="line">		add(size(),x);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> idx,T x)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(items.length==size())&#123;</div><div class="line">			ensureCapacity(size()*<span class="number">2</span>+<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=size;i&gt;idx;i--)&#123;</div><div class="line">			items[i]=items[i-<span class="number">1</span>];</div><div class="line">		&#125;</div><div class="line">		items[idx]=x;</div><div class="line">		size++;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span> <span class="params">(<span class="keyword">int</span> idx)</span></span>&#123;</div><div class="line">		T removedItem=items[idx];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=idx;i&lt;size()-<span class="number">1</span>;i++)&#123;</div><div class="line">			items[i]=items[i+<span class="number">1</span>];</div><div class="line">		&#125;</div><div class="line">		size--;</div><div class="line">		<span class="keyword">return</span> removedItem;		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> newCapacity)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(newCapacity&lt;size) <span class="keyword">return</span>;</div><div class="line">		T[] old=items;</div><div class="line">		items= (T[]) <span class="keyword">new</span> Object[newCapacity];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size();i++)&#123;</div><div class="line">			items[i]=old[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ArrayListIterator();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> current=<span class="number">0</span>;</div><div class="line">		</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> current&lt;size();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span>(!hasNext())</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">			<span class="keyword">return</span> items[current++];</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>&#123;</div><div class="line">			MyArrayList.<span class="keyword">this</span>.remove(--current);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.node实现linkedlist</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> datastructure;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ConcurrentModificationException;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</div><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> size;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> modCount=<span class="number">0</span>;</div><div class="line">	<span class="keyword">private</span> Node&lt;T&gt; beginMarker;</div><div class="line">	<span class="keyword">private</span> Node&lt;T&gt; endMarker;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line">		<span class="keyword">public</span> T data;</div><div class="line">		<span class="keyword">public</span> Node&lt;T&gt; prev;</div><div class="line">		<span class="keyword">public</span> Node&lt;T&gt; next;		</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T d,Node&lt;T&gt; p, Node&lt;T&gt; n)</span></span>&#123;</div><div class="line">			data=d;</div><div class="line">			prev=p;</div><div class="line">			next=n;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span>  <span class="title">MyLinkedList</span><span class="params">()</span> </span>&#123;</div><div class="line">		clear();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</div><div class="line">		beginMarker= <span class="keyword">new</span> Node&lt;T&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">		endMarker= <span class="keyword">new</span> Node&lt;T&gt;(<span class="keyword">null</span>, beginMarker, <span class="keyword">null</span>);</div><div class="line">		beginMarker.next=endMarker;</div><div class="line">		size=<span class="number">0</span>;</div><div class="line">		modCount++;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> size;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> size()==<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T x)</span></span>&#123;</div><div class="line">		add(size(),x);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> idx,T x)</span></span>&#123;</div><div class="line">		addBefore(getNode(idx),x);		</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> idx)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> getNode(idx).data;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">set</span><span class="params">(<span class="keyword">int</span> idx,T newVal)</span></span>&#123;</div><div class="line">		Node&lt;T&gt; p =getNode(idx);</div><div class="line">		T oldVal=p.data;</div><div class="line">		p.data=newVal;</div><div class="line">		<span class="keyword">return</span> oldVal;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> idx)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> remove(getNode(idx));</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T x)</span></span>&#123;</div><div class="line">		Node&lt;T&gt; p =beginMarker.next;</div><div class="line">		<span class="keyword">while</span>(p!=endMarker&amp;&amp;!(p.data.equals(x)))&#123;</div><div class="line">			p=p.next;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> p!=endMarker;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addBefore</span><span class="params">(Node&lt;T&gt; p, T x)</span></span>&#123;</div><div class="line">		Node&lt;T&gt; newNode= <span class="keyword">new</span> Node&lt;T&gt;(x, p.prev, p);</div><div class="line">		newNode.prev.next=newNode;		</div><div class="line">		p.prev=newNode;</div><div class="line">		size++;</div><div class="line">		modCount++;			</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> T <span class="title">remove</span><span class="params">(Node&lt;T&gt; p)</span></span>&#123;</div><div class="line">		p.prev.next=p.next;</div><div class="line">		p.next.prev=p.prev;</div><div class="line">		size--;</div><div class="line">		modCount++;</div><div class="line">		<span class="keyword">return</span> p.data;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> Node&lt;T&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> idx)</span></span>&#123;</div><div class="line">		Node&lt;T&gt; p;</div><div class="line">		<span class="keyword">if</span>(idx&lt;<span class="number">0</span>||idx&gt;size()) <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</div><div class="line">		<span class="keyword">if</span>(idx&lt;size()/<span class="number">2</span>)&#123;</div><div class="line">			p=beginMarker.next;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;idx;i++) p=p.next;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			p=endMarker;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=size();i&gt;idx;i--) p=p.prev;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> p;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> linkedListIterator();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">linkedListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> Node&lt;T&gt; current =beginMarker.next;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> exceptedModCount=modCount;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">boolean</span> okToRemove=<span class="keyword">false</span>;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;			</div><div class="line">			<span class="keyword">return</span> current!=endMarker;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span>(modCount!=exceptedModCount) <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">			<span class="keyword">if</span>(!hasNext()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">			T nextItem =current.data;</div><div class="line">			current=current.next;</div><div class="line">			okToRemove=<span class="keyword">true</span>;</div><div class="line">			<span class="keyword">return</span> nextItem;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">if</span>(modCount!=exceptedModCount) <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">			<span class="keyword">if</span>(!okToRemove) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">			MyLinkedList.<span class="keyword">this</span>.remove(current.prev);</div><div class="line">			okToRemove=<span class="keyword">false</span>;</div><div class="line">			exceptedModCount++;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h3 id="散列"><a href="#散列" class="headerlink" title="散列"></a>散列</h3><h3 id="优先队列（堆）"><a href="#优先队列（堆）" class="headerlink" title="优先队列（堆）"></a>优先队列（堆）</h3><p>堆是一棵完全被填满的二叉树。<br>一棵高位h的完全二叉树有2^k到2^（k+1）-1个节点。</p>
<p>完全二叉树可以用一个数组表示。</p>
<p>对于数组中i位置上的元素，做儿子在2i，右儿子在2i+1，父亲在[i/2]</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h3&gt;&lt;p&gt;1.数组实现&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
    
    </summary>
    
      <category term="datastructure" scheme="http://yoursite.com/categories/datastructure/"/>
    
    
      <category term="datastructure" scheme="http://yoursite.com/tags/datastructure/"/>
    
  </entry>
  
  <entry>
    <title>深入理解jvm十-早期（编译期）优化</title>
    <link href="http://yoursite.com/2016/11/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3jvm%E5%8D%81-%E6%97%A9%E6%9C%9F%EF%BC%88%E7%BC%96%E8%AF%91%E6%9C%9F%EF%BC%89%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2016/11/16/深入理解jvm十-早期（编译期）优化/</id>
    <published>2016-11-16T05:37:45.000Z</published>
    <updated>2016-12-10T16:13:51.791Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-编译期"><a href="#1-编译期" class="headerlink" title="1.编译期"></a>1.编译期</h3><ul>
<li>前端编译器：把<em>java转换成</em>.class文件的过程。 <ul>
<li>sun的javac eclipsejdt中的ecj</li>
</ul>
</li>
<li>后端运行时编译器（JIT just in time）：字节码转换为机器码的过程<ul>
<li>hotspot vm 中的 c1 c2编译器</li>
</ul>
</li>
<li>静态提前编译器（AOT ahead of time）：把.java编译成本地机器码的过程。<ul>
<li>gun compiler for java</li>
</ul>
</li>
</ul>
<p>ps：java中编译期在运行期的优化过程对于程序运行来说更重要，二前端编译期在编译期的优化过程对于<strong>程序编码</strong>来说更重要。</p>
<h3 id="2-javac编译器"><a href="#2-javac编译器" class="headerlink" title="2.javac编译器"></a>2.javac编译器</h3><p>从 Sun Javac 的代码来看，编译过程大致可以分为 3 个过程，分别是：</p>
<ul>
<li>解析与填充符号表过程。</li>
<li>插入式注解处理器的注解处理过程。</li>
<li>分析与字节码生成过程。</li>
</ul>
<p>详细内容参考blog<a href="http://blog.csdn.net/u013678930/article/details/52032328" target="_blank" rel="external">http://blog.csdn.net/u013678930/article/details/52032328</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-编译期&quot;&gt;&lt;a href=&quot;#1-编译期&quot; class=&quot;headerlink&quot; title=&quot;1.编译期&quot;&gt;&lt;/a&gt;1.编译期&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;前端编译器：把&lt;em&gt;java转换成&lt;/em&gt;.class文件的过程。 &lt;ul&gt;
&lt;li&gt;sun的jav
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>面向对象设计与分析复习note</title>
    <link href="http://yoursite.com/2016/11/12/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E5%A4%8D%E4%B9%A0note/"/>
    <id>http://yoursite.com/2016/11/12/面向对象设计与分析复习note/</id>
    <published>2016-11-12T10:28:24.000Z</published>
    <updated>2016-12-10T16:12:37.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念1"><a href="#概念1" class="headerlink" title="概念1"></a>概念1</h3><p>面向对象分析：<br>在<strong>问题域内</strong>发现和描述<strong>对象</strong>。</p>
<p>面向对象设计：<br>强调的是定义<strong>软件对象</strong>以他们是如何<strong>协作</strong>以实现<strong>需求</strong>。</p>
<p>面向对象的优点:</p>
<ul>
<li>复用<br>通过继承、关联、封装等手段</li>
<li>应变<br>弹性应对需求变化</li>
<li>沟通<br>开发人员、用户、管理人员</li>
<li>市场<br>应付市场的变化</li>
<li>士气<br>员工的士气</li>
</ul>
<p>系统顺序图(SSD):</p>
<ul>
<li>系统顺序图(SSD)是阐述与<strong>所讨论系统</strong>相关的输入和输出事件而快速、简单创建的制品（顺序图）。 </li>
<li>对于用例的一个特定场景，SSD展示了直接与系统交互的<strong>外部参与者</strong>对<strong>系统</strong>（作为黑盒）发起的<strong>系统事件</strong>以及其（系统事件）<strong>顺序</strong>。</li>
<li>系统被视为<strong>黑盒</strong>，该图强调的是从参与者到系统的跨越系统边界的事件。</li>
<li>系统顺序图是操作契约（第11章）和（最重要的）对象设计的输入。</li>
</ul>
<h3 id="2-基于用例图、类图、顺序图的分析与设计"><a href="#2-基于用例图、类图、顺序图的分析与设计" class="headerlink" title="2.基于用例图、类图、顺序图的分析与设计"></a>2.基于用例图、类图、顺序图的分析与设计</h3><p><strong>用例图：</strong></p>
<p>actor（有行为的something)<br>:在系统之外，通过系统边界与系统进行有意义交互的任何事物<br>:actor is something with behavior, such as a person (identified by role), computer system, or organization; for example, a cashier.</p>
<p>scenario: 一个场景是一种特定序列的在参与者和系统之间的动作。也被乘坐use case instance<br>:A scenario is a specific sequence of actions and interactions between actors and the system; it is also called a use case instance. </p>
<p>use case: 用例是一组成功或失败的场景，用以描述使用系统来达到某个<br>目的的参与者。<br>A use case is a collection of related success and failure scenarios that describe an actor using a system to support a goal</p>
<p>三种关系：</p>
<ul>
<li>包含：提取公共交互，提高复用</li>
<li>扩展：“冻结”基础用例以保持稳定</li>
<li>泛化：同一业务目的的不同技术实现</li>
</ul>
<p>ps：使用包含关系来处理用例之间的关系是首要原则</p>
<p><strong>顺序图：</strong></p>
<p>显示一组对象为了实现某种功能，而彼此发送和接收的一串消息，这组对象可能是类、接口、构件、节点和系统的具体的或原型化的实例。<br>强调消息时间顺序</p>
<p>note:<br>刺形箭头消息表示异步调用，实心箭头消息表示同步调用</p>
<ul>
<li>消息的传入：类对象所具有的操作－－责任（行为）</li>
<li>消息的传出：类对象完成操作所需合作者－－协作</li>
</ul>
<p>bce模式</p>
<p><strong>类图：</strong></p>
<ul>
<li>分析类——域模型<ul>
<li>关键抽象，CRC较验</li>
<li>类图，关键确定类之间关系</li>
</ul>
</li>
<li>设计类——<ul>
<li>设计类是系统实施中一个或多个对象的抽象；设计类所对应的对象取决于采用的系统框架、设计模式、实现语言。 </li>
</ul>
</li>
</ul>
<p>分析类图-域模型<br><img src="http://i.imgur.com/XlKHtHM.png" alt=""></p>
<p>类之间的关系</p>
<p><img src="http://i.imgur.com/vZ0NiPF.png" alt=""></p>
<p>依赖关系表示的是类之间的调用关系，即用一个类去调用另外一个类，被调用的类表现为调用类的局部变量、方法的参数，调用类调用被调用类的静态方法。–&gt;</p>
<p><strong>依赖vs关联</strong></p>
<ul>
<li>从类之间关系的时间角度来分，关联表示类之间的“持久、静态”关系，一般需要“持久化”的，或者说需要保存到数据库中的，是一种重要的业务之间的关系。另外，依赖表示类之间的是一种“短暂、动态”关系，这种关系是不需要保存的。</li>
<li>从类之间关系的强弱程度来分，关联表示类之间的很强的关系；依赖表示类之间的较弱的关系。</li>
<li>设计类之间的关系遵循的原则：首先判断是否是一种“关联”关系，若不是再判断是否是“依赖关系”，一般情况下若不是关联，就是依赖关系</li>
<li>依赖关系（Dependency relationship ）：是类与类之间的连接，依赖总是单向的。</li>
<li>关联关系（Association relationship）：是一种结构关系，是指一个类的对象与另一个类的对象之间的关系（具有多重性）。关联可以有方向，即导航。一般不作说明的时候，导航是双向的，不需要在线上标出箭头。关联在代码中一般表示为属性（成员变量）</li>
</ul>
<h3 id="3-鲁棒性分析"><a href="#3-鲁棒性分析" class="headerlink" title="3.鲁棒性分析"></a>3.鲁棒性分析</h3><p>定义：</p>
<ul>
<li>一种方法<ul>
<li>通过分析用例规约中的事件流，识别出实现用例规定的功能所需的主要对象及其职责，形成以职责模型为主的初步设计。——由Ivar Jacobson提出。</li>
</ul>
</li>
<li>一个过程<ul>
<li>它引导我们从用例转换为支持用例的模型。</li>
</ul>
</li>
</ul>
<p>鲁棒图：<br>包含三种元素：边界对象，控制对象，实体对象。</p>
<p>建模原则：</p>
<blockquote>
<p>(1) 参与者只能与边界对象交谈<br>(2) 边界对象只能与控制体和参与者交流<br>(3) 实体对象也只能与控制体交谈<br>(4) 控制体既能与边界对象交谈，也能与控制体交谈，但不能与参与者交谈</p>
</blockquote>
<h3 id="4-面向对象设计原则"><a href="#4-面向对象设计原则" class="headerlink" title="4.面向对象设计原则"></a>4.面向对象设计原则</h3><p>好的设计：</p>
<ul>
<li>容易理解</li>
<li>容易修改和扩展</li>
<li>容易复用</li>
<li>容易实现与应用</li>
<li>简单、紧凑、经济适用</li>
</ul>
<p>坏的设计：</p>
<ul>
<li>僵化性（Rigidity）：刚性，难以修改，牵一发而动全身</li>
<li>脆弱性（Fragility）：易碎，牵一发而肝胆俱裂</li>
<li>牢固性（Immobility）：无法分解成可移植的组件</li>
<li>粘滞性（Viscosity），修改设计代价高昂</li>
<li>不必要的复杂性（Needless Complexity）,预测需求，处理潜在变化代码</li>
<li>不必要的重复（ Needless Repetition ）</li>
<li>晦涩性（Opacity）：不透明，很难看清设计者的真实意图</li>
</ul>
<p>原则：</p>
<ul>
<li>LSP：Liskov替换原则<br>The Liskov Substitution Principle</li>
<li>OCP：开放-封闭原则<br>The Open-Close Principle</li>
<li>SRP：单一职责原则<br>The Single Responsibility Principle</li>
<li>ISP：接口隔离原则<br>The Interface Segregation Principle </li>
<li>DIP：依赖倒置原则<br>The Dependency Inversion Principle</li>
</ul>
<h3 id="5-GRASP：通用职责分配软件模式"><a href="#5-GRASP：通用职责分配软件模式" class="headerlink" title="5.GRASP：通用职责分配软件模式"></a>5.GRASP：通用职责分配软件模式</h3><p>General Responsibility Assignment Software Pattern:     GRASP 作为设计模式来描述对象设计和职责分配的基本原则。</p>
<p>GRASP模式：</p>
<ul>
<li>创建者(Creator)</li>
<li>信息专家(Information Expert)</li>
<li>低耦合(Low Coupling)</li>
<li>控制器(Controller)</li>
<li>高内聚(High Cohesion)</li>
<li>多态（Polymorphism）</li>
<li>纯虚构（Pure Fabrication）</li>
<li>间接性（Indirection）</li>
<li>防止变异（Protected Variations）</li>
</ul>
<p>信息专家：将职责分配给具有完成该职责所需信息的那个类</p>
<p>低耦合：分配职责，使耦合尽可能低。利用这一原则来评估可选方案。</p>
<p>高内聚度：不要给一个类分派太多的职责，在履行职责时尽量将部分职责分派给有能力完成的其它类去完成。不相关的职责不要分派给同一个类。</p>
<p>控制器：正常情况下，控制器应当把需要完成的工作委派给其它对象。控制器只是协调或控制这些活动，本身并不完成大量工作。</p>
<p>多态：当相关的或行为随类型（类）有所不同时，使用“多态操作”为变化的行为类型分配职责 。</p>
<p>纯虚构：分配这组高度内聚的职责给一个人造类。人造类不代表问题领域的任何事物，只是为了支持高内聚、低耦合和可重用而虚构的一个类。</p>
<p>适配器与某些grasp核心原则的关系<br><img src="http://i.imgur.com/EYjjYlR.png" alt=""></p>
<h3 id="6-设计模式"><a href="#6-设计模式" class="headerlink" title="6.设计模式"></a>6.设计模式</h3><p>creational </p>
<p>behavioral</p>
<p>structural</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念1&quot;&gt;&lt;a href=&quot;#概念1&quot; class=&quot;headerlink&quot; title=&quot;概念1&quot;&gt;&lt;/a&gt;概念1&lt;/h3&gt;&lt;p&gt;面向对象分析：&lt;br&gt;在&lt;strong&gt;问题域内&lt;/strong&gt;发现和描述&lt;strong&gt;对象&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>effective-java-1</title>
    <link href="http://yoursite.com/2016/11/10/effective-java-1/"/>
    <id>http://yoursite.com/2016/11/10/effective-java-1/</id>
    <published>2016-11-10T01:51:23.000Z</published>
    <updated>2016-12-10T16:08:00.367Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第0-0条：java-unit"><a href="#第0-0条：java-unit" class="headerlink" title="第0.0条：java unit"></a>第0.0条：java unit</h3><p>javac hello.java<br>java hello</p>
<p>A unit test tests the methods in<br>a single class</p>
<p> A test case tests (insofar as<br>possible) a single method</p>
<p> You can have multiple test<br>cases for a single method</p>
<p> A test suite combines unit tests</p>
<p> The test fixture provides<br>software support for all this</p>
<p> The test runner runs unit tests<br>or an entire test suite</p>
<p> Integration testing (testing that<br>it all works together) is not well<br>supported by JUnit</p>
<p>static void assertFalse(boolean test)<br>static void assertFalse(String message, boolean test)</p>
<p>assertEquals(expected, actual)<br>assertEquals(String message, expected, actual)</p>
<p>assertSame(Object expected, Object actual)<br>assertSame(String message, Object expected, Object actual)</p>
<p>assertNotSame(Object expected, Object actual)<br>assertNotSame(String message, Object expected, Object actual)</p>
<p>assertNull(Object object)<br>assertNull(String message, Object object)</p>
<p>fail()<br>fail(String message)</p>
<p>@BeforeClass</p>
<p>@AfterClass</p>
<p>@Test (timeout=10)</p>
<p>@Test (expected=IllegalArgumentException.class)</p>
<p>创建一个 TestSuite.java，打包运行多个 JUnit 测试类</p>
<pre><code>@RunWith(Suite.class)
@SuiteClasses({XXTest.class, XXTest.class})
public class TestSuite{
}
</code></pre><p>junit实验手册：</p>
<p>1.测试驱动开发。<br>2.hamcrest(hamcrest可以用来增强junit中assert功能)<br>3.cobertura 单元测试覆盖率<br>mvn compile/test/cobertura:cobertura</p>
<h3 id="第0-1条：maven"><a href="#第0-1条：maven" class="headerlink" title="第0.1条：maven"></a>第0.1条：maven</h3><p>maven compile</p>
<p>maven test</p>
<p>mvn clean</p>
<p>mvn package</p>
<p>mvn install</p>
<h3 id="第0-2条：svn"><a href="#第0-2条：svn" class="headerlink" title="第0.2条：svn"></a>第0.2条：svn</h3><p>repository:<br>project code is stored in a server in a data store referred to as a “repository”;</p>
<p>check out:<br>Developers “check out” copies of the project code into<br>their local environments. These copies are referred to<br>as “working copies.”</p>
<p>commits:<br>After making changes to a working copy, the<br>developer “commits” changes to the repository.</p>
<p>updating:<br>Other developers get these changes by “updating”<br>their working copies.</p>
<h3 id="第0-3条：git"><a href="#第0-3条：git" class="headerlink" title="第0.3条：git"></a>第0.3条：git</h3><ul>
<li>git config –global user.name “ss”</li>
<li>git config –global user.mail “ss@mail.com”</li>
<li>git clone</li>
<li>git init  //创建版本库</li>
<li>git add file.java //文件添加到版本库</li>
<li>git commit -m “initial project version” //提交到本地</li>
<li>git status (-s) //查看仓库当前状态</li>
<li>git diff a.txt //比较文件修改变化</li>
<li>git help</li>
<li>git pull</li>
<li>git push</li>
<li>git log //查看历史修改记录</li>
<li>git log –oneline</li>
<li>git log -5</li>
<li>git pull origin master</li>
<li>git push origin master</li>
<li>git branch experimental//创建分支</li>
<li>git branch //查看当前分支</li>
<li>git checkout -b experimental //创建并切换分支，-b标识创建并且换</li>
<li>git checkout master //切换到某个分支</li>
<li>git merge experimental //合并分支到master</li>
<li>git branch -d dev //删除分支</li>
<li>git log –graph</li>
<li>git reset –hard HEAD^ //回退到上一个版本</li>
<li>git reset –hard HEAD^^ //回退到上两个版本</li>
<li>git reset –hard 3628164 //回退到指定版本</li>
<li>git rm a.txt //删除</li>
<li>git tag v1.0</li>
<li>git tag</li>
<li>git tag v0.9 6224937</li>
<li>git show v0.9</li>
</ul>
<p>svn：<br>中央存储库方法，主仓库是真正的source，只有主仓库有完成的文件历史。<br>用户检出当前版本的本地副本。</p>
<p>git：<br>分布式存储库方法：每次检出的存储库都是一个完成的存储库，有完整的历史。更多的荣誉和速度，分支和合并库更频繁使用。</p>
<p>主要区别：<br>1.git是分布式的，svn不是。<br>2.git把内容按照元数据方式存储，svn是按照文件。<br>3.git没有全局版本号，svn有<br>4.git的内容完整性优于svn，git的内容存储用的是sha-1哈希算法，这能确保代码内容的完整性。<br>5.git离线可以看所有的log，svn不可以。</p>
<h3 id="第0-4条：logging-vs-debugging"><a href="#第0-4条：logging-vs-debugging" class="headerlink" title="第0.4条：logging vs debugging"></a>第0.4条：logging vs debugging</h3><p>Logging is faster than using a debugger<br>• Logging can be used to diagnose problems<br>in the production stage as well as during<br>development<br>• Logging is easier than debugging in a<br>distributed computing environment<br>• To use logging as debugging tool we need<br>to record lots of events</p>
<p>log4j:reliability, speed and flexibility.</p>
<p>优先级：DEBUG, INFO, WARN, ERROR, FATAL</p>
<pre><code>import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import org.apache.log4j.FileAppender;
public class simpandfile {
   static Logger logger = Logger.getLogger(simpandfile.class);
   public static void main(String args[]) {
      SimpleLayout layout = new SimpleLayout();

      FileAppender appender = null;
      try {
         appender = new FileAppender(layout,&quot;output1.txt&quot;,false);
      } catch(Exception e) {}

      logger.addAppender(appender);
      logger.setLevel((Level) Level.DEBUG);

      logger.debug(&quot;Here is some DEBUG&quot;);
      logger.info(&quot;Here is some INFO&quot;);
      logger.warn(&quot;Here is some WARN&quot;);
      logger.error(&quot;Here is some ERROR&quot;);
      logger.fatal(&quot;Here is some FATAL&quot;);
   }
}
</code></pre><h3 id="第0-5条：wildcards"><a href="#第0-5条：wildcards" class="headerlink" title="第0.5条：wildcards"></a>第0.5条：wildcards</h3><pre><code>public &lt;T extends Animal&gt; void takeThing(ArrayList&lt;T&gt; list)

public void takeThing(ArrayList&lt;? extends Animal&gt; list)
</code></pre><hr>
<h3 id="第9条：覆盖equals总要覆盖hashcode"><a href="#第9条：覆盖equals总要覆盖hashcode" class="headerlink" title="第9条：覆盖equals总要覆盖hashcode"></a>第9条：覆盖equals总要覆盖hashcode</h3><p>object规范：</p>
<ul>
<li><p>在应用程序执行期间，只要对象的equals方法的比较操作所用到的 信息没有被修改，那么对于着同一个对象调用多次，hashcode必须始终如意的返回同一个证书。在同一个应用程序的多次执行过程中，每次执行所返回的整数可以不一致。</p>
</li>
<li><p>如果两个对象根据equals（object）方法比较是相等的，那么调用这两个对象任意一个对象的hashcode都必须能产生相同的整数结果。</p>
</li>
<li><p>度过两个对象根据equals（object）比较不相等，那么hashcode不一定不相等。</p>
</li>
</ul>
<h3 id="第10条：始终要覆盖tostring"><a href="#第10条：始终要覆盖tostring" class="headerlink" title="第10条：始终要覆盖tostring"></a>第10条：始终要覆盖tostring</h3><p>默认实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> getClass().getName()+<span class="string">'@'</span>+Integer.toHexString(hashCode))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="第11条：谨慎的覆盖clone"><a href="#第11条：谨慎的覆盖clone" class="headerlink" title="第11条：谨慎的覆盖clone"></a>第11条：谨慎的覆盖clone</h3><p>约定（弱的）</p>
<ul>
<li>Create a copy such that x.clone() != x</li>
<li>x.clone().getClass() == x.getClass()</li>
<li>Should have x.clone().equals(x)</li>
<li>No constructors are called</li>
</ul>
<p>拷贝构造器</p>
<p>拷贝工厂</p>
<h3 id="第12条：考虑实现Comparable接口"><a href="#第12条：考虑实现Comparable接口" class="headerlink" title="第12条：考虑实现Comparable接口"></a>第12条：考虑实现Comparable接口</h3><p>约定：</p>
<ul>
<li>1) Returns negative, zero, or positive depending on order<br>of this and specified object</li>
<li>2) sgn(x.compareTo(y) == -sgn(y.compareTo(x))</li>
<li>3) compareTo() must be transitive（可传递的）</li>
<li>4) If x.compareTo(y) == 0, x and y must consistently<br>compare to all values z.<br>(ps:x.compareTo(y)==0暗示着所有z都满足sgn(x,compareTo(z))=sgn(y.compareTo(z)))</li>
<li>5) Recommended that x.compareTo(y) == 0 iff<br>x.equals(y)</li>
<li>6) Note that compareTo() can throw<br>ClassCastExceptions</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//This is horrible!</span></div><div class="line">Object x = <span class="keyword">new</span> BigDecimal(“<span class="number">1.0</span>”);</div><div class="line">Object y = <span class="keyword">new</span> BigDecimal(“<span class="number">1.00</span>”);</div><div class="line"><span class="comment">// !x.equals(y), but x.compareTo(y) == 0</span></div><div class="line">Set s = <span class="keyword">new</span> HashSet();</div><div class="line">Set t = <span class="keyword">new</span> TreeSet();</div><div class="line">s.add(x); s.add(y);</div><div class="line"><span class="comment">// HashSet uses equals, so s has 2 elements</span></div><div class="line">t.add(x); t.add(y);</div><div class="line"><span class="comment">// TreeSet uses compareTo, so t has 1 element</span></div></pre></td></tr></table></figure>
<h3 id="第13条：使类和成员的可访问性最小化"><a href="#第13条：使类和成员的可访问性最小化" class="headerlink" title="第13条：使类和成员的可访问性最小化"></a>第13条：使类和成员的可访问性最小化</h3><p>Standard list of accessibility levels</p>
<ul>
<li> private</li>
<li> package-private (aka package friendly)</li>
<li> protected</li>
<li> public</li>
</ul>
<p>Huge difference between 2nd and 3rd</p>
<ul>
<li> package-private: part of implementation</li>
<li> protected: part of public AP</li>
</ul>
<h3 id="第14条：在共有类中使用访问方法而非公有域"><a href="#第14条：在共有类中使用访问方法而非公有域" class="headerlink" title="第14条：在共有类中使用访问方法而非公有域"></a>第14条：在共有类中使用访问方法而非公有域</h3><p>1.公有类永远不应该暴露可变的域</p>
<p>2.让公有类暴露不可变的域危害较小</p>
<blockquote>
<p>  危害：</p>
<pre><code>Wrong – Potential Security Hole:
public static final Type[] VALUES = {…};
 Problem:
 VALUES is final; entries in VALUES are not!
</code></pre><p>  解决方案：</p>
<pre><code>private static final Type[] PRIVATE_VALUES = {…};
public static final List VALUES =
Collections.unmodifiableList(Arrays.asList
(PRIVATE_VALUES));
 Also Correct:
private static final Type[] PRIVATE_VALUES = {…};
public static final Type[] values() {
return (Type[]) PRIVATE_VALUES.clone();
}
</code></pre></blockquote>
<h3 id="第15条：使可变性最小化"><a href="#第15条：使可变性最小化" class="headerlink" title="第15条：使可变性最小化"></a>第15条：使可变性最小化</h3><p>不可变类：一个对象被考虑是不可变的，如果他的状态不能改变在他被创建以后。</p>
<blockquote>
<p>An object is considered immutable if its state<br>cannot change after it is constructed.</p>
<p> e.g String, Integer, BigInteger, BigDecimal</p>
</blockquote>
<p>使一个类成为不可变类的原因：</p>
<ol>
<li>Thread safe inherently</li>
<li>Can be shared freely</li>
<li>No need to make defensive copy</li>
<li>Its internals can also be shared</li>
<li><p>Great building blocks for other object</p>
<p>  Great to be map keys and set elements</p>
</li>
</ol>
<p>定义不可变类的策略</p>
<ul>
<li>1) Don’t provide any mutators（增变因子） (“setter” methods)</li>
<li>2) Make all fields final and private</li>
<li>3) Don’t allow subclasses to override methods.</li>
<li>4) If the instance fields include references to<br>mutable objects, don’t allow those objects to<br>be changed:<ul>
<li> Don’t provide methods that modify the mutable<br>objects.</li>
<li> Don’t share references to the mutable objects. </li>
</ul>
</li>
</ul>
<p>性能问题：</p>
<p>Example in Java Library:</p>
<ul>
<li> String (Immutable)</li>
<li> StringBuilder (Companion Mutable Class)</li>
<li> StringBuffer (Deprecated Companion Mutable Class)</li>
</ul>
<h3 id="第16条：复合优先于集成"><a href="#第16条：复合优先于集成" class="headerlink" title="第16条：复合优先于集成"></a>第16条：复合优先于集成</h3><p>hashset内部中addall方法是基于他的add方法实现的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstrumentedSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;E&gt; s;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> addCount = <span class="number">0</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">InstrumentedSet</span> <span class="params">(Set&lt;E&gt; s)</span> </span>&#123; <span class="keyword">this</span>.s = s&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E o)</span> </span>&#123;</div><div class="line">		addCount++; <span class="keyword">return</span> s.add(o); &#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span> <span class="params">(Collection&lt;? extends E&gt; c)</span></span>&#123;</div><div class="line">		addCount += c.size();</div><div class="line">		<span class="keyword">return</span> s.addAll(c);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// forwarded methods from Set interface</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="第17条：要么为集成而设计，并提供文档说明，要么就禁止继承"><a href="#第17条：要么为集成而设计，并提供文档说明，要么就禁止继承" class="headerlink" title="第17条：要么为集成而设计，并提供文档说明，要么就禁止继承"></a>第17条：要么为集成而设计，并提供文档说明，要么就禁止继承</h3><ul>
<li>对于为了继承而设计的类，唯一的测试方法就是编写子类。</li>
<li>构造器决不能调用可被覆盖的方法。</li>
</ul>
<h3 id="第18条：接口优于抽象类"><a href="#第18条：接口优于抽象类" class="headerlink" title="第18条：接口优于抽象类"></a>第18条：接口优于抽象类</h3><p>区别：<br>1.抽象类包含某些方法的实现。接口不允许<br>2.java单继承，所以抽象类收到了极大的限制，</p>
<p>接口优点：</p>
<ul>
<li>现有的类可以很容易被更新，以实现新的接口。</li>
<li>接口是定义mixin（混合类型）的理想选择。</li>
<li>接口允许我们构建非层次结构的类型框架。</li>
</ul>
<p>接口缺点：</p>
<ul>
<li>Sometimes too tedious to use</li>
<li>You have to implement a dozen methods before you can create an object </li>
</ul>
<p>抽象类优点：</p>
<ul>
<li>It is far easier to evolve an abstract<br>class than an interface<ul>
<li> It is relatively easy to add a new method<br>to an abstract class</li>
<li> But almost impossible to add a method to<br>a public interface</li>
<li> Should be very carefully to design public<br>interfaces</li>
</ul>
</li>
</ul>
<h3 id="第19条：接口只用于定义类型"><a href="#第19条：接口只用于定义类型" class="headerlink" title="第19条：接口只用于定义类型"></a>第19条：接口只用于定义类型</h3><p>使用枚举类型 工具类，不要使用常量接口</p>
<h3 id="第20条：类层次优于标签类"><a href="#第20条：类层次优于标签类" class="headerlink" title="第20条：类层次优于标签类"></a>第20条：类层次优于标签类</h3><p>对于标签类，好的方法是使用继承</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Class hierarchy replacement for a tagged class</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Figure</span> </span>&#123; <span class="comment">// Note: NOT instantiable!</span></div><div class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Figure</span> </span>&#123;</div><div class="line"><span class="keyword">final</span> <span class="keyword">double</span> radius;</div><div class="line">Circle(<span class="keyword">double</span> rad) &#123; radius = rad; &#125;</div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> Math.PI * (radius * radius);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Figure</span> </span>&#123;</div><div class="line"><span class="keyword">final</span> <span class="keyword">double</span> length; <span class="keyword">final</span> <span class="keyword">double</span> width;</div><div class="line">Rectangle (<span class="keyword">double</span> len; <span class="keyword">double</span> wid)</div><div class="line">&#123; length = len; width = wid; &#125;</div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> length * width;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="第21条：用函数对象表示策略"><a href="#第21条：用函数对象表示策略" class="headerlink" title="第21条：用函数对象表示策略"></a>第21条：用函数对象表示策略</h3><h3 id="第22条：优先考虑静态成员类"><a href="#第22条：优先考虑静态成员类" class="headerlink" title="第22条：优先考虑静态成员类"></a>第22条：优先考虑静态成员类</h3><p>四种嵌套类（nested class）：</p>
<ul>
<li>静态成员类 （不是内部类，其余三个是）</li>
<li>非静态成员类</li>
<li>匿名类 anonymous class</li>
<li>局部类</li>
</ul>
<p>匿名类的常见用法：</p>
<ul>
<li>动态的创建函数对象。</li>
<li>创建过程对象： runnable thread timertask等</li>
</ul>
<h3 id="第30条：用enum代替int常量"><a href="#第30条：用enum代替int常量" class="headerlink" title="第30条：用enum代替int常量"></a>第30条：用enum代替int常量</h3><p>java枚举本质是int值。==！！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Planet &#123;</div><div class="line"> <span class="comment">// Enum type with data and behavior</span></div><div class="line">	MERCURY (<span class="number">3.302e+23</span>, <span class="number">2.439e6</span>);</div><div class="line">	VENUS (<span class="number">4.869e+24</span>, <span class="number">6.052e6</span>);</div><div class="line">	EARTH (<span class="number">5.975e+24</span>, <span class="number">6.378e6</span>); <span class="comment">// plus MARS, JUPITER,etc.</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> mass;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> radius;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> surfaceGravity;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> G = <span class="number">6.67300e-11</span>; </div><div class="line"><span class="comment">//Universal G</span></div><div class="line">Planet (<span class="keyword">double</span> mass, <span class="keyword">double</span> radius) &#123; <span class="comment">// Constructor</span></div><div class="line">	<span class="keyword">this</span>.mass = mass; <span class="keyword">this</span>.radius = radius;</div><div class="line">	surfaceGravity = G* mass / (radius * radius);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">mass</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> mass; &#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">radious</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> radius; &#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">surfaceGravity</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">return</span> 	surfaceGravity; &#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">surfaceWeight</span> <span class="params">(<span class="keyword">double</span> mass)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> mass * surfaceGravity; &#125; <span class="comment">// F = ma</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>test</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeightTable</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">double</span> earthWeight = Double.parseDouble (args[<span class="number">0</span>]);</div><div class="line"><span class="keyword">double</span> mass = earthWeight / Planet.EARTH.surfaceGravity();</div><div class="line"><span class="comment">// All Enums have a static values() method</span></div><div class="line"><span class="comment">// All Enums have a sensible (and Overridable) toString()</span></div><div class="line"><span class="keyword">for</span> (Planet p : Planet.values())</div><div class="line">System.out.printf (“Weight on %s is %f%n”,</div><div class="line">p, p.surfaceWeight(mass));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Output:</span></div><div class="line">Weight on MERCURY is <span class="number">66.133672</span></div><div class="line">Weight on VENUS is <span class="number">158.383926</span></div><div class="line">Weight on EARTH is <span class="number">175.000000</span></div></pre></td></tr></table></figure>
<pre><code>// Enum type with constant-specific class bodies and data
public enum Operation {
PLUS(“+”) {
double apply (double x, double y) { return x + y; } };
MINUS(“-”) {
double apply (double x, double y) { return x - y; } };
TIMES(“*”) {
double apply (double x, double y) { return x * y; } };
DIVIDE(“/”) {
double apply (double x, double y) { return x / y; } };
private final String symbol;
Operation (String symbol) { this.symbol = symbol; }
@Override public String toString() { return symbol; }
// abstract apply() ensures each constant provide definition
abstract double apply(double x, double y);
}
</code></pre><p>方法：</p>
<ul>
<li>static E valueOf(s): converts a string into an enum value</li>
<li>static E[] values() :an array of all values of your enumeration</li>
</ul>
<h3 id="第31条：用实例域代替序数"><a href="#第31条：用实例域代替序数" class="headerlink" title="第31条：用实例域代替序数"></a>第31条：用实例域代替序数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Abuse of ordinal to derive an associated value – DON’T DO THIS</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Ensemble &#123;</div><div class="line">SOLO, DUET, TRIO, QUARTET, QUINTET,</div><div class="line">SEXTET, SEPTET, OCTET, NONET, DECTET;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfMusicians</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ordinal() + <span class="number">1</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// What if: you add a DOUBLE_QUARTET? You rearrange the constants?</span></div><div class="line"><span class="comment">// Good Solution: Use instance fields instead</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Ensemble &#123;</div><div class="line">SOLO(<span class="number">1</span>), DUET(<span class="number">2</span>), TRIO(<span class="number">3</span>), QUARTET(<span class="number">4</span>), QUINTET(<span class="number">5</span>), SEXTET(<span class="number">6</span>),</div><div class="line">SEPTET(<span class="number">7</span>), OCTET(<span class="number">8</span>), DOUBLE_QUARTET(<span class="number">8</span>), TRIPLE_QUARTET(<span class="number">12</span>);</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> numberOfMusicians;</div><div class="line">Ensemble(<span class="keyword">int</span> size) &#123; <span class="keyword">this</span>.numberOfMusicians = size; &#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfMusicians</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> numberOfMusisians; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="第32条：用EnumSet代替位域"><a href="#第32条：用EnumSet代替位域" class="headerlink" title="第32条：用EnumSet代替位域"></a>第32条：用EnumSet代替位域</h3><h3 id="第33条：用EnumMap代替序数索引"><a href="#第33条：用EnumMap代替序数索引" class="headerlink" title="第33条：用EnumMap代替序数索引"></a>第33条：用EnumMap代替序数索引</h3><h3 id="第33条：用EnumMap代替序数索引-1"><a href="#第33条：用EnumMap代替序数索引-1" class="headerlink" title="第33条：用EnumMap代替序数索引"></a>第33条：用EnumMap代替序数索引</h3><h3 id="第35条：注解优先于命名模式"><a href="#第35条：注解优先于命名模式" class="headerlink" title="第35条：注解优先于命名模式"></a>第35条：注解优先于命名模式</h3><p>注解annotations</p>
<p>Common uses for annotations:</p>
<ul>
<li> To detect problems or errors in code</li>
<li> To suppress compiler warnings</li>
<li> For unit tests, e.g. JUnit</li>
</ul>
<p>An annotation can be placed on:</p>
<ul>
<li> a class</li>
<li> a method</li>
<li> a field</li>
<li> a local variable, …</li>
</ul>
<h3 id="第36条：坚持使用override注解"><a href="#第36条：坚持使用override注解" class="headerlink" title="第36条：坚持使用override注解"></a>第36条：坚持使用override注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bigram</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> first;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> second;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Bigram</span><span class="params">(<span class="keyword">char</span> first, <span class="keyword">char</span> second)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.first = first;</div><div class="line">		<span class="keyword">this</span>.second = second;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Bigram b)</span> </span>&#123;</div><div class="line">	 <span class="keyword">return</span> b.first == first &amp;&amp; b.second == second;</div><div class="line">	 &#125;</div><div class="line"></div><div class="line">	 <span class="meta">@Override</span></div><div class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">	 Bigram b = (Bigram)o;</div><div class="line">	 <span class="keyword">return</span> b.first == first &amp;&amp; b.second == second;</div><div class="line">	 &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">31</span> * first + second;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="comment">//		System.out.println(new Bigram('a', 'z') == new Bigram('a', 'z'));</span></div><div class="line"><span class="comment">//		</span></div><div class="line"><span class="comment">//		</span></div><div class="line"><span class="comment">//		Object obj = new Bigram('a', 'z');</span></div><div class="line"><span class="comment">//		System.out.println(obj.equals(new Bigram('a', 'z')));</span></div><div class="line"><span class="comment">//		</span></div><div class="line"><span class="comment">//		System.out.println(new Bigram('a', 'z').equals(obj));</span></div><div class="line"></div><div class="line">		Set&lt;Bigram&gt; s = <span class="keyword">new</span> HashSet&lt;Bigram&gt;();</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">char</span> ch = <span class="string">'a'</span>; ch &lt;= <span class="string">'z'</span>; ch++)</div><div class="line">				s.add(<span class="keyword">new</span> Bigram(ch, ch));</div><div class="line"></div><div class="line">		System.out.println(s.size());</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果是260.<br>解释：bigram类的创建者想要覆盖equals方法，同事还覆盖了hashcode。但是结果是没有覆盖，将他重载了。为了覆盖object.equals方法，必须定义一个参数为object类型的equals方法。</p>
<p>幸运的是当你加上@override注解时，编译器会报错告诉你哪里错了。</p>
<h3 id="第38条：检查参数的有效性"><a href="#第38条：检查参数的有效性" class="headerlink" title="第38条：检查参数的有效性"></a>第38条：检查参数的有效性</h3><h3 id="第39条：必要时进行保护性拷贝"><a href="#第39条：必要时进行保护性拷贝" class="headerlink" title="第39条：必要时进行保护性拷贝"></a>第39条：必要时进行保护性拷贝</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Broken “immutable” time period class</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Period</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Date start;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Date end;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Period</span> <span class="params">(Date start, Date end)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (start.compareTo(end) &gt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IAE(…);</div><div class="line"><span class="keyword">this</span>.start = start; <span class="keyword">this</span>.end = end; <span class="comment">//oops – should make defensive copies</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">start</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> start;&#125; <span class="comment">// oops again!</span></div><div class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> end;&#125; <span class="comment">// oops yet again!</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// Attack code</span></div><div class="line">Date start = <span class="keyword">new</span> Date();</div><div class="line">Date end = <span class="keyword">new</span> Date();</div><div class="line">Period p = <span class="keyword">new</span> Period(start, end);</div><div class="line">end.setYear(<span class="number">78</span>); <span class="comment">// Attack 1: Modify internals of p via passed reference</span></div><div class="line">p.end().setYear(<span class="number">78</span>); <span class="comment">// Attack 2: Modify internals of p via returned state</span></div></pre></td></tr></table></figure>
<pre><code>// Repaired constructor and getters – now Period really is immutable
public Period (Date start, Date end) {
// Note: clone() *not* used to make defensive copy
// Reason: Date class not final; hence return type may not be java.util.Date
this.start = new Date(start.getTime()); // Defensive copy
this.end = new Date(end.getTime()); // Defensive copy
// Defensive copies made *before* exception check to avoid TOCTOU attack
if (this.start.compareTo(end) &gt; 0) throw new IAE(…);
}
// clone also safe here, but constructors or static factories better (Item 11)
public Date start() { return new Date(start.getTime()); }
public Date end() { return new Date(end.getTime());}
}
</code></pre><h3 id="第40条：谨慎设计方法签名"><a href="#第40条：谨慎设计方法签名" class="headerlink" title="第40条：谨慎设计方法签名"></a>第40条：谨慎设计方法签名</h3><h3 id="第41条：慎用重载"><a href="#第41条：慎用重载" class="headerlink" title="第41条：慎用重载"></a>第41条：慎用重载</h3><p>Overriding</p>
<ul>
<li> Normal OO Pattern</li>
<li> Dynamically determined by runtime system</li>
</ul>
<p>Overloading</p>
<ul>
<li> Exceptional OO Pattern</li>
<li> Statically determined by compiler</li>
</ul>
<p>Set.java ：boolean remove(Object o);<br>List.java：E remove(int index);boolean remove(Object o);</p>
<h3 id="第42条：慎用可变参数"><a href="#第42条：慎用可变参数" class="headerlink" title="第42条：慎用可变参数"></a>第42条：慎用可变参数</h3><h3 id="第43条：返回零长度的数据或者集合，而不是null"><a href="#第43条：返回零长度的数据或者集合，而不是null" class="headerlink" title="第43条：返回零长度的数据或者集合，而不是null"></a>第43条：返回零长度的数据或者集合，而不是null</h3><h3 id="第44条：为所有导出的api元素编写文档注释"><a href="#第44条：为所有导出的api元素编写文档注释" class="headerlink" title="第44条：为所有导出的api元素编写文档注释"></a>第44条：为所有导出的api元素编写文档注释</h3><h3 id="第45条：将局部变量的作用于最小化"><a href="#第45条：将局部变量的作用于最小化" class="headerlink" title="第45条：将局部变量的作用于最小化"></a>第45条：将局部变量的作用于最小化</h3><p>要使局部变量的作用于最小化，最有力的方法就是在第一次使用它的地方声明，</p>
<p>几乎每个局部变量的声明都应该包含一个初始化表达式，</p>
<h3 id="第46条：foreach循环优先于传统for循环"><a href="#第46条：foreach循环优先于传统for循环" class="headerlink" title="第46条：foreach循环优先于传统for循环"></a>第46条：foreach循环优先于传统for循环</h3><h3 id="第47条：了解和实用类库"><a href="#第47条：了解和实用类库" class="headerlink" title="第47条：了解和实用类库"></a>第47条：了解和实用类库</h3><h3 id="第48条：如果需要准确的答案，请避免实用float和double"><a href="#第48条：如果需要准确的答案，请避免实用float和double" class="headerlink" title="第48条：如果需要准确的答案，请避免实用float和double"></a>第48条：如果需要准确的答案，请避免实用float和double</h3><p>BigDecimal</p>
<h3 id="第49条：自动拆箱和装箱"><a href="#第49条：自动拆箱和装箱" class="headerlink" title="第49条：自动拆箱和装箱"></a>第49条：自动拆箱和装箱</h3><pre><code>// Broken comparator – can you spot the flaw?
Comparator &lt; Integer&gt; naturalOrder =
new Comparator&lt;Integer&gt;() { // Anonymous type
public int compare (Integer first, Integer second) {
return first &lt; second ? -1 ://自动拆箱
(first == second//没有自动拆箱
? 0 : 1);
}
};
 Sample uses:
 naturalOrder.compare(new Integer(41), new Integer(42));
 naturalOrder.compare(new Integer(42), new Integer(42));
 naturalOrder.compare(new Integer(43), new Integer(42));
</code></pre><h3 id="第50条：如果其他类型更适合，则尽量避免实用string"><a href="#第50条：如果其他类型更适合，则尽量避免实用string" class="headerlink" title="第50条：如果其他类型更适合，则尽量避免实用string"></a>第50条：如果其他类型更适合，则尽量避免实用string</h3><h3 id="第51条：当心字符串连接的性能"><a href="#第51条：当心字符串连接的性能" class="headerlink" title="第51条：当心字符串连接的性能"></a>第51条：当心字符串连接的性能</h3><h3 id="第52条：通过接口引用对象"><a href="#第52条：通过接口引用对象" class="headerlink" title="第52条：通过接口引用对象"></a>第52条：通过接口引用对象</h3><h3 id="第53条：接口优先于反射机制"><a href="#第53条：接口优先于反射机制" class="headerlink" title="第53条：接口优先于反射机制"></a>第53条：接口优先于反射机制</h3><h3 id="第54条：谨慎的使用本地方法"><a href="#第54条：谨慎的使用本地方法" class="headerlink" title="第54条：谨慎的使用本地方法"></a>第54条：谨慎的使用本地方法</h3><h3 id="第55条：谨慎的进行优化"><a href="#第55条：谨慎的进行优化" class="headerlink" title="第55条：谨慎的进行优化"></a>第55条：谨慎的进行优化</h3><h3 id="第57条：只针对异常的情况实用异常"><a href="#第57条：只针对异常的情况实用异常" class="headerlink" title="第57条：只针对异常的情况实用异常"></a>第57条：只针对异常的情况实用异常</h3><h3 id="第61条：抛出与抽象相对应的异常"><a href="#第61条：抛出与抽象相对应的异常" class="headerlink" title="第61条：抛出与抽象相对应的异常"></a>第61条：抛出与抽象相对应的异常</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第0-0条：java-unit&quot;&gt;&lt;a href=&quot;#第0-0条：java-unit&quot; class=&quot;headerlink&quot; title=&quot;第0.0条：java unit&quot;&gt;&lt;/a&gt;第0.0条：java unit&lt;/h3&gt;&lt;p&gt;javac hello.java&lt;b
    
    </summary>
    
    
      <category term="effectivejava" scheme="http://yoursite.com/tags/effectivejava/"/>
    
  </entry>
  
  <entry>
    <title>spring</title>
    <link href="http://yoursite.com/2016/11/03/spring/"/>
    <id>http://yoursite.com/2016/11/03/spring/</id>
    <published>2016-11-03T05:46:38.000Z</published>
    <updated>2016-11-03T05:47:04.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-AOP-源码分析"><a href="#Spring-AOP-源码分析" class="headerlink" title="Spring AOP 源码分析"></a>Spring AOP 源码分析</h1><h2 id="零-Spring-aop的使用"><a href="#零-Spring-aop的使用" class="headerlink" title="零.Spring aop的使用"></a>零.Spring aop的使用</h2><p>想要分析aop源码。总要先知道spring aop怎么使用吧。要不然，分析个orz…</p>
<p>使用Spring AOP可以基于两种方式，一种是比较方便和强大的注解方式，另一种则是中规中矩的xml配置方式。</p>
<h3 id="0-1-基于注解的使用"><a href="#0-1-基于注解的使用" class="headerlink" title="0.1 基于注解的使用"></a>0.1 基于注解的使用</h3><p>第一步xml配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd</span></div><div class="line">    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;</div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 激活组件扫描功能,在包cn.ysh.studio.spring.aop及其子包下面自动扫描通过注解配置的组件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.ysh.studio.spring.aop"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 激活自动代理功能 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 用户服务对象 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.ysh.studio.spring.aop.service.UserService"</span> /&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>第二步是为Aspect切面类添加注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="comment">//声明这是一个切面Bean</span></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceAspect</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Log log = LogFactory.getLog(ServiceAspect.class);</div><div class="line">    </div><div class="line">    <span class="comment">//配置切入点,该方法无方法体,主要为方便同类中其他方法使用此处配置的切入点</span></div><div class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* cn.ysh.studio.spring.aop.service..*(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aspect</span><span class="params">()</span></span>&#123;    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 配置前置通知,使用在方法aspect()上注册的切入点</div><div class="line">     * 同时接受JoinPoint切入点对象,可以没有该参数</div><div class="line">     */</div><div class="line">    <span class="meta">@Before</span>(<span class="string">"aspect()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(log.isInfoEnabled())&#123;</div><div class="line">            log.info(<span class="string">"before "</span> + joinPoint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//配置后置通知,使用在方法aspect()上注册的切入点</span></div><div class="line">    <span class="meta">@After</span>(<span class="string">"aspect()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(log.isInfoEnabled())&#123;</div><div class="line">            log.info(<span class="string">"after "</span> + joinPoint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//配置环绕通知,使用在方法aspect()上注册的切入点</span></div><div class="line">    <span class="meta">@Around</span>(<span class="string">"aspect()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ((ProceedingJoinPoint) joinPoint).proceed();</div><div class="line">            <span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">            <span class="keyword">if</span>(log.isInfoEnabled())&#123;</div><div class="line">                log.info(<span class="string">"around "</span> + joinPoint + <span class="string">"\tUse time : "</span> + (end - start) + <span class="string">" ms!"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">            <span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">            <span class="keyword">if</span>(log.isInfoEnabled())&#123;</div><div class="line">                log.info(<span class="string">"around "</span> + joinPoint + <span class="string">"\tUse time : "</span> + (end - start) + <span class="string">" ms with exception : "</span> + e.getMessage());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//配置后置返回通知,使用在方法aspect()上注册的切入点</span></div><div class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"aspect()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturn</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(log.isInfoEnabled())&#123;</div><div class="line">            log.info(<span class="string">"afterReturn "</span> + joinPoint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//配置抛出异常后通知,使用在方法aspect()上注册的切入点</span></div><div class="line">    <span class="meta">@AfterThrowing</span>(pointcut=<span class="string">"aspect()"</span>, throwing=<span class="string">"ex"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrow</span><span class="params">(JoinPoint joinPoint, Exception ex)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(log.isInfoEnabled())&#123;</div><div class="line">            log.info(<span class="string">"afterThrow "</span> + joinPoint + <span class="string">"\t"</span> + ex.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第三步测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tester</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Log log = LogFactory.getLog(Tester.class);</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//启动Spring容器</span></div><div class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">        <span class="comment">//获取service组件</span></div><div class="line">        UserService service = (UserService) context.getBean(<span class="string">"userService"</span>);</div><div class="line">        <span class="comment">//以普通的方式调用UserService对象的三个方法</span></div><div class="line">        User user = service.get(<span class="number">1L</span>);</div><div class="line">        service.save(user);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            service.delete(<span class="number">1L</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">if</span>(log.isWarnEnabled())&#123;</div><div class="line">                log.warn(<span class="string">"Delete user : "</span> + e.getMessage());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="0-2-xml配置"><a href="#0-2-xml配置" class="headerlink" title="0.2 xml配置"></a>0.2 xml配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd</span></div><div class="line">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 系统服务组件的切面Bean --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"serviceAspect"</span> <span class="attr">class</span>=<span class="string">"cn.ysh.studio.spring.aop.aspect.ServiceAspect"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- AOP配置 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 声明一个切面,并注入切面Bean,相当于@Aspect --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"simpleAspect"</span> <span class="attr">ref</span>=<span class="string">"serviceAspect"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 配置一个切入点,相当于@Pointcut --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.ysh.studio.spring.aop.service..*(..))"</span> <span class="attr">id</span>=<span class="string">"simplePointcut"</span>/&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 配置通知,相当于@Before、@After、@AfterReturn、@Around、@AfterThrowing --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">"simplePointcut"</span> <span class="attr">method</span>=<span class="string">"before"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">pointcut-ref</span>=<span class="string">"simplePointcut"</span> <span class="attr">method</span>=<span class="string">"after"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">pointcut-ref</span>=<span class="string">"simplePointcut"</span> <span class="attr">method</span>=<span class="string">"afterReturn"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">pointcut-ref</span>=<span class="string">"simplePointcut"</span> <span class="attr">method</span>=<span class="string">"afterThrow"</span> <span class="attr">throwing</span>=<span class="string">"ex"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>AOP用起来还是很简单的。就把xml配置好就算完工了。有Advisor和aspect两种方式来完成。如果是用Advisor的话需要实现AfterReturningAdvice，MethodBeforeAdvice，ThrowsAdvice等接口。而如果用aspect的话则不用继承或者实现其他的类，一个普通的类即可。</p>
<h2 id="一．AOP介绍"><a href="#一．AOP介绍" class="headerlink" title="一．AOP介绍"></a>一．AOP介绍</h2><p>软件开发经历了从汇编语言到高级语言和从过程化编程到面向对象编程；前者是为了提高开发效率，而后者则使用了归纳法，把具有共性的东西进行归类并使之模块化，达到便于维护和扩展的目的；如果说面向对象编程可以对业务需求进行很好的分解使之模块化；那么面向切面编程AOP（Aspect-Oriented Programming）则可以对系统需求进行很好的模软件开发经历了从汇编语言到高级语言和从过程化编程到面向对象编程；前者是为了提高开发效率，而后者则使用了归纳法，把具有共性的东西进行归类并使之模块化，达到便于维护和扩展的目的；如果说面向对象编程可以对业务需求进行很好的分解使之模块化；那么面向切面编程AOP（Aspect-Oriented Programming）则可以对系统需求进行很好的模块组织，简化系统需求和实现之间的对比关系，是对OOP思想的一种补充；块组织，简化系统需求和实现之间的对比关系，是对OOP思想的一种补充。</p>
<p>举个例子来说明一下吧！现在系统中有很多的业务方法，如上传产品信息、修改产品信息、发布公司库等；现在需要对这些方法的执行做性能监控，看每个业务方法的执行时间；在不改变原业务代码的基础上，也许我们会这么做。</p>
<p>Offer接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> edu.zju.cs.lyp.Spring_aop;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IOffer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOffer</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifyOffer</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Offer实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> edu.zju.cs.lyp.Spring_aop;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OfferImpl</span> <span class="keyword">implements</span> <span class="title">IOffer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOffer</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"post offer"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifyOffer</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"modify offer"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>工具类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> edu.zju.cs.lyp.Spring_aop;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PerformanceUtil</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> start=<span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> end=<span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startPerformance</span><span class="params">()</span></span>&#123;</div><div class="line">        start=System.currentTimeMillis();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">endPerformance</span><span class="params">()</span></span>&#123;</div><div class="line">        end=System.currentTimeMillis();</div><div class="line">        System.out.println(<span class="string">"method use:"</span>+(end-start));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Offer代理：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> edu.zju.cs.lyp.Spring_aop;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OfferProxy</span> <span class="keyword">implements</span> <span class="title">IOffer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> IOffer delegate;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OfferProxy</span><span class="params">(IOffer delegate)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.delegate=delegate;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOffer</span><span class="params">()</span> </span>&#123;</div><div class="line">        PerformanceUtil.startPerformance();</div><div class="line">        delegate.postOffer();</div><div class="line">        PerformanceUtil.endPerformance();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifyOffer</span><span class="params">()</span> </span>&#123;</div><div class="line">        PerformanceUtil.startPerformance();</div><div class="line">        delegate.modifyOffer();</div><div class="line">        PerformanceUtil.endPerformance();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Offer测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> edu.zju.cs.lyp.Spring_aop;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProxy</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        IOffer offer= <span class="keyword">new</span> OfferProxy(<span class="keyword">new</span> OfferImpl());</div><div class="line">        offer.postOffer();</div><div class="line">        offer.modifyOffer();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">post offer</div><div class="line">method use:<span class="number">1</span></div><div class="line">modify offer</div><div class="line">method use:<span class="number">0</span></div></pre></td></tr></table></figure>
<p>上面的例子中，OfferProxy实现了IOffer，而所有的业务实现均委托给其成员offer；可以想像，这应该就是最简单的AOP的实现了；但这种方式会存在一个问题：如果有非常多的这种业务对象需要性能监控，我们就需要写同样多的XyzProxy来满足需求，这也是非常巨大的工作量。</p>
<h2 id="二．-代理模式"><a href="#二．-代理模式" class="headerlink" title="二．    代理模式"></a>二．    代理模式</h2><p>代理模式中，存在一个称为ProxyObject的代理对象和RealObject的真实对象，它们都实现了相同的接口；在调用的地方持有ProxyObject的实例，当调用request()方法时，ProxyObject可以在执行RealObject.request()前后做一些特定的业务，甚至不调用RealObject.request()方法。</p>
<p>目前实现代理模式的方式有两种：基于JDK的动态代理和基于CGLIB字节码的代理。</p>
<h3 id="2-1-JDK动态代理"><a href="#2-1-JDK动态代理" class="headerlink" title="2.1 JDK动态代理"></a>2.1 JDK动态代理</h3><p>JDK动态代理，顾名思义，是基于JDK的反射(reflect)机制；在JDK中，提供了InvocationHandler这个接口。</p>
<p>注释如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">InvocationHandler is the <span class="class"><span class="keyword">interface</span> <span class="title">implemented</span> <span class="title">by</span> <span class="title">the</span> <span class="title">invocation</span> <span class="title">handler</span> <span class="title">of</span> <span class="title">a</span> <span class="title">proxy</span> <span class="title">instance</span>.</span></div><div class="line"><span class="title">Each</span> <span class="title">proxy</span> <span class="title">instance</span> <span class="title">has</span> <span class="title">an</span> <span class="title">associated</span> <span class="title">invocation</span> <span class="title">handler</span>. <span class="title">When</span> <span class="title">a</span> <span class="title">method</span> <span class="title">is</span> <span class="title">invoked</span> <span class="title">on</span> <span class="title">a</span> <span class="title">proxy</span> <span class="title">instance</span>, <span class="title">the</span> <span class="title">method</span> <span class="title">invocation</span> <span class="title">is</span> <span class="title">encoded</span> <span class="title">and</span> <span class="title">dispatched</span> <span class="title">to</span> <span class="title">the</span> <span class="title">invoke</span> <span class="title">method</span> <span class="title">of</span> <span class="title">its</span> <span class="title">invocation</span> <span class="title">handler</span>.</div></pre></td></tr></table></figure>
<p>意思是说：该接口由被代理对象的handler所实现；当调用代理对象的方法时，该方法调用将被编码，然后交给代理对象的invoke方法去执行。<br>因此上面的代码可以改写成如下所示：</p>
<p>实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> edu.zju.cs.lyp.Spring_aop;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Object delegate;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">bind</span><span class="params">(Object delegate)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.delegate= delegate;</div><div class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(delegate.getClass().getClassLoader(), </div><div class="line">                delegate.getClass().getInterfaces(), <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        PerformanceUtil.startPerformance();</div><div class="line">        Object result=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            result=method.invoke(delegate, args);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exceptions</span></div><div class="line">        &#125;</div><div class="line">        PerformanceUtil.endPerformance();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> edu.zju.cs.lyp.Spring_aop;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDKProxy</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        IOffer offer = (IOffer) <span class="keyword">new</span> ProxyFactory().bind(<span class="keyword">new</span> OfferImpl());</div><div class="line">        offer.postOffer();</div><div class="line">        offer.modifyOffer();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">post offer</div><div class="line">method use:<span class="number">1</span></div><div class="line">modify offer</div><div class="line">method use:<span class="number">0</span></div></pre></td></tr></table></figure>
<p>通过这种方式，你不需要为针对每一个业务写一个代理对象，就可以很轻松地完成你的需求；但也许你已经注意到了，JDK的动态代理，在创建代理对象(上面红色代码部分)时，被代理的对象需要实现接口(即面向接口编程)；</p>
<h3 id="2-2CGLIB代理方式"><a href="#2-2CGLIB代理方式" class="headerlink" title="2.2CGLIB代理方式"></a>2.2CGLIB代理方式</h3><p>如果目标对象没有实现任何接口，那怎么办呢？不用担心，你可以用CGLIB来实现代理。</p>
<p>实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> edu.zju.cs.lyp.Spring_aop;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Enhancer;</div><div class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodInterceptor;</div><div class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodProxy;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxyFactory</span>  <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Object delegate;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">bind</span><span class="params">(Object delegate)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.delegate=delegate;</div><div class="line">        Enhancer enhancer= <span class="keyword">new</span> Enhancer();</div><div class="line">        enhancer.setSuperclass(delegate.getClass());</div><div class="line">        enhancer.setCallback(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> enhancer.create();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object object, Method method, Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        PerformanceUtil.startPerformance();</div><div class="line">        Object o =proxy.invoke(<span class="keyword">this</span>.delegate, args);</div><div class="line">        PerformanceUtil.endPerformance();</div><div class="line">        <span class="keyword">return</span> o;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> edu.zju.cs.lyp.Spring_aop;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCglibProxy</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        DefaultOffer defaultOffer= (DefaultOffer) <span class="keyword">new</span> CglibProxyFactory().bind(<span class="keyword">new</span> DefaultOffer());</div><div class="line">        defaultOffer.postOffer();</div><div class="line">        defaultOffer.modifyOffer();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">post offer</div><div class="line">method use:<span class="number">20</span></div><div class="line">modify offer</div><div class="line">method use:<span class="number">0</span></div></pre></td></tr></table></figure>
<p>使用CGLIB创建的代理对象，其实就是继承了要代理的目标类，然后对目标类中所有非final方法进行覆盖，但在覆盖方法时会添加一些拦截代码(上面CglibProxyFactory类中的intercept方法)。</p>
<h2 id="三．-Spring-AOP-实现"><a href="#三．-Spring-AOP-实现" class="headerlink" title="三．    Spring AOP 实现"></a>三．    Spring AOP 实现</h2><h3 id="3-1-Spring-AOP-几个基本概念"><a href="#3-1-Spring-AOP-几个基本概念" class="headerlink" title="3.1 Spring AOP 几个基本概念"></a>3.1 Spring AOP 几个基本概念</h3><p>Spring AOP jar包：<strong>spring-aop-4.2.5.release.jar</strong></p>
<p>Spring AOP中的几个基本概念，每次学习AOP都被这几个概念折腾的很不爽，我们在这里再把这几个概念描述一遍，力争把这几个概念搞清，在每次review这块内容的时候可以很快上手。</p>
<ol>
<li>切面(Aspect)：切面就是一个关注点的模块化，如事务管理、日志管理、权限管理等；</li>
<li>连接点(Joinpoint)：程序执行时的某个特定的点，在Spring中就是一个方法的执行；</li>
<li>通知(Advice)：通知就是在切面的某个连接点上执行的操作，也就是事务管理、日志管理等；</li>
<li>切入点(Pointcut)：切入点就是描述某一类选定的连接点，也就是指定某一类要织入通知的方法；</li>
<li>目标对象(Target)：就是被AOP动态代理的目标对象；</li>
</ol>
<p>用一张图来形象地表达AOP的概念及其关系如下：</p>
<p><img src="http://i.imgur.com/SoF1QtC.png" alt=""></p>
<h3 id="3-2-Spring-AOP-中切入点、通知、切面的实现"><a href="#3-2-Spring-AOP-中切入点、通知、切面的实现" class="headerlink" title="3.2 Spring AOP 中切入点、通知、切面的实现"></a>3.2 Spring AOP 中切入点、通知、切面的实现</h3><p>理解了上面的几个概念后，我们分别来看看Spring AOP是如何实现这些概念的；</p>
<h4 id="3-2-1-切入点-Pointcut"><a href="#3-2-1-切入点-Pointcut" class="headerlink" title="3.2.1.切入点(Pointcut)"></a>3.2.1.切入点(Pointcut)</h4><p>它定义了哪些连接点需要被织入横切逻辑；在Java中，连接点对应哪些类(接口)的方法。因此，我们都能猜到，所谓的切入点，就是定义了匹配哪些娄的哪些方法的一些规则，可以是静态的基于类(方法)名的值匹配，也可以是基于正则表达式的模式匹配。</p>
<p>来看看Spring AOP Pointcut相关的类图：</p>
<p><img src="http://i.imgur.com/0Fpm5dB.png" alt=""></p>
<p>在Pointcut接口的定义中，也许你已经想到了，ClassFilter是类过滤器，它定义了哪些类名需要拦截；典型的两个实现类为TypePatternClassFilter和TrueClassFilter(所有类均匹配)；而MethodMatcher为方法匹配器，定义哪些方法需要拦截。</p>
<p>在上面的类图中：</p>
<ul>
<li>StaticMethodMatch与DynamicMethodMatch的区别是后者在运行时会依据方法的参数值进行匹配。</li>
<li>NameMatchMethodPointCut根据指定的mappedNames来匹配方法。</li>
<li>AbstractRegexpMethodPointCut根据正则表达式来匹配方法</li>
</ul>
<p>类图中部分代码实现：</p>
<p>MethodMatcher.class:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.aop;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodMatcher</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodMatcher TRUE = TrueMethodMatcher.INSTANCE;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Method paramMethod, Class&lt;?&gt; paramClass)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isRuntime</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Method paramMethod, Class&lt;?&gt; paramClass, Object[] paramArrayOfObject)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>StaticMethodMatcher.class:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.aop.support;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> org.springframework.aop.MethodMatcher;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticMethodMatcher</span> <span class="keyword">implements</span> <span class="title">MethodMatcher</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isRuntime</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Method method, Class&lt;?&gt; targetClass, Object[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Illegal MethodMatcher usage"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>DynamicMethodMatcher.class:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.aop.support;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> org.springframework.aop.MethodMatcher;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicMethodMatcher</span> <span class="keyword">implements</span> <span class="title">MethodMatcher</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isRuntime</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Method method, Class&lt;?&gt; targetClass)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Pointcut.class:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.aop;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pointcut</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pointcut TRUE = TruePointcut.INSTANCE;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ClassFilter <span class="title">getClassFilter</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> MethodMatcher <span class="title">getMethodMatcher</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-2-2-通知-Advice"><a href="#3-2-2-通知-Advice" class="headerlink" title="3.2.2.通知(Advice)"></a>3.2.2.通知(Advice)</h4><p>通知定义了具体的横切逻辑。在Spring中，存在两种类型的Advice，即per-class和per-instance的Advice。</p>
<p>所谓per-class，即该类型的Advice只提供方法拦截，不会为目标对象保存任何状态或者添加新的特性，它也是我们最常见的Advice。下面是per-class的类图：</p>
<p><img src="http://i.imgur.com/tGVnfQi.png" alt=""></p>
<ul>
<li>BeforeAdvice：在连接点前执行的横切逻辑。</li>
<li>AfterReturningAdvice：在连接点执行后，再执行横切逻辑。</li>
<li>AfterAdvice：一般由程序自己实现，当抛出异常后，执行横切逻辑。</li>
<li>AroundAdvice：Spring AOP中并没有提供这个接口，而是采用了AOP Alliance的MethodInteceptor接口；通过看AfterReturningAdvice的源码我们知道，它是不能更改连接点所在方法的返回值的(更改引用)；但使用的MethodInteceptor，所有的事情，都不在话下。</li>
</ul>
<p>部分源码介绍：</p>
<p>AfterAdvice,Advice两个接口是空的</p>
<p>AfterReturningAdvice.class</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.aop;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">interface</span> <span class="title">AfterReturningAdvice</span> <span class="keyword">extends</span> <span class="title">AfterAdvice</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object paramObject1, Method paramMethod, Object[] paramArrayOfObject,</span></span></div><div class="line">            Object paramObject2) <span class="keyword">throws</span> Throwable;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MethodBeforeAdvice.class</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodBeforeAdvice</span> <span class="keyword">extends</span> <span class="title">BeforeAdvice</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method paramMethod, Object[] paramArrayOfObject, Object paramObject)</span> <span class="keyword">throws</span> Throwable</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MethodInterceptor.class</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.aopalliance.intercept;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodInterceptor</span> <span class="keyword">extends</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation paramMethodInvocation)</span> <span class="keyword">throws</span> Throwable</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的类图中，还有两种类没有介绍，那就是 <strong><em>AdviceAdapter 和 </em></strong>AdviceInteceptor.结构如图所示<br><img src="http://i.imgur.com/0ooNuhA.png" alt=""></p>
<p>我们以AfterReturningAdviceInterceptor为例来说明：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.aop.framework.adapter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</div><div class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</div><div class="line"><span class="keyword">import</span> org.springframework.aop.AfterAdvice;</div><div class="line"><span class="keyword">import</span> org.springframework.aop.AfterReturningAdvice;</div><div class="line"><span class="keyword">import</span> org.springframework.util.Assert;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterReturningAdviceInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span>, <span class="title">AfterAdvice</span>, <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AfterReturningAdvice advice;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AfterReturningAdviceInterceptor</span><span class="params">(AfterReturningAdvice advice)</span> </span>&#123;</div><div class="line">        Assert.notNull(advice, <span class="string">"Advice must not be null"</span>);</div><div class="line">        <span class="keyword">this</span>.advice = advice;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation mi)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        Object retVal = mi.proceed();</div><div class="line">        <span class="keyword">this</span>.advice.afterReturning(retVal, mi.getMethod(), mi.getArguments(), mi.getThis());</div><div class="line">        <span class="keyword">return</span> retVal;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该类实现了MethodInterceptor和AfterAdvice接口，同时构造函数中还有一个AfterReturningAdvice实例的参数；这个类存在的作用是为了什么呢？Spring AOP把所有的Advice都适配成了MethodInterceptor，统一的好处是方便后面横切逻辑的执行(参看下一节)，适配的工作即由<em>*</em>AdviceAdapter完成；</p>
<p>Spring AOP所谓的AfterReturningAdvice，通过适配成MethodInterceptor后，其实就是在invoke方法中，先执行目标对象的方法，再执行的AfterReturningAdvice所定义的横切逻辑。</p>
<p>对于per-instance的Advice，目前只有一种实现，就是Introduction，使用的场景比较少。</p>
<p><img src="http://i.imgur.com/EmLqrLw.png" alt=""></p>
<h4 id="3-2-3-切面-Aspect"><a href="#3-2-3-切面-Aspect" class="headerlink" title="3.2.3.切面(Aspect)"></a>3.2.3.切面(Aspect)</h4><p>在Spring中，Advisor就是切面；但与通常的Aspect不同的是，Advisor通常只有一个Pointcut和一个Advice，而Aspect则可以包含多个Pointcut和多个Advice，因此Advisor是一种特殊的Aspect。</p>
<p>接下来看下per-class Advisor的类图：</p>
<p><img src="http://i.imgur.com/rELgifs.png" alt=""></p>
<p>继承关系如下：</p>
<p><img src="http://i.imgur.com/oSYJlw4.png" alt=""></p>
<p>Advisor包含一个Pointcut和一个Advisor；在AbstractGenericPointcutAdvisor中，持有一个Advice的引用；下面的几个实现，均是针对前面提到的几种不同的Pointcut的实现。</p>
<h3 id="3-3-Spring-AOP实现基本线索"><a href="#3-3-Spring-AOP实现基本线索" class="headerlink" title="3.3 Spring AOP实现基本线索"></a>3.3 Spring AOP实现基本线索</h3><p>我们选择ProxyFactoryBean作为入口点和分析的开始。ProxyFactoryBean是在Spring IoC环境中，创建AOP应用的最底层方法，从中，可以看到一条实现AOP的基本线索。</p>
<p>所有的逻辑从以下的方法开始,我们主要针对单例的代理对象的生成：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">    <span class="comment">//这里初始化通知器链</span></div><div class="line">    initializeAdvisorChain();</div><div class="line">    <span class="keyword">if</span> (isSingleton()) &#123;</div><div class="line">        <span class="comment">//根据定义需要生成单例的proxy</span></div><div class="line">        <span class="keyword">return</span> getSingletonInstance();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.targetName == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.logger.warn(</div><div class="line">                <span class="string">"Using non-singleton proxies with singleton targets is often undesirable. Enable prototype proxies by setting the 'targetName' property."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//这里根据定义需要生成prototype类型的proxy</span></div><div class="line">    <span class="keyword">return</span> newPrototypeInstance();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们深入到SpringAOP核心代码的内部，看看代理对象的生成机制，拦截器横切逻辑以及织入的实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> Object <span class="title">getSingletonInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.singletonInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//返回具体的目标对象，就是被代理的对象</span></div><div class="line">            <span class="keyword">this</span>.targetSource = freshTargetSource();</div><div class="line">            <span class="keyword">if</span> ((<span class="keyword">this</span>.autodetectInterfaces) &amp;&amp; (getProxiedInterfaces().length == <span class="number">0</span>) &amp;&amp; (!(isProxyTargetClass()))) &#123;</div><div class="line">                <span class="comment">//从targetsource中获取目标对象的class</span></div><div class="line">                Class targetClass = getTargetClass();</div><div class="line">                <span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> FactoryBeanNotInitializedException(<span class="string">"Cannot determine target class for proxy"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//这里设置代理对象的借口</span></div><div class="line">                setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, <span class="keyword">this</span>.proxyClassLoader));</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//这里使用proxyfactory来生成我们需要的proxy。</span></div><div class="line">            <span class="keyword">super</span>.setFrozen(<span class="keyword">this</span>.freezeProxy);</div><div class="line">            <span class="keyword">this</span>.singletonInstance = getProxy(createAopProxy());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.singletonInstance;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>ProxyFactoryBean是AdvisedSupport的子类，Spring使用AopProxy接口把AOP代理的实现与框架的其他部分分离开来。在AdvisedSupport中通过这样的方式来得到AopProxy,当然这里需要得到AopProxyFactory的帮助 ，从JDK或者cglib中得到想要的代理对象：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> AopProxy <span class="title">createAopProxy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!(<span class="keyword">this</span>.active)) &#123;</div><div class="line">            activate();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> getAopProxyFactory().createAopProxy(<span class="keyword">this</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>getAopProxyFactory()获取ProxyCreatorSupport的属性aopProxyFactory</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> AopProxyFactory <span class="title">getAopProxyFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.aopProxyFactory;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>该属性被默认初始化为DefaultAopProxyFactory对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyCreatorSupport</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.aopProxyFactory = <span class="keyword">new</span> DefaultAopProxyFactory();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyCreatorSupport</span><span class="params">(AopProxyFactory aopProxyFactory)</span> </span>&#123;</div><div class="line">        Assert.notNull(aopProxyFactory, <span class="string">"AopProxyFactory must not be null"</span>);</div><div class="line">        <span class="keyword">this</span>.aopProxyFactory = aopProxyFactory;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这个DefaultAopProxyFactory是Spring用来生成AopProxy的地方，它包含JDK和Cglib两种实现方式。让我接着往里面看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*** Eclipse Class Decompiler plugin, copyright (c) 2016 Chen Chao (cnfree2000@hotmail.com) ***/</span></div><div class="line"><span class="keyword">package</span> org.springframework.aop.framework;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</div><div class="line"><span class="keyword">import</span> org.springframework.aop.SpringProxy;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultAopProxyFactory</span> <span class="keyword">implements</span> <span class="title">AopProxyFactory</span>, <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> AopProxy <span class="title">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</div><div class="line">        <span class="comment">//做一些判断操作。isoptimize（）是指是否采取进一步的优化，true采用cglib来生成代理。</span></div><div class="line">        <span class="comment">//isproxytargetclass决定是否采用基于接口的代理。</span></div><div class="line">        <span class="keyword">if</span> ((config.isOptimize()) || (config.isProxyTargetClass()) || (hasNoUserSuppliedProxyInterfaces(config))) &#123;</div><div class="line">            Class targetClass = config.getTargetClass();</div><div class="line">            <span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(</div><div class="line">                        <span class="string">"TargetSource cannot determine target class: Either an interface or a target is required for proxy creation."</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//如果目标对象实现的接口，则采用jdk动态代理来生成proxy</span></div><div class="line">            <span class="keyword">if</span> ((targetClass.isInterface()) || (Proxy.isProxyClass(targetClass))) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//如果target不是接口的实现的话，返回cglib类型的aopproxy</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ObjenesisCglibAopProxy(config);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//不满足最开始的判断 直接使用jdk动态代理</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasNoUserSuppliedProxyInterfaces</span><span class="params">(AdvisedSupport config)</span> </span>&#123;</div><div class="line">        Class[] ifcs = config.getProxiedInterfaces();</div><div class="line">        <span class="keyword">return</span> ((ifcs.length == <span class="number">0</span>) || ((ifcs.length == <span class="number">1</span>) &amp;&amp; (SpringProxy.class.isAssignableFrom(ifcs[<span class="number">0</span>]))));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到其中的代理对象可以由JDK或者Cglib来生成，JdkDynamicAopProxy类和Cglib2AopProxy都实现的是AopProxy的接口，我们进入JdkDynamicAopProxy实现中看看Proxy是怎样生成的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">JdkDynamicAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</div><div class="line">        Assert.notNull(config, <span class="string">"AdvisedSupport must not be null"</span>);</div><div class="line">        <span class="keyword">if</span> ((config.getAdvisors().length == <span class="number">0</span>) &amp;&amp; (config.getTargetSource() == AdvisedSupport.EMPTY_TARGET_SOURCE)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"No advisors and no TargetSource specified"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.advised = config;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getProxy(ClassUtils.getDefaultClassLoader());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">            logger.debug(<span class="string">"Creating JDK dynamic proxy: target source is "</span> + <span class="keyword">this</span>.advised.getTargetSource());</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//根据advised中的配置信息，获取proxy需要代理的接口、放入proxiedInterfaces中。</span></div><div class="line">        Class[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(<span class="keyword">this</span>.advised);</div><div class="line">        findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);</div><div class="line">        <span class="comment">//这里我们调用jdk proxy 来生成需要的proxy实例</span></div><div class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(classLoader, proxiedInterfaces, <span class="keyword">this</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>再来看cglib代理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjenesisCglibAopProxy</span> <span class="keyword">extends</span> <span class="title">CglibAopProxy</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(ObjenesisCglibAopProxy.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SpringObjenesis objenesis = <span class="keyword">new</span> SpringObjenesis();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObjenesisCglibAopProxy</span><span class="params">(AdvisedSupport config)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(config);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">createProxyClassAndInstance</span><span class="params">(Enhancer enhancer, Callback[] callbacks)</span> </span>&#123;</div><div class="line">        Class proxyClass = enhancer.createClass();</div><div class="line">        Object proxyInstance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (objenesis.isWorthTrying()) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                proxyInstance = objenesis.newInstance(proxyClass, enhancer.getUseCache());</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">                logger.debug(<span class="string">"Unable to instantiate proxy using Objenesis, falling back to regular proxy construction"</span>,</div><div class="line">                        ex);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (proxyInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                proxyInstance = (<span class="keyword">this</span>.constructorArgs != <span class="keyword">null</span>)</div><div class="line">                        ? proxyClass.getConstructor(<span class="keyword">this</span>.constructorArgTypes).newInstance(<span class="keyword">this</span>.constructorArgs)</div><div class="line">                        : proxyClass.newInstance();</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(</div><div class="line">                        <span class="string">"Unable to instantiate proxy using Objenesis, and regular proxy instantiation via default constructor fails as well"</span>,</div><div class="line">                        ex);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ((Factory) proxyInstance).setCallbacks(callbacks);</div><div class="line">        <span class="keyword">return</span> proxyInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>继承了CglibAopProxy。下面的和最开始的例子比较，是不是很熟悉。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">            logger.debug(<span class="string">"Creating CGLIB proxy: target source is "</span> + <span class="keyword">this</span>.advised.getTargetSource());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class rootClass = <span class="keyword">this</span>.advised.getTargetClass();</div><div class="line">            Assert.state(rootClass != <span class="keyword">null</span>, <span class="string">"Target class must be available for creating a CGLIB proxy"</span>);</div><div class="line"></div><div class="line">            Class proxySuperClass = rootClass;</div><div class="line">            <span class="keyword">if</span> (ClassUtils.isCglibProxyClass(rootClass)) &#123;</div><div class="line">                proxySuperClass = rootClass.getSuperclass();</div><div class="line">                Class[] additionalInterfaces = rootClass.getInterfaces();</div><div class="line">                <span class="keyword">for</span> (Class additionalInterface : additionalInterfaces) &#123;</div><div class="line">                    <span class="keyword">this</span>.advised.addInterface(additionalInterface);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            validateClassIfNecessary(proxySuperClass, classLoader);</div><div class="line"></div><div class="line">            Enhancer enhancer = createEnhancer();</div><div class="line">            <span class="keyword">if</span> (classLoader != <span class="keyword">null</span>) &#123;</div><div class="line">                enhancer.setClassLoader(classLoader);</div><div class="line">                <span class="keyword">if</span> ((classLoader <span class="keyword">instanceof</span> SmartClassLoader)</div><div class="line">                        &amp;&amp; (((SmartClassLoader) classLoader).isClassReloadable(proxySuperClass))) &#123;</div><div class="line">                    enhancer.setUseCache(<span class="keyword">false</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            enhancer.setSuperclass(proxySuperClass);</div><div class="line">            enhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(<span class="keyword">this</span>.advised));</div><div class="line">            enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);</div><div class="line">            enhancer.setStrategy(<span class="keyword">new</span> ClassLoaderAwareUndeclaredThrowableStrategy(classLoader));</div><div class="line"></div><div class="line">            Callback[] callbacks = getCallbacks(rootClass);</div><div class="line">            Class[] types = <span class="keyword">new</span> Class[callbacks.length];</div><div class="line">            <span class="keyword">int</span> k;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; types.length; ++k) &#123;</div><div class="line">                types[k] = callbacks[k].getClass();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            enhancer.setCallbackFilter(<span class="keyword">new</span> ProxyCallbackFilter(<span class="keyword">this</span>.advised.getConfigurationOnlyCopy(),</div><div class="line">                    <span class="keyword">this</span>.fixedInterceptorMap, <span class="keyword">this</span>.fixedInterceptorOffset));</div><div class="line">            enhancer.setCallbackTypes(types);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> createProxyClassAndInstance(enhancer, callbacks);</div><div class="line">        &#125; <span class="keyword">catch</span> (CodeGenerationException ex) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"Could not generate CGLIB subclass of class ["</span> + <span class="keyword">this</span>.advised.getTargetClass()</div><div class="line">                    + <span class="string">"]: "</span> + <span class="string">"Common causes of this problem include using a final class or a non-visible class"</span>, ex);</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"Could not generate CGLIB subclass of class ["</span> + <span class="keyword">this</span>.advised.getTargetClass()</div><div class="line">                    + <span class="string">"]: "</span> + <span class="string">"Common causes of this problem include using a final class or a non-visible class"</span>, ex);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"Unexpected AOP exception"</span>, ex);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>用Proxy包装target之后，通过ProxyFactoryBean得到对其方法的调用就被Proxy拦截了， <strong><em>ProxyFactoryBean的getObject()方法得到的实际上是一个Proxy了，target对象已经被封装了。</em></strong>对 ProxyFactoryBean这个工厂bean而言，其生产出来的对象是封装了目标对象的代理对象。</p>
<h3 id="3-4拦截器的作用"><a href="#3-4拦截器的作用" class="headerlink" title="3.4拦截器的作用"></a>3.4拦截器的作用</h3><p>前面分析了SpringAOP实现中得到Proxy对象的过程，接下来我们去探寻Spring AOP中拦截器链是怎样被调用的，也就是Proxy模式是怎样起作用的。<br>还记得在JdkDynamicAopProxy中生成Proxy对象的时候，有一句这样的代码吗？</p>
<pre><code>return Proxy.newProxyInstance(classLoader, proxiedInterfaces, this);
</code></pre><p>这里我们的JdkDynamicAopProxy实现了InvocationHandler这个接口，<code>final class JdkDynamicAopProxy implements AopProxy, InvocationHandler, Serializable</code>.</p>
<p>this参数对应的是InvocationHandler对象,也就是说当 Proxy对象的函数被调用的时候，InvocationHandler的invoke方法会被作为回调函数调用.</p>
<p>我们来看一下动态代理中invoke函数的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        Object oldProxy = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">boolean</span> setProxyContext = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        TargetSource targetSource = <span class="keyword">this</span>.advised.targetSource;</div><div class="line">        Class targetClass = <span class="keyword">null</span>;</div><div class="line">        Object target = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Object localObject1;</div><div class="line">            <span class="comment">//目标对象未实现equals方法</span></div><div class="line">            <span class="keyword">if</span> ((!(<span class="keyword">this</span>.equalsDefined)) &amp;&amp; (AopUtils.isEqualsMethod(method))) &#123;</div><div class="line">                localObject1 = Boolean.valueOf(equals(args[<span class="number">0</span>]));</div><div class="line">                <span class="keyword">return</span> localObject1;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//目标对象未实现hashcode方法</span></div><div class="line">            <span class="keyword">if</span> ((!(<span class="keyword">this</span>.hashCodeDefined)) &amp;&amp; (AopUtils.isHashCodeMethod(method))) &#123;</div><div class="line">                localObject1 = Integer.valueOf(hashCode());</div><div class="line">                <span class="keyword">return</span> localObject1;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//opaque顺序控制生成代理对象是否可以强制转换类型为advised，默认为false。</span></div><div class="line">            <span class="comment">//z这里针对opaque为true且代理的为借口自身，并且代理类为advised借口的子接口，不进行代理操作。</span></div><div class="line">            <span class="keyword">if</span> ((!(<span class="keyword">this</span>.advised.opaque)) &amp;&amp; (method.getDeclaringClass().isInterface())</div><div class="line">                    &amp;&amp; (method.getDeclaringClass().isAssignableFrom(Advised.class))) &#123;</div><div class="line">            <span class="comment">//这里就是目标对象的调用</span></div><div class="line">                localObject1 = AopUtils.invokeJoinpointUsingReflection(<span class="keyword">this</span>.advised, method, args);</div><div class="line">                <span class="keyword">return</span> localObject1;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//设置exposeproxy为true，让springaop框架将生成的当前代理对象绑定到threadlocal</span></div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.advised.exposeProxy) &#123;</div><div class="line">                oldProxy = AopContext.setCurrentProxy(proxy);</div><div class="line">                setProxyContext = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//这里是得到目标对象，目标对象可能来自一个示例池或者一个简单的java对象。</span></div><div class="line">            target = targetSource.getTarget();</div><div class="line">            <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</div><div class="line">                targetClass = target.getClass();</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//重要！！！：：：这里获得定义好的拦截器链</span></div><div class="line">            List chain = <span class="keyword">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</div><div class="line">            Object retVal;</div><div class="line">            Object retVal;</div><div class="line">            <span class="comment">//如果没有拦截器，直接调用目标的对象方法，不创建methodinvocation</span></div><div class="line">            <span class="keyword">if</span> (chain.isEmpty()) &#123;</div><div class="line">                Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);</div><div class="line">                retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//如果有拦截器的设定，那么需要调用拦截器之后才能调用目标对象的相应的方法。</span></div><div class="line">                <span class="comment">//通过构造一个ReflectiveMethodInvocation来实现</span></div><div class="line">                MethodInvocation invocation = <span class="keyword">new</span> ReflectiveMethodInvocation(proxy, target, method, args, targetClass,</div><div class="line">                        chain);</div><div class="line">                <span class="comment">//通过ReflectiveMethodInvocation来调用拦截器连和相应的目标方法。</span></div><div class="line">                <span class="comment">//在proceed方法内部实现了自身的递归调用来便利整个拦截器链。</span></div><div class="line"></div><div class="line">                retVal = invocation.proceed();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            Class returnType = method.getReturnType();</div><div class="line">            <span class="keyword">if</span> ((retVal != <span class="keyword">null</span>) &amp;&amp; (retVal == target) &amp;&amp; (returnType.isInstance(proxy))</div><div class="line">                    &amp;&amp; (!(RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())))) &#123;</div><div class="line">                retVal = proxy;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((retVal == <span class="keyword">null</span>) &amp;&amp; (returnType != Void.TYPE) &amp;&amp; (returnType.isPrimitive())) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> AopInvocationException(</div><div class="line">                        <span class="string">"Null return value from advice does not match primitive return type for: "</span> + method);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            Object localObject2 = retVal;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> localObject2;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> ((target != <span class="keyword">null</span>) &amp;&amp; (!(targetSource.isStatic()))) &#123;</div><div class="line">                <span class="comment">//释放gettarget方法获取的target对象，和targetsource实现有关</span></div><div class="line">                targetSource.releaseTarget(target);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (setProxyContext) &#123;</div><div class="line">                AopContext.setCurrentProxy(oldProxy);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上面所说的目标对象方法的调用，是通过AopUtils的方法调用，使用反射机制来对目标对象的方法进行的;</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">invokeJoinpointUsingReflection</span><span class="params">(Object target, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        ReflectionUtils.makeAccessible(method);</div><div class="line">        <span class="keyword">return</span> method.invoke(target, args);</div><div class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</div><div class="line">        <span class="keyword">throw</span> ex.getTargetException();</div><div class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AopInvocationException(<span class="string">"AOP configuration seems to be invalid: tried calling method ["</span> + method</div><div class="line">                + <span class="string">"] on target ["</span> + target + <span class="string">"]"</span>, ex);</div><div class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AopInvocationException(<span class="string">"Could not access method ["</span> + method + <span class="string">"]"</span>, ex);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，我们来看具体的ReflectiveMethodInvocation中proceed()方法的实现，也就是拦截器链的实现机制：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">proceed</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="comment">//重点！！！currentInterceptorIndex初始化值为-1，首先判断长度是否为0，为0直接调用目标对象的方法。</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.currentInterceptorIndex == <span class="keyword">this</span>.interceptorsAndDynamicMethodMatchers.size() - <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> invokeJoinpoint();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Object interceptorOrInterceptionAdvice = <span class="keyword">this</span>.interceptorsAndDynamicMethodMatchers</div><div class="line">                .get(++<span class="keyword">this</span>.currentInterceptorIndex);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (interceptorOrInterceptionAdvice <span class="keyword">instanceof</span> InterceptorAndDynamicMethodMatcher) &#123;</div><div class="line">            <span class="comment">//匹配逻辑，只要方法匹配就调用拦截器，不匹配，跳过这个拦截器，调用下一个。</span></div><div class="line">            InterceptorAndDynamicMethodMatcher dm = (InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;</div><div class="line">            <span class="comment">//需要注意一点，我们这里虽然反悔了，但是匹配到的拦截器自身的invoke方法还是会调用的，</span></div><div class="line">            <span class="comment">//继续遍历拦截器链</span></div><div class="line">            <span class="keyword">if</span> (dm.methodMatcher.matches(<span class="keyword">this</span>.method, <span class="keyword">this</span>.targetClass, <span class="keyword">this</span>.arguments)) &#123;</div><div class="line">                <span class="keyword">return</span> dm.interceptor.invoke(<span class="keyword">this</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//没匹配， 调用下一个拦截器，重复上面逻辑</span></div><div class="line">            <span class="keyword">return</span> proceed();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//如果是MethodInterceptor，我们调用invoke方法，主要为了兼容原始aop联盟的东西，</span></div><div class="line">        <span class="keyword">return</span> ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(<span class="keyword">this</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>从上面的分析我们看到了Spring AOP拦截机制的基本实现，比如Spring怎样得到Proxy，怎样利用JAVA Proxy以及反射机制对用户定义的拦截器链进行处理。</p>
<h3 id="3-5织入的实现"><a href="#3-5织入的实现" class="headerlink" title="3.5织入的实现"></a>3.5织入的实现</h3><p>在上面调用拦截器的时候，经过一系列的注册，适配的过程以后，拦截器在拦截的时候，会调用到预置好的一个通知适配器，设置通知拦截器，这是一系列Spring设计好为通知服务的类的一个，是最终完成通知拦截和实现的地方，例如对 MethodBeforeAdviceInterceptor的实现是这样的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodBeforeAdviceInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span>, <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MethodBeforeAdvice advice;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MethodBeforeAdviceInterceptor</span><span class="params">(MethodBeforeAdvice advice)</span> </span>&#123;</div><div class="line">        Assert.notNull(advice, <span class="string">"Advice must not be null"</span>);</div><div class="line">        <span class="keyword">this</span>.advice = advice;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation mi)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="keyword">this</span>.advice.before(mi.getMethod(), mi.getArguments(), mi.getThis());</div><div class="line">        <span class="comment">//这个invoke方法是拦截器的回调方法，会在代理对象的方法被调用的时候出发回调</span></div><div class="line">        <span class="keyword">return</span> mi.proceed();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到通知适配器将advice适配成Interceptor以后，会调用advice的before方法去执行横切逻辑。这样就成功的完成了before通知的织入。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-AOP-源码分析&quot;&gt;&lt;a href=&quot;#Spring-AOP-源码分析&quot; class=&quot;headerlink&quot; title=&quot;Spring AOP 源码分析&quot;&gt;&lt;/a&gt;Spring AOP 源码分析&lt;/h1&gt;&lt;h2 id=&quot;零-Spring-aop的
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring_AOP源码分析</title>
    <link href="http://yoursite.com/2016/11/03/Spring-AOP%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2016/11/03/Spring-AOP源码分析/</id>
    <published>2016-11-02T17:15:11.000Z</published>
    <updated>2016-11-03T05:46:09.319Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-AOP-源码分析"><a href="#Spring-AOP-源码分析" class="headerlink" title="Spring AOP 源码分析"></a>Spring AOP 源码分析</h1><h2 id="零-Spring-aop的使用"><a href="#零-Spring-aop的使用" class="headerlink" title="零.Spring aop的使用"></a>零.Spring aop的使用</h2><p>想要分析aop源码。总要先知道spring aop怎么使用吧。要不然，分析个orz…</p>
<p>使用Spring AOP可以基于两种方式，一种是比较方便和强大的注解方式，另一种则是中规中矩的xml配置方式。</p>
<h3 id="0-1-基于注解的使用"><a href="#0-1-基于注解的使用" class="headerlink" title="0.1 基于注解的使用"></a>0.1 基于注解的使用</h3><p>第一步xml配置：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;&gt;

    &lt;!-- 激活组件扫描功能,在包cn.ysh.studio.spring.aop及其子包下面自动扫描通过注解配置的组件 --&gt;
    &lt;context:component-scan base-package=&quot;cn.ysh.studio.spring.aop&quot;/&gt;
    &lt;!-- 激活自动代理功能 --&gt;
    &lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot;/&gt;

    &lt;!-- 用户服务对象 --&gt;
    &lt;bean id=&quot;userService&quot; class=&quot;cn.ysh.studio.spring.aop.service.UserService&quot; /&gt;

&lt;/beans&gt;
</code></pre><p>第二步是为Aspect切面类添加注解：</p>
<!--lang: java--> 
<pre><code>@Component
//声明这是一个切面Bean
@Aspect
public class ServiceAspect {

    private final static Log log = LogFactory.getLog(ServiceAspect.class);

    //配置切入点,该方法无方法体,主要为方便同类中其他方法使用此处配置的切入点
    @Pointcut(&quot;execution(* cn.ysh.studio.spring.aop.service..*(..))&quot;)
    public void aspect(){    }

    /*
     * 配置前置通知,使用在方法aspect()上注册的切入点
     * 同时接受JoinPoint切入点对象,可以没有该参数
     */
    @Before(&quot;aspect()&quot;)
    public void before(JoinPoint joinPoint){
        if(log.isInfoEnabled()){
            log.info(&quot;before &quot; + joinPoint);
        }
    }

    //配置后置通知,使用在方法aspect()上注册的切入点
    @After(&quot;aspect()&quot;)
    public void after(JoinPoint joinPoint){
        if(log.isInfoEnabled()){
            log.info(&quot;after &quot; + joinPoint);
        }
    }

    //配置环绕通知,使用在方法aspect()上注册的切入点
    @Around(&quot;aspect()&quot;)
    public void around(JoinPoint joinPoint){
        long start = System.currentTimeMillis();
        try {
            ((ProceedingJoinPoint) joinPoint).proceed();
            long end = System.currentTimeMillis();
            if(log.isInfoEnabled()){
                log.info(&quot;around &quot; + joinPoint + &quot;\tUse time : &quot; + (end - start) + &quot; ms!&quot;);
            }
        } catch (Throwable e) {
            long end = System.currentTimeMillis();
            if(log.isInfoEnabled()){
                log.info(&quot;around &quot; + joinPoint + &quot;\tUse time : &quot; + (end - start) + &quot; ms with exception : &quot; + e.getMessage());
            }
        }
    }

    //配置后置返回通知,使用在方法aspect()上注册的切入点
    @AfterReturning(&quot;aspect()&quot;)
    public void afterReturn(JoinPoint joinPoint){
        if(log.isInfoEnabled()){
            log.info(&quot;afterReturn &quot; + joinPoint);
        }
    }

    //配置抛出异常后通知,使用在方法aspect()上注册的切入点
    @AfterThrowing(pointcut=&quot;aspect()&quot;, throwing=&quot;ex&quot;)
    public void afterThrow(JoinPoint joinPoint, Exception ex){
        if(log.isInfoEnabled()){
            log.info(&quot;afterThrow &quot; + joinPoint + &quot;\t&quot; + ex.getMessage());
        }
    }

}
</code></pre><!---> 

第三步测试：

    public class Tester {

        private final static Log log = LogFactory.getLog(Tester.class);

        public static void main(String[] args) {
            //启动Spring容器
            ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
            //获取service组件
            UserService service = (UserService) context.getBean("userService");
            //以普通的方式调用UserService对象的三个方法
            User user = service.get(1L);
            service.save(user);
            try {
                service.delete(1L);
            } catch (Exception e) {
                if(log.isWarnEnabled()){
                    log.warn("Delete user : " + e.getMessage());
                }
            }
        }
    }

### 0.2 xml配置 ###

    <?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">


        <!-- 系统服务组件的切面Bean -->
<pre><code>    &lt;bean id=&quot;serviceAspect&quot; class=&quot;cn.ysh.studio.spring.aop.aspect.ServiceAspect&quot;/&gt;
    &lt;!-- AOP配置 --&gt;
    &lt;aop:config&gt;
        &lt;!-- 声明一个切面,并注入切面Bean,相当于@Aspect --&gt;
        &lt;aop:aspect id=&quot;simpleAspect&quot; ref=&quot;serviceAspect&quot;&gt;
            &lt;!-- 配置一个切入点,相当于@Pointcut --&gt;
            &lt;aop:pointcut expression=&quot;execution(* cn.ysh.studio.spring.aop.service..*(..))&quot; id=&quot;simplePointcut&quot;/&gt;
            &lt;!-- 配置通知,相当于@Before、@After、@AfterReturn、@Around、@AfterThrowing --&gt;
            &lt;aop:before pointcut-ref=&quot;simplePointcut&quot; method=&quot;before&quot;/&gt;
            &lt;aop:after pointcut-ref=&quot;simplePointcut&quot; method=&quot;after&quot;/&gt;
            &lt;aop:after-returning pointcut-ref=&quot;simplePointcut&quot; method=&quot;afterReturn&quot;/&gt;
            &lt;aop:after-throwing pointcut-ref=&quot;simplePointcut&quot; method=&quot;afterThrow&quot; throwing=&quot;ex&quot;/&gt;
        &lt;/aop:aspect&gt;
    &lt;/aop:config&gt;

&lt;/beans&gt;
</code></pre><p>AOP用起来还是很简单的。就把xml配置好就算完工了。有Advisor和aspect两种方式来完成。如果是用Advisor的话需要实现AfterReturningAdvice，MethodBeforeAdvice，ThrowsAdvice等接口。而如果用aspect的话则不用继承或者实现其他的类，一个普通的类即可。</p>
<h2 id="一．AOP介绍"><a href="#一．AOP介绍" class="headerlink" title="一．AOP介绍"></a>一．AOP介绍</h2><p>软件开发经历了从汇编语言到高级语言和从过程化编程到面向对象编程；前者是为了提高开发效率，而后者则使用了归纳法，把具有共性的东西进行归类并使之模块化，达到便于维护和扩展的目的；如果说面向对象编程可以对业务需求进行很好的分解使之模块化；那么面向切面编程AOP（Aspect-Oriented Programming）则可以对系统需求进行很好的模软件开发经历了从汇编语言到高级语言和从过程化编程到面向对象编程；前者是为了提高开发效率，而后者则使用了归纳法，把具有共性的东西进行归类并使之模块化，达到便于维护和扩展的目的；如果说面向对象编程可以对业务需求进行很好的分解使之模块化；那么面向切面编程AOP（Aspect-Oriented Programming）则可以对系统需求进行很好的模块组织，简化系统需求和实现之间的对比关系，是对OOP思想的一种补充；块组织，简化系统需求和实现之间的对比关系，是对OOP思想的一种补充。</p>
<p>举个例子来说明一下吧！现在系统中有很多的业务方法，如上传产品信息、修改产品信息、发布公司库等；现在需要对这些方法的执行做性能监控，看每个业务方法的执行时间；在不改变原业务代码的基础上，也许我们会这么做。</p>
<p>Offer接口：</p>
<pre><code>package edu.zju.cs.lyp.Spring_aop;

public interface IOffer {
    public void postOffer();
    public void modifyOffer();
}
</code></pre><p>Offer实现：</p>
<pre><code>package edu.zju.cs.lyp.Spring_aop;

public class OfferImpl implements IOffer {
    public void postOffer() {
        System.out.println(&quot;post offer&quot;);
    }

    public void modifyOffer() {
        System.out.println(&quot;modify offer&quot;);
    }
}
</code></pre><p>工具类：</p>
<pre><code>package edu.zju.cs.lyp.Spring_aop;

public class PerformanceUtil {
    public static long start=0;
    public static long end=0;
    public static void startPerformance(){
        start=System.currentTimeMillis();
    }
    public static void endPerformance(){
        end=System.currentTimeMillis();
        System.out.println(&quot;method use:&quot;+(end-start));
    }
}
</code></pre><p>Offer代理：</p>
<pre><code>package edu.zju.cs.lyp.Spring_aop;

public class OfferProxy implements IOffer {

    private IOffer delegate;

    public OfferProxy(IOffer delegate){
        this.delegate=delegate;
    }
    public void postOffer() {
        PerformanceUtil.startPerformance();
        delegate.postOffer();
        PerformanceUtil.endPerformance();
    }

    public void modifyOffer() {
        PerformanceUtil.startPerformance();
        delegate.modifyOffer();
        PerformanceUtil.endPerformance();
    }

}
</code></pre><p>Offer测试：</p>
<pre><code>package edu.zju.cs.lyp.Spring_aop;

public class TestProxy {
    public static void main(String[] args) {
        IOffer offer= new OfferProxy(new OfferImpl());
        offer.postOffer();
        offer.modifyOffer();
    }
}
</code></pre><p>输出：</p>
<pre><code>post offer
method use:1
modify offer
method use:0
</code></pre><p>上面的例子中，OfferProxy实现了IOffer，而所有的业务实现均委托给其成员offer；可以想像，这应该就是最简单的AOP的实现了；但这种方式会存在一个问题：如果有非常多的这种业务对象需要性能监控，我们就需要写同样多的XyzProxy来满足需求，这也是非常巨大的工作量。</p>
<h2 id="二．-代理模式"><a href="#二．-代理模式" class="headerlink" title="二．    代理模式"></a>二．    代理模式</h2><p>代理模式中，存在一个称为ProxyObject的代理对象和RealObject的真实对象，它们都实现了相同的接口；在调用的地方持有ProxyObject的实例，当调用request()方法时，ProxyObject可以在执行RealObject.request()前后做一些特定的业务，甚至不调用RealObject.request()方法。</p>
<p>目前实现代理模式的方式有两种：基于JDK的动态代理和基于CGLIB字节码的代理。</p>
<h3 id="2-1-JDK动态代理"><a href="#2-1-JDK动态代理" class="headerlink" title="2.1 JDK动态代理"></a>2.1 JDK动态代理</h3><p>JDK动态代理，顾名思义，是基于JDK的反射(reflect)机制；在JDK中，提供了InvocationHandler这个接口。</p>
<p>注释如下：</p>
<pre><code>InvocationHandler is the interface implemented by the invocation handler of a proxy instance.
Each proxy instance has an associated invocation handler. When a method is invoked on a proxy instance, the method invocation is encoded and dispatched to the invoke method of its invocation handler.
</code></pre><p>意思是说：该接口由被代理对象的handler所实现；当调用代理对象的方法时，该方法调用将被编码，然后交给代理对象的invoke方法去执行。<br>因此上面的代码可以改写成如下所示：</p>
<p>实现：</p>
<pre><code>package edu.zju.cs.lyp.Spring_aop;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

public class ProxyFactory implements InvocationHandler {
    private Object delegate;

    public Object bind(Object delegate){
        this.delegate= delegate;
        return Proxy.newProxyInstance(delegate.getClass().getClassLoader(), 
                delegate.getClass().getInterfaces(), this);
    }

    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        PerformanceUtil.startPerformance();
        Object result=null;
        try {
            result=method.invoke(delegate, args);
        } catch (Exception e) {
            // TODO: handle exceptions
        }
        PerformanceUtil.endPerformance();
        return result;
    }

}
</code></pre><p>测试：</p>
<pre><code>package edu.zju.cs.lyp.Spring_aop;

public class TestJDKProxy {
    public static void main(String[] args) {
        IOffer offer = (IOffer) new ProxyFactory().bind(new OfferImpl());
        offer.postOffer();
        offer.modifyOffer();
    }
}
</code></pre><p>结果：</p>
<pre><code>post offer
method use:1
modify offer
method use:0
</code></pre><p>通过这种方式，你不需要为针对每一个业务写一个代理对象，就可以很轻松地完成你的需求；但也许你已经注意到了，JDK的动态代理，在创建代理对象(上面红色代码部分)时，被代理的对象需要实现接口(即面向接口编程)；</p>
<h3 id="2-2CGLIB代理方式"><a href="#2-2CGLIB代理方式" class="headerlink" title="2.2CGLIB代理方式"></a>2.2CGLIB代理方式</h3><p>如果目标对象没有实现任何接口，那怎么办呢？不用担心，你可以用CGLIB来实现代理。</p>
<p>实现：</p>
<pre><code>package edu.zju.cs.lyp.Spring_aop;

import java.lang.reflect.Method;

import org.springframework.cglib.proxy.Enhancer;
import org.springframework.cglib.proxy.MethodInterceptor;
import org.springframework.cglib.proxy.MethodProxy;


public class CglibProxyFactory  implements MethodInterceptor{

    private Object delegate;

    public Object bind(Object delegate){
        this.delegate=delegate;
        Enhancer enhancer= new Enhancer();
        enhancer.setSuperclass(delegate.getClass());
        enhancer.setCallback(this);
        return enhancer.create();
    }
    public Object intercept(Object object, Method method, Object[] args, MethodProxy proxy) throws Throwable {
        PerformanceUtil.startPerformance();
        Object o =proxy.invoke(this.delegate, args);
        PerformanceUtil.endPerformance();
        return o;
    }

}
</code></pre><p>测试类：</p>
<pre><code>package edu.zju.cs.lyp.Spring_aop;

public class TestCglibProxy {
    public static void main(String[] args) {
        DefaultOffer defaultOffer= (DefaultOffer) new CglibProxyFactory().bind(new DefaultOffer());
        defaultOffer.postOffer();
        defaultOffer.modifyOffer();
    }
}
</code></pre><p>测试结果：</p>
<pre><code>post offer
method use:20
modify offer
method use:0
</code></pre><p>使用CGLIB创建的代理对象，其实就是继承了要代理的目标类，然后对目标类中所有非final方法进行覆盖，但在覆盖方法时会添加一些拦截代码(上面CglibProxyFactory类中的intercept方法)。</p>
<h2 id="三．-Spring-AOP-实现"><a href="#三．-Spring-AOP-实现" class="headerlink" title="三．    Spring AOP 实现"></a>三．    Spring AOP 实现</h2><h3 id="3-1-Spring-AOP-几个基本概念"><a href="#3-1-Spring-AOP-几个基本概念" class="headerlink" title="3.1 Spring AOP 几个基本概念"></a>3.1 Spring AOP 几个基本概念</h3><p>Spring AOP jar包：<strong>spring-aop-4.2.5.release.jar</strong></p>
<p>Spring AOP中的几个基本概念，每次学习AOP都被这几个概念折腾的很不爽，我们在这里再把这几个概念描述一遍，力争把这几个概念搞清，在每次review这块内容的时候可以很快上手。</p>
<ol>
<li>切面(Aspect)：切面就是一个关注点的模块化，如事务管理、日志管理、权限管理等；</li>
<li>连接点(Joinpoint)：程序执行时的某个特定的点，在Spring中就是一个方法的执行；</li>
<li>通知(Advice)：通知就是在切面的某个连接点上执行的操作，也就是事务管理、日志管理等；</li>
<li>切入点(Pointcut)：切入点就是描述某一类选定的连接点，也就是指定某一类要织入通知的方法；</li>
<li>目标对象(Target)：就是被AOP动态代理的目标对象；</li>
</ol>
<p>用一张图来形象地表达AOP的概念及其关系如下：</p>
<p><img src="http://i.imgur.com/SoF1QtC.png" alt=""></p>
<h3 id="3-2-Spring-AOP-中切入点、通知、切面的实现"><a href="#3-2-Spring-AOP-中切入点、通知、切面的实现" class="headerlink" title="3.2 Spring AOP 中切入点、通知、切面的实现"></a>3.2 Spring AOP 中切入点、通知、切面的实现</h3><p>理解了上面的几个概念后，我们分别来看看Spring AOP是如何实现这些概念的；</p>
<h4 id="3-2-1-切入点-Pointcut"><a href="#3-2-1-切入点-Pointcut" class="headerlink" title="3.2.1.切入点(Pointcut)"></a>3.2.1.切入点(Pointcut)</h4><p>它定义了哪些连接点需要被织入横切逻辑；在Java中，连接点对应哪些类(接口)的方法。因此，我们都能猜到，所谓的切入点，就是定义了匹配哪些娄的哪些方法的一些规则，可以是静态的基于类(方法)名的值匹配，也可以是基于正则表达式的模式匹配。</p>
<p>来看看Spring AOP Pointcut相关的类图：</p>
<p><img src="http://i.imgur.com/0Fpm5dB.png" alt=""></p>
<p>在Pointcut接口的定义中，也许你已经想到了，ClassFilter是类过滤器，它定义了哪些类名需要拦截；典型的两个实现类为TypePatternClassFilter和TrueClassFilter(所有类均匹配)；而MethodMatcher为方法匹配器，定义哪些方法需要拦截。</p>
<p>在上面的类图中：</p>
<ul>
<li>StaticMethodMatch与DynamicMethodMatch的区别是后者在运行时会依据方法的参数值进行匹配。</li>
<li>NameMatchMethodPointCut根据指定的mappedNames来匹配方法。</li>
<li>AbstractRegexpMethodPointCut根据正则表达式来匹配方法</li>
</ul>
<p>类图中部分代码实现：</p>
<p>MethodMatcher.class:</p>
<pre><code>package org.springframework.aop;

import java.lang.reflect.Method;

public abstract interface MethodMatcher {
    public static final MethodMatcher TRUE = TrueMethodMatcher.INSTANCE;

    public abstract boolean matches(Method paramMethod, Class&lt;?&gt; paramClass);

    public abstract boolean isRuntime();

    public abstract boolean matches(Method paramMethod, Class&lt;?&gt; paramClass, Object[] paramArrayOfObject);
}
</code></pre><p>StaticMethodMatcher.class:</p>
<pre><code>package org.springframework.aop.support;

import java.lang.reflect.Method;
import org.springframework.aop.MethodMatcher;

public abstract class StaticMethodMatcher implements MethodMatcher {
    public final boolean isRuntime() {
        return false;
    }

    public final boolean matches(Method method, Class&lt;?&gt; targetClass, Object[] args) {
        throw new UnsupportedOperationException(&quot;Illegal MethodMatcher usage&quot;);
    }
}
</code></pre><p>DynamicMethodMatcher.class:</p>
<pre><code>package org.springframework.aop.support;

import java.lang.reflect.Method;
import org.springframework.aop.MethodMatcher;

public abstract class DynamicMethodMatcher implements MethodMatcher {
    public final boolean isRuntime() {
        return true;
    }

    public boolean matches(Method method, Class&lt;?&gt; targetClass) {
        return true;
    }
}
</code></pre><p>Pointcut.class:</p>
<pre><code>package org.springframework.aop;

public abstract interface Pointcut {
    public static final Pointcut TRUE = TruePointcut.INSTANCE;

    public abstract ClassFilter getClassFilter();

    public abstract MethodMatcher getMethodMatcher();
}
</code></pre><h4 id="3-2-2-通知-Advice"><a href="#3-2-2-通知-Advice" class="headerlink" title="3.2.2.通知(Advice)"></a>3.2.2.通知(Advice)</h4><p>通知定义了具体的横切逻辑。在Spring中，存在两种类型的Advice，即per-class和per-instance的Advice。</p>
<p>所谓per-class，即该类型的Advice只提供方法拦截，不会为目标对象保存任何状态或者添加新的特性，它也是我们最常见的Advice。下面是per-class的类图：</p>
<p><img src="http://i.imgur.com/tGVnfQi.png" alt=""></p>
<ul>
<li>BeforeAdvice：在连接点前执行的横切逻辑。</li>
<li>AfterReturningAdvice：在连接点执行后，再执行横切逻辑。</li>
<li>AfterAdvice：一般由程序自己实现，当抛出异常后，执行横切逻辑。</li>
<li>AroundAdvice：Spring AOP中并没有提供这个接口，而是采用了AOP Alliance的MethodInteceptor接口；通过看AfterReturningAdvice的源码我们知道，它是不能更改连接点所在方法的返回值的(更改引用)；但使用的MethodInteceptor，所有的事情，都不在话下。</li>
</ul>
<p>部分源码介绍：</p>
<p>AfterAdvice,Advice两个接口是空的</p>
<p>AfterReturningAdvice.class</p>
<pre><code>package org.springframework.aop;

import java.lang.reflect.Method;

public abstract interface AfterReturningAdvice extends AfterAdvice {
    public abstract void afterReturning(Object paramObject1, Method paramMethod, Object[] paramArrayOfObject,
            Object paramObject2) throws Throwable;
}
</code></pre><p>MethodBeforeAdvice.class</p>
<pre><code>import java.lang.reflect.Method;

public abstract interface MethodBeforeAdvice extends BeforeAdvice {
    public abstract void before(Method paramMethod, Object[] paramArrayOfObject, Object paramObject) throws Throwable;
}
</code></pre><p>MethodInterceptor.class</p>
<pre><code>package org.aopalliance.intercept;

public abstract interface MethodInterceptor extends Interceptor {
    public abstract Object invoke(MethodInvocation paramMethodInvocation) throws Throwable;
}
</code></pre><p>在上面的类图中，还有两种类没有介绍，那就是 <strong><em>AdviceAdapter 和 </em></strong>AdviceInteceptor.结构如图所示<br><img src="http://i.imgur.com/0ooNuhA.png" alt=""></p>
<p>我们以AfterReturningAdviceInterceptor为例来说明：</p>
<pre><code>package org.springframework.aop.framework.adapter;

import java.io.Serializable;
import org.aopalliance.intercept.MethodInterceptor;
import org.aopalliance.intercept.MethodInvocation;
import org.springframework.aop.AfterAdvice;
import org.springframework.aop.AfterReturningAdvice;
import org.springframework.util.Assert;

public class AfterReturningAdviceInterceptor implements MethodInterceptor, AfterAdvice, Serializable {
    private final AfterReturningAdvice advice;

    public AfterReturningAdviceInterceptor(AfterReturningAdvice advice) {
        Assert.notNull(advice, &quot;Advice must not be null&quot;);
        this.advice = advice;
    }

    public Object invoke(MethodInvocation mi) throws Throwable {
        Object retVal = mi.proceed();
        this.advice.afterReturning(retVal, mi.getMethod(), mi.getArguments(), mi.getThis());
        return retVal;
    }
}
</code></pre><p>该类实现了MethodInterceptor和AfterAdvice接口，同时构造函数中还有一个AfterReturningAdvice实例的参数；这个类存在的作用是为了什么呢？Spring AOP把所有的Advice都适配成了MethodInterceptor，统一的好处是方便后面横切逻辑的执行(参看下一节)，适配的工作即由<em>*</em>AdviceAdapter完成；</p>
<p>Spring AOP所谓的AfterReturningAdvice，通过适配成MethodInterceptor后，其实就是在invoke方法中，先执行目标对象的方法，再执行的AfterReturningAdvice所定义的横切逻辑。</p>
<p>对于per-instance的Advice，目前只有一种实现，就是Introduction，使用的场景比较少。</p>
<p><img src="http://i.imgur.com/EmLqrLw.png" alt=""></p>
<h4 id="3-2-3-切面-Aspect"><a href="#3-2-3-切面-Aspect" class="headerlink" title="3.2.3.切面(Aspect)"></a>3.2.3.切面(Aspect)</h4><p>在Spring中，Advisor就是切面；但与通常的Aspect不同的是，Advisor通常只有一个Pointcut和一个Advice，而Aspect则可以包含多个Pointcut和多个Advice，因此Advisor是一种特殊的Aspect。</p>
<p>接下来看下per-class Advisor的类图：</p>
<p><img src="http://i.imgur.com/rELgifs.png" alt=""></p>
<p>继承关系如下：</p>
<p><img src="http://i.imgur.com/oSYJlw4.png" alt=""></p>
<p>Advisor包含一个Pointcut和一个Advisor；在AbstractGenericPointcutAdvisor中，持有一个Advice的引用；下面的几个实现，均是针对前面提到的几种不同的Pointcut的实现。</p>
<h3 id="3-3-Spring-AOP实现基本线索"><a href="#3-3-Spring-AOP实现基本线索" class="headerlink" title="3.3 Spring AOP实现基本线索"></a>3.3 Spring AOP实现基本线索</h3><p>我们选择ProxyFactoryBean作为入口点和分析的开始。ProxyFactoryBean是在Spring IoC环境中，创建AOP应用的最底层方法，从中，可以看到一条实现AOP的基本线索。</p>
<p>所有的逻辑从以下的方法开始,我们主要针对单例的代理对象的生成：</p>
<pre><code>public Object getObject() throws BeansException {
    //这里初始化通知器链
    initializeAdvisorChain();
    if (isSingleton()) {
        //根据定义需要生成单例的proxy
        return getSingletonInstance();
    }

    if (this.targetName == null) {
        this.logger.warn(
                &quot;Using non-singleton proxies with singleton targets is often undesirable. Enable prototype proxies by setting the &apos;targetName&apos; property.&quot;);
    }
    //这里根据定义需要生成prototype类型的proxy
    return newPrototypeInstance();
}
</code></pre><p>下面我们深入到SpringAOP核心代码的内部，看看代理对象的生成机制，拦截器横切逻辑以及织入的实现。</p>
<pre><code>private synchronized Object getSingletonInstance() {
        if (this.singletonInstance == null) {
            //返回具体的目标对象，就是被代理的对象
            this.targetSource = freshTargetSource();
            if ((this.autodetectInterfaces) &amp;&amp; (getProxiedInterfaces().length == 0) &amp;&amp; (!(isProxyTargetClass()))) {
                //从targetsource中获取目标对象的class
                Class targetClass = getTargetClass();
                if (targetClass == null) {
                    throw new FactoryBeanNotInitializedException(&quot;Cannot determine target class for proxy&quot;);
                }
                //这里设置代理对象的借口
                setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader));
            }
            //这里使用proxyfactory来生成我们需要的proxy。
            super.setFrozen(this.freezeProxy);
            this.singletonInstance = getProxy(createAopProxy());
        }
        return this.singletonInstance;
    }
</code></pre><p>ProxyFactoryBean是AdvisedSupport的子类，Spring使用AopProxy接口把AOP代理的实现与框架的其他部分分离开来。在AdvisedSupport中通过这样的方式来得到AopProxy,当然这里需要得到AopProxyFactory的帮助 ，从JDK或者cglib中得到想要的代理对象：</p>
<pre><code>protected final synchronized AopProxy createAopProxy() {
        if (!(this.active)) {
            activate();
        }
        return getAopProxyFactory().createAopProxy(this);
    }
</code></pre><p>getAopProxyFactory()获取ProxyCreatorSupport的属性aopProxyFactory</p>
<pre><code>public AopProxyFactory getAopProxyFactory() {
        return this.aopProxyFactory;
    }
</code></pre><p>该属性被默认初始化为DefaultAopProxyFactory对象。</p>
<pre><code>public ProxyCreatorSupport() {
    this.aopProxyFactory = new DefaultAopProxyFactory();
}
public ProxyCreatorSupport(AopProxyFactory aopProxyFactory) {
        Assert.notNull(aopProxyFactory, &quot;AopProxyFactory must not be null&quot;);
        this.aopProxyFactory = aopProxyFactory;
    }
</code></pre><p>这个DefaultAopProxyFactory是Spring用来生成AopProxy的地方，它包含JDK和Cglib两种实现方式。让我接着往里面看：</p>
<pre><code>/*** Eclipse Class Decompiler plugin, copyright (c) 2016 Chen Chao (cnfree2000@hotmail.com) ***/
package org.springframework.aop.framework;

import java.io.Serializable;
import java.lang.reflect.Proxy;
import org.springframework.aop.SpringProxy;

public class DefaultAopProxyFactory implements AopProxyFactory, Serializable {
    public AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException {
        //做一些判断操作。isoptimize（）是指是否采取进一步的优化，true采用cglib来生成代理。
        //isproxytargetclass决定是否采用基于接口的代理。
        if ((config.isOptimize()) || (config.isProxyTargetClass()) || (hasNoUserSuppliedProxyInterfaces(config))) {
            Class targetClass = config.getTargetClass();
            if (targetClass == null) {
                throw new AopConfigException(
                        &quot;TargetSource cannot determine target class: Either an interface or a target is required for proxy creation.&quot;);
            }
            //如果目标对象实现的接口，则采用jdk动态代理来生成proxy
            if ((targetClass.isInterface()) || (Proxy.isProxyClass(targetClass))) {
                return new JdkDynamicAopProxy(config);
            }
            //如果target不是接口的实现的话，返回cglib类型的aopproxy
            return new ObjenesisCglibAopProxy(config);
        }
        //不满足最开始的判断 直接使用jdk动态代理
        return new JdkDynamicAopProxy(config);
    }

    private boolean hasNoUserSuppliedProxyInterfaces(AdvisedSupport config) {
        Class[] ifcs = config.getProxiedInterfaces();
        return ((ifcs.length == 0) || ((ifcs.length == 1) &amp;&amp; (SpringProxy.class.isAssignableFrom(ifcs[0]))));
    }
}
</code></pre><p>可以看到其中的代理对象可以由JDK或者Cglib来生成，JdkDynamicAopProxy类和Cglib2AopProxy都实现的是AopProxy的接口，我们进入JdkDynamicAopProxy实现中看看Proxy是怎样生成的：</p>
<pre><code>public JdkDynamicAopProxy(AdvisedSupport config) throws AopConfigException {
        Assert.notNull(config, &quot;AdvisedSupport must not be null&quot;);
        if ((config.getAdvisors().length == 0) &amp;&amp; (config.getTargetSource() == AdvisedSupport.EMPTY_TARGET_SOURCE)) {
            throw new AopConfigException(&quot;No advisors and no TargetSource specified&quot;);
        }
        this.advised = config;
    }

    public Object getProxy() {
        return getProxy(ClassUtils.getDefaultClassLoader());
    }

    public Object getProxy(ClassLoader classLoader) {
        if (logger.isDebugEnabled()) {
            logger.debug(&quot;Creating JDK dynamic proxy: target source is &quot; + this.advised.getTargetSource());
        }
        //根据advised中的配置信息，获取proxy需要代理的接口、放入proxiedInterfaces中。
        Class[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(this.advised);
        findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);
        //这里我们调用jdk proxy 来生成需要的proxy实例
        return Proxy.newProxyInstance(classLoader, proxiedInterfaces, this);
    }
</code></pre><p>再来看cglib代理</p>
<pre><code>class ObjenesisCglibAopProxy extends CglibAopProxy {
    private static final Log logger = LogFactory.getLog(ObjenesisCglibAopProxy.class);

    private static final SpringObjenesis objenesis = new SpringObjenesis();

    public ObjenesisCglibAopProxy(AdvisedSupport config) {
        super(config);
    }

    protected Object createProxyClassAndInstance(Enhancer enhancer, Callback[] callbacks) {
        Class proxyClass = enhancer.createClass();
        Object proxyInstance = null;

        if (objenesis.isWorthTrying()) {
            try {
                proxyInstance = objenesis.newInstance(proxyClass, enhancer.getUseCache());
            } catch (Throwable ex) {
                logger.debug(&quot;Unable to instantiate proxy using Objenesis, falling back to regular proxy construction&quot;,
                        ex);
            }

        }

        if (proxyInstance == null) {
            try {
                proxyInstance = (this.constructorArgs != null)
                        ? proxyClass.getConstructor(this.constructorArgTypes).newInstance(this.constructorArgs)
                        : proxyClass.newInstance();
            } catch (Throwable ex) {
                throw new AopConfigException(
                        &quot;Unable to instantiate proxy using Objenesis, and regular proxy instantiation via default constructor fails as well&quot;,
                        ex);
            }

        }

        ((Factory) proxyInstance).setCallbacks(callbacks);
        return proxyInstance;
    }
}
</code></pre><p>继承了CglibAopProxy。下面的和最开始的例子比较，是不是很熟悉。</p>
<pre><code>public Object getProxy(ClassLoader classLoader) {
        if (logger.isDebugEnabled()) {
            logger.debug(&quot;Creating CGLIB proxy: target source is &quot; + this.advised.getTargetSource());
        }
        try {
            Class rootClass = this.advised.getTargetClass();
            Assert.state(rootClass != null, &quot;Target class must be available for creating a CGLIB proxy&quot;);

            Class proxySuperClass = rootClass;
            if (ClassUtils.isCglibProxyClass(rootClass)) {
                proxySuperClass = rootClass.getSuperclass();
                Class[] additionalInterfaces = rootClass.getInterfaces();
                for (Class additionalInterface : additionalInterfaces) {
                    this.advised.addInterface(additionalInterface);
                }

            }

            validateClassIfNecessary(proxySuperClass, classLoader);

            Enhancer enhancer = createEnhancer();
            if (classLoader != null) {
                enhancer.setClassLoader(classLoader);
                if ((classLoader instanceof SmartClassLoader)
                        &amp;&amp; (((SmartClassLoader) classLoader).isClassReloadable(proxySuperClass))) {
                    enhancer.setUseCache(false);
                }
            }
            enhancer.setSuperclass(proxySuperClass);
            enhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(this.advised));
            enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);
            enhancer.setStrategy(new ClassLoaderAwareUndeclaredThrowableStrategy(classLoader));

            Callback[] callbacks = getCallbacks(rootClass);
            Class[] types = new Class[callbacks.length];
            int k;
            for (int k = 0; k &lt; types.length; ++k) {
                types[k] = callbacks[k].getClass();
            }

            enhancer.setCallbackFilter(new ProxyCallbackFilter(this.advised.getConfigurationOnlyCopy(),
                    this.fixedInterceptorMap, this.fixedInterceptorOffset));
            enhancer.setCallbackTypes(types);

            return createProxyClassAndInstance(enhancer, callbacks);
        } catch (CodeGenerationException ex) {
            throw new AopConfigException(&quot;Could not generate CGLIB subclass of class [&quot; + this.advised.getTargetClass()
                    + &quot;]: &quot; + &quot;Common causes of this problem include using a final class or a non-visible class&quot;, ex);
        } catch (IllegalArgumentException ex) {
            throw new AopConfigException(&quot;Could not generate CGLIB subclass of class [&quot; + this.advised.getTargetClass()
                    + &quot;]: &quot; + &quot;Common causes of this problem include using a final class or a non-visible class&quot;, ex);
        } catch (Exception ex) {
            throw new AopConfigException(&quot;Unexpected AOP exception&quot;, ex);
        }
    }
</code></pre><p>用Proxy包装target之后，通过ProxyFactoryBean得到对其方法的调用就被Proxy拦截了， <strong><em>ProxyFactoryBean的getObject()方法得到的实际上是一个Proxy了，target对象已经被封装了。</em></strong>对 ProxyFactoryBean这个工厂bean而言，其生产出来的对象是封装了目标对象的代理对象。</p>
<h3 id="3-4拦截器的作用"><a href="#3-4拦截器的作用" class="headerlink" title="3.4拦截器的作用"></a>3.4拦截器的作用</h3><p>前面分析了SpringAOP实现中得到Proxy对象的过程，接下来我们去探寻Spring AOP中拦截器链是怎样被调用的，也就是Proxy模式是怎样起作用的。<br>还记得在JdkDynamicAopProxy中生成Proxy对象的时候，有一句这样的代码吗？</p>
<pre><code>return Proxy.newProxyInstance(classLoader, proxiedInterfaces, this);
</code></pre><p>这里我们的JdkDynamicAopProxy实现了InvocationHandler这个接口，<code>final class JdkDynamicAopProxy implements AopProxy, InvocationHandler, Serializable</code>.</p>
<p>this参数对应的是InvocationHandler对象,也就是说当 Proxy对象的函数被调用的时候，InvocationHandler的invoke方法会被作为回调函数调用.</p>
<p>我们来看一下动态代理中invoke函数的实现：</p>
<pre><code>public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        Object oldProxy = null;
        boolean setProxyContext = false;

        TargetSource targetSource = this.advised.targetSource;
        Class targetClass = null;
        Object target = null;
        try {
            Object localObject1;
            //目标对象未实现equals方法
            if ((!(this.equalsDefined)) &amp;&amp; (AopUtils.isEqualsMethod(method))) {
                localObject1 = Boolean.valueOf(equals(args[0]));
                return localObject1;
            }
            //目标对象未实现hashcode方法
            if ((!(this.hashCodeDefined)) &amp;&amp; (AopUtils.isHashCodeMethod(method))) {
                localObject1 = Integer.valueOf(hashCode());
                return localObject1;
            }
            //opaque顺序控制生成代理对象是否可以强制转换类型为advised，默认为false。
            //z这里针对opaque为true且代理的为借口自身，并且代理类为advised借口的子接口，不进行代理操作。
            if ((!(this.advised.opaque)) &amp;&amp; (method.getDeclaringClass().isInterface())
                    &amp;&amp; (method.getDeclaringClass().isAssignableFrom(Advised.class))) {
            //这里就是目标对象的调用
                localObject1 = AopUtils.invokeJoinpointUsingReflection(this.advised, method, args);
                return localObject1;
            }
            //设置exposeproxy为true，让springaop框架将生成的当前代理对象绑定到threadlocal
            if (this.advised.exposeProxy) {
                oldProxy = AopContext.setCurrentProxy(proxy);
                setProxyContext = true;
            }
            //这里是得到目标对象，目标对象可能来自一个示例池或者一个简单的java对象。
            target = targetSource.getTarget();
            if (target != null) {
                targetClass = target.getClass();
            }
            //重要！！！：：：这里获得定义好的拦截器链
            List chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);
            Object retVal;
            Object retVal;
            //如果没有拦截器，直接调用目标的对象方法，不创建methodinvocation
            if (chain.isEmpty()) {
                Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);
                retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse);
            } else {
                //如果有拦截器的设定，那么需要调用拦截器之后才能调用目标对象的相应的方法。
                //通过构造一个ReflectiveMethodInvocation来实现
                MethodInvocation invocation = new ReflectiveMethodInvocation(proxy, target, method, args, targetClass,
                        chain);
                //通过ReflectiveMethodInvocation来调用拦截器连和相应的目标方法。
                //在proceed方法内部实现了自身的递归调用来便利整个拦截器链。

                retVal = invocation.proceed();
            }

            Class returnType = method.getReturnType();
            if ((retVal != null) &amp;&amp; (retVal == target) &amp;&amp; (returnType.isInstance(proxy))
                    &amp;&amp; (!(RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())))) {
                retVal = proxy;
            } else if ((retVal == null) &amp;&amp; (returnType != Void.TYPE) &amp;&amp; (returnType.isPrimitive())) {
                throw new AopInvocationException(
                        &quot;Null return value from advice does not match primitive return type for: &quot; + method);
            }

            Object localObject2 = retVal;

            return localObject2;
        } finally {
            if ((target != null) &amp;&amp; (!(targetSource.isStatic()))) {
                //释放gettarget方法获取的target对象，和targetsource实现有关
                targetSource.releaseTarget(target);
            }
            if (setProxyContext) {
                AopContext.setCurrentProxy(oldProxy);
            }
        }
    }
</code></pre><p>上面所说的目标对象方法的调用，是通过AopUtils的方法调用，使用反射机制来对目标对象的方法进行的;</p>
<pre><code>public static Object invokeJoinpointUsingReflection(Object target, Method method, Object[] args) throws Throwable {
    try {
        ReflectionUtils.makeAccessible(method);
        return method.invoke(target, args);
    } catch (InvocationTargetException ex) {
        throw ex.getTargetException();
    } catch (IllegalArgumentException ex) {
        throw new AopInvocationException(&quot;AOP configuration seems to be invalid: tried calling method [&quot; + method
                + &quot;] on target [&quot; + target + &quot;]&quot;, ex);
    } catch (IllegalAccessException ex) {
        throw new AopInvocationException(&quot;Could not access method [&quot; + method + &quot;]&quot;, ex);
    }
}
</code></pre><p>接下来，我们来看具体的ReflectiveMethodInvocation中proceed()方法的实现，也就是拦截器链的实现机制：</p>
<pre><code>public Object proceed() throws Throwable {
        //重点！！！currentInterceptorIndex初始化值为-1，首先判断长度是否为0，为0直接调用目标对象的方法。
        if (this.currentInterceptorIndex == this.interceptorsAndDynamicMethodMatchers.size() - 1) {
            return invokeJoinpoint();
        }

        Object interceptorOrInterceptionAdvice = this.interceptorsAndDynamicMethodMatchers
                .get(++this.currentInterceptorIndex);

        if (interceptorOrInterceptionAdvice instanceof InterceptorAndDynamicMethodMatcher) {
            //匹配逻辑，只要方法匹配就调用拦截器，不匹配，跳过这个拦截器，调用下一个。
            InterceptorAndDynamicMethodMatcher dm = (InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;
            //需要注意一点，我们这里虽然反悔了，但是匹配到的拦截器自身的invoke方法还是会调用的，
            //继续遍历拦截器链
            if (dm.methodMatcher.matches(this.method, this.targetClass, this.arguments)) {
                return dm.interceptor.invoke(this);
            }
            //没匹配， 调用下一个拦截器，重复上面逻辑
            return proceed();
        }
        //如果是MethodInterceptor，我们调用invoke方法，主要为了兼容原始aop联盟的东西，
        return ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(this);
    }
</code></pre><p>从上面的分析我们看到了Spring AOP拦截机制的基本实现，比如Spring怎样得到Proxy，怎样利用JAVA Proxy以及反射机制对用户定义的拦截器链进行处理。</p>
<h3 id="3-5织入的实现"><a href="#3-5织入的实现" class="headerlink" title="3.5织入的实现"></a>3.5织入的实现</h3><p>在上面调用拦截器的时候，经过一系列的注册，适配的过程以后，拦截器在拦截的时候，会调用到预置好的一个通知适配器，设置通知拦截器，这是一系列Spring设计好为通知服务的类的一个，是最终完成通知拦截和实现的地方，例如对 MethodBeforeAdviceInterceptor的实现是这样的：</p>
<pre><code>public class MethodBeforeAdviceInterceptor implements MethodInterceptor, Serializable {
    private MethodBeforeAdvice advice;

    public MethodBeforeAdviceInterceptor(MethodBeforeAdvice advice) {
        Assert.notNull(advice, &quot;Advice must not be null&quot;);
        this.advice = advice;
    }

    public Object invoke(MethodInvocation mi) throws Throwable {
        this.advice.before(mi.getMethod(), mi.getArguments(), mi.getThis());
        //这个invoke方法是拦截器的回调方法，会在代理对象的方法被调用的时候出发回调
        return mi.proceed();
    }
}
</code></pre><p>可以看到通知适配器将advice适配成Interceptor以后，会调用advice的before方法去执行横切逻辑。这样就成功的完成了before通知的织入。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-AOP-源码分析&quot;&gt;&lt;a href=&quot;#Spring-AOP-源码分析&quot; class=&quot;headerlink&quot; title=&quot;Spring AOP 源码分析&quot;&gt;&lt;/a&gt;Spring AOP 源码分析&lt;/h1&gt;&lt;h2 id=&quot;零-Spring-aop的
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="AOP" scheme="http://yoursite.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>数据仓库三种变化类型</title>
    <link href="http://yoursite.com/2016/10/28/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%89%E7%A7%8D%E5%8F%98%E5%8C%96%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2016/10/28/数据仓库三种变化类型/</id>
    <published>2016-10-28T03:50:06.000Z</published>
    <updated>2016-11-02T17:26:00.248Z</updated>
    
    <content type="html"><![CDATA[<p>类型1：对于数据元素的历史记录不重要的时候使用，当一个数据源变化的时候，对应的维度属性将会被覆盖，</p>
<p>类型2：当变化的数据元素历史记录也很重要的时候采用，源数据的元素变化的时候，会在维度表中插入新的一行来满足需求。</p>
<p>类型3：当所有分析伴随新值或者旧值的变化前后记录的事实时，需要使用到变化类型3.使用类型1和类型2是不能够解决的。<br>比如：分析所有事实的情况，使用的是新值记录变化发生前后的情况。</p>
<p>###3种事实表</p>
<p>1.事务事实表<br>描述事件，获取事件，或行为的细节</p>
<p>2.事务表快照<br>描述状态，获取事件或行为的效果</p>
<p>3.累计快照<br>累计快照可以跟踪业务流程的一个或多个步骤的时间间隔。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类型1：对于数据元素的历史记录不重要的时候使用，当一个数据源变化的时候，对应的维度属性将会被覆盖，&lt;/p&gt;
&lt;p&gt;类型2：当变化的数据元素历史记录也很重要的时候采用，源数据的元素变化的时候，会在维度表中插入新的一行来满足需求。&lt;/p&gt;
&lt;p&gt;类型3：当所有分析伴随新值或者旧
    
    </summary>
    
      <category term="数据仓库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
    
      <category term="数据仓库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JVM七-虚拟机类加载机制</title>
    <link href="http://yoursite.com/2016/10/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E4%B8%83-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2016/10/24/深入理解JVM七-虚拟机类加载机制/</id>
    <published>2016-10-24T10:59:48.000Z</published>
    <updated>2016-12-10T16:13:35.638Z</updated>
    
    <content type="html"><![CDATA[<p>类从被加载到卸载，整个生命周期如下：</p>
<ul>
<li>加载（loading）</li>
<li>连接（验证verification 准备preparation 解析resolution）</li>
<li>初始化（initialization）</li>
<li>使用（using）</li>
<li>卸载（unloading）</li>
</ul>
<p>主动引用，触发类的初始化：</p>
<ul>
<li>1.遇到new getstatic putstatic invokestatic</li>
<li>2.使用java.lang.reflect包的方法对垒进行反射调用。</li>
<li>3.初始化一个类的时候，如果发现父类还没有进行过初始化，则先触发其父类的初始化。</li>
<li>4.当虚拟机启动时，用户需要制定一个要执行的主类，虚拟机则会先初始化这个主类。</li>
<li>5.当使用jdk1.7的动态语言支持时，如果一个java.lang.invoke.methodhandle实例最后解析的结果ref_getstatic ref_putstatic ref_invokestatic 的方法句柄。</li>
</ul>
<p>主要过程参照另一篇blog<br><a href="http://raincoffee.info/2016/09/22/java%E7%B1%BB%E7%9A%84%E8%BF%9E%E6%8E%A5%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/" title="类的加载初始化过程" target="_blank" rel="external">http://raincoffee.info/2016/09/22/java%E7%B1%BB%E7%9A%84%E8%BF%9E%E6%8E%A5%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/</a></p>
<p>###类加载器###</p>
<p>1.类与类加载器<br>比较两个类食肉相等，只能有一个类加载器加载的前提下才有意义。否则，即使这两个类来源于同一个class文件，被同一个虚拟机加载，只要夹在他们的类加载器不同，拿着两个雷一定不同。</p>
<pre><code>package jvm;

import java.io.IOException;
import java.io.InputStream;


/**
 * 
 * @author neuly
 *
 */
public class ClassLoaderTest {
    public static void main(String[] args) throws Exception{
        ClassLoader myloader= new ClassLoader() {
                @Override
                public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException{
                    try {
                        String fileName=name.substring(name.lastIndexOf(&quot;.&quot;)+1)+&quot;.class&quot;;
                        InputStream is= getClass().getResourceAsStream(fileName);
                        if(is==null){
                            return super.loadClass(name);
                        }
                        byte[] b = new byte[is.available()];
                        is.read(b);
                        return defineClass(name, b, 0,b.length);
                    } catch (IOException e) {;; 
                        // TODO: handle exception
                        throw new ClassNotFoundException(name);
                    }

                }
            };
            Object obj =myloader.loadClass(&quot;jvm.ClassLoaderTest&quot;).newInstance();
            System.out.println(obj.getClass());
            System.out.println(obj instanceof jvm.ClassLoaderTest);
    }
}
</code></pre><p>结果 </p>
<pre><code>class jvm.ClassLoaderTest
false
</code></pre><p>代码加载与自己同一路径下的class文件。</p>
<p>###2.双亲委派模型###</p>
<p>自动类加载器<br>↑<br>扩展类加载器<br>↑<br>应用程序类加载器<br>↑<br>自定义类加载器</p>
<p>双亲委派工作过程：如果一个类加载器收到了类加载的请求，他首先不会自己去尝试加载这个类，二十八请求为派给父类加载器去完成。每一个层次的类加载器都是如此，因此所有的加载请求最终都应传送到顶层的启动类加载器中，只有当弗雷加载器反馈自己不能完成这个加载请求时，自加载器才会尝试自己去加载。</p>
<p>###2.破坏双亲委派模型###</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类从被加载到卸载，整个生命周期如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加载（loading）&lt;/li&gt;
&lt;li&gt;连接（验证verification 准备preparation 解析resolution）&lt;/li&gt;
&lt;li&gt;初始化（initialization）&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JVM六-类文件结构</title>
    <link href="http://yoursite.com/2016/10/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E5%85%AD-%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2016/10/24/深入理解JVM六-类文件结构/</id>
    <published>2016-10-24T08:36:18.000Z</published>
    <updated>2016-11-02T17:25:38.764Z</updated>
    
    <content type="html"><![CDATA[<p>class文件是一组以八位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在class文件中，中间没有添加任何分隔符，这使得整个class文件中存储的内容几乎全部都是程序运行的必要数据，没有空隙存在。当需要占用8位字节以上的空间数据时，则会按照高位在前的方式分割成若干个8位字节进行存储。</p>
<p>###class文件结构介绍：</p>
<p>根据java虚拟机规范的规定，class文件格式采用一种类似c语言结构体的伪结构来存储，这种伪结构中只有两种数据类型：无符号数和表。</p>
<p>无符号数：无符号数属于基本的数据类型，以u1,u2,u4,u8来分别代表1个字节，2个字节，4个字节和8个字节的无符号数，无符号数可以用来描述数字、索引引用、数量值，或者按照utf-8编码构成字符串值。</p>
<p>表：表是由多个无符号数或者其他表作为数据项构成的复合数据类型，所有表都习惯性地以“_info“结尾。表用于描述有层次关系的复合结构的数据，整个class文件本质上就是一张表，它由下列数据项构成：</p>
<pre><code>ClassFile {  
    u4 magic;//魔数(0xCAFEBABE)  
    u2 minor_version;//次版本号  
    u2 major_version;//主版本号  
    u2 constant_pool_count;//常量池容量计数值  
    cp_info constant_pool[constant_pool_count-1];//常量池  
    u2 access_flags;//访问标志  
    u2 this_class;//类索引  
    u2 super_class;//父类索引  
    u2 interfaces_count;//接口计数器  
    u2 interfaces[interfaces_count];//接口索引集合  
    u2 fields_count;//字段计数器  
    field_info fields[fields_count];//字段表  
    u2 methods_count;//方法计数器  
    method_info methods[methods_count];//方法表  
    u2 attributes_count;//属性表计数器  
    attribute_info attributes[attributes_count];//属性表集合  
}  
</code></pre><p>无论是无符号数还是表，当需要描述的同一类型但是数量不定的多个数据时，经常会使用一个前置的容量计数器加若干个连续的数据项的形式（比如说一个类可能实现了多个接口，这时候需要一个计数器来指定接口的数量），这时候称这一系列连续的某一类型的数据为某一类型的集合。上面的文件格式是固定的，每个数据项的顺序，占用字节数都是被严格限定的，不允许改变。</p>
<p>1.魔数：class文件头四个字节代表魔数，它的作用是用于确定该文件是一个能被虚拟机接受的class文件,其值为0xCAFEBABE.</p>
<p>2.版本：魔数后四个字节代表class文件的版本号，其中前两个字节代表次版本号，后两个字节代表主版本号。高版本的jdk能向下兼容以前版本的class文件，但不能运行以后版本的class文件。</p>
<p>3.常量池：主版本之后的是常量池入口，常量池是class文件结构中与其他项目关联最多的数据类型，也是占用class文件空间最大的数据项目之一，同时还是在class文件中第一个出现的表类型的数据项目。因为常量池中常量数量不固定，所以在常量池入口前需要放置一个计数器，占用两个字节。比如如果该位置的值为0x0016,那就代表常量池中有21项常量（从1开始），第0项空出来是为了满足后面某些指向常量池的索引值的数据在特定情况下需要表达”不引用任何一个常量池项目“的意思，这种情况就可以把索引置为0来表示。class文件结构只有常量池的容量计数器是从1开始的，其他集合类型都是从0开始的。<br>    常量池中主要存放两类数据：字面量和符号引用；<br>（1）字面量：比如文本字符串，被声明为final的常量值等。<br>（2）符号引用：包括类和接口的权限定名，字段的名称和描述符，方法的名称和描述符。</p>
<p>4.访问标志（access_flags）：常量池之后，紧接着的两个字节代表访问标志，这个标志用于识别一些类或者接口层次的访问信息（比如这个class是否是public是否是final等等)。</p>
<p>5.类索引，父类索引，接口索引：类索引和父类索引都是一个u2类型的数据，而接口索引集合时一组u2类型的数据的集合，class文件中由这三项数据来确定这个类的继承关系。类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名（除了kava.lang.Object以外所有类的父类索引均不为0）。接口索引集合用来描述这个类实现了哪些接口。<br>    类索引和父类索引用两个u2类型的索引值表示，它们各自指向一个类型为CONSTANT_Class_info的类描述符常量，通过CONSTANT_Class_info类型的常量中的索引值可以找到定义在CONSTANT_Utf8_info类型的常量中的全限定名字符串。</p>
<p>6.字段表集合：字段表集合用于描述接口或者类中声明的变量。字段包括了类级变量或者实例级变量，但是不包括方法内部声明的变量。</p>
<p>7.方法表集合：内容跟属性表集合基本一致</p>
<p>8.属性表集合：在class文件、字段表、方法表中都可以携带字节的属性表集合，用于描述某些场景专有的信息。属性表中的数据项目不需要有严格的顺序，java虚拟机在运行时会自动的忽略掉不认识的属性，其中系统预定义了9种虚拟机应该识别的属性，</p>
<p>连接：<br><a href="http://blog.csdn.net/kobejayandy/article/details/39620833" target="_blank" rel="external">http://blog.csdn.net/kobejayandy/article/details/39620833</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;class文件是一组以八位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在class文件中，中间没有添加任何分隔符，这使得整个class文件中存储的内容几乎全部都是程序运行的必要数据，没有空隙存在。当需要占用8位字节以上的空间数据时，则会按照高位在前的方式分割
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
</feed>
