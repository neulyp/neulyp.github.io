<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lyp&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-15T07:30:21.634Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Loren</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ms2—mysql基准测试</title>
    <link href="http://yoursite.com/2017/02/15/ms2%E2%80%94-mysql%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2017/02/15/ms2—-mysql基准测试/</id>
    <published>2017-02-15T07:13:44.000Z</published>
    <updated>2017-02-15T07:30:21.634Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>基准测试是针对系统设计的一种压力测试。通常的目标是为了掌握系统的行为。</p>
<h3 id="为什么需要基准测试"><a href="#为什么需要基准测试" class="headerlink" title="为什么需要基准测试"></a>为什么需要基准测试</h3><p>基准测试是一种压力测试，是唯一方便有效的、可以学习系统在给定负载下会发生什么的一种方法。<br>基准测试的主要问题在于不是真实压力的测试，有很多因素会影响基准测试的准确度。<br>我们只能进行大概的测试，来确定系统大致的余量有多少。</p>
<h3 id="基准测试的策略"><a href="#基准测试的策略" class="headerlink" title="基准测试的策略"></a>基准测试的策略</h3><p>两种主要策略：针对整个系统（集成式）、单独测试MySQL（单组件式）。</p>
<p>测试指标<br>吞吐量：单位时间内的事务处理数<br>响应时间或延迟：任务所需的整体时间<br>并发性：任意时间内有多少同时发生的并发请求，主要关注的是正在工作中的并发操作，或者是同时工作中的线程数或连接数。<br>可扩展性：增加一倍的工作量，是否能获得两倍的效果；增加一倍的资源，是否能增加一倍的吞吐量。</p>
<h3 id="基准测试方法"><a href="#基准测试方法" class="headerlink" title="基准测试方法"></a>基准测试方法</h3><p>努力使测试过程更接近真实应用的情况。</p>
<p>设计和规划基准测试：<br>采用标准的基准测试，还是设计专用的基准测试。</p>
<p>基准测试应该运行多长时间：<br>应该运行足够长的时间，到系统的稳定状态。</p>
<p>获取系统性能和状态：<br>需要记录的数据包括系统状态和性能指标。</p>
<p>获得准确的测试结果</p>
<p>运行基准测试并分析结果：<br>要尽可能使所有测试过程自动化，包括装载数据，系统预热、执行测试，记录结果等。</p>
<h3 id="基准测试工具"><a href="#基准测试工具" class="headerlink" title="基准测试工具"></a>基准测试工具</h3><p>ab：apache http 服务器基准测试工具</p>
<p>http_load: web服务器测试</p>
<p>sysbench 是一款多线程系统压测工具。</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;基准测试是针对系统设计的一种压力测试。通常的目标是为了掌握系统的行为。&lt;/p&gt;
&lt;h3 id=&quot;为什么需要基准测试&quot;&gt;&lt;a href=&quot;#为什么需要基准测试&quot; class=&quot;headerlink&quot; title=&quot;为什么需要基准测试&quot;&gt;&lt;/
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>ms1_mysql的架构和历史</title>
    <link href="http://yoursite.com/2017/02/07/ms1-mysql%E7%9A%84%E6%9E%B6%E6%9E%84%E5%92%8C%E5%8E%86%E5%8F%B2/"/>
    <id>http://yoursite.com/2017/02/07/ms1-mysql的架构和历史/</id>
    <published>2017-02-07T15:29:47.000Z</published>
    <updated>2017-02-15T07:12:43.942Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h3 id="1-MySQL逻辑架构"><a href="#1-MySQL逻辑架构" class="headerlink" title="1.MySQL逻辑架构"></a>1.MySQL逻辑架构</h3><p><img src="http://i.imgur.com/qMS43OR.png" alt=""></p>
<p>第一层的结构不是MySQL独有的，大多数基于网络的客户端/服务器的工具或者服务都有类似的结构，比如连接处理、授权认证、安全等。</p>
<p>第二层是Mysql中比较核心的部分。大多数的Mysql核心功能都在这一层。包括查询解析、分析、优化、缓存以及所有的内置函数，所有跨存储引擎的功能都在这一层实现，存储过程、触发器、视图等。</p>
<p>第三层包含了存储引擎。存储引擎负责Mysql中数据的存储和提取。服务器通过API与存储引擎进行通信，这些接口屏蔽了不同存储引擎之间的差异，使得这些差异对上层的查询过程透明。存储引擎包含几十个底层函数，用于执行诸如“开始一个事务”或者“根据主键提取一行记录”等操作，但存储引擎不会去解析SQL语句（Innodb会解析外键定义），不同存储引擎之间也不会相互通信，只是简单的响应上层服务器的请求。</p>
<h3 id="2-并发控制"><a href="#2-并发控制" class="headerlink" title="2.并发控制"></a>2.并发控制</h3><h4 id="锁粒度"><a href="#锁粒度" class="headerlink" title="锁粒度"></a>锁粒度</h4><p>一般情况下，锁定的数据量越少，则系统的并发程度越高。锁策略是在锁的开销和安全性之间寻求平衡。大多数一般是在表上施加行级锁。Mysql中每个存储引擎都可以实现自己的锁策略和锁粒度。Mysql中有表锁和行级锁。</p>
<ul>
<li><p>表锁：</p>
<ul>
<li><p>是Mysql中最基本的锁策略，并且是开销最小的策略，它会锁定整个表。一个用户对表进行写操作，需要首先获得写锁，这回阻塞其他用户对该表的所有读写操作。</p>
</li>
<li><p>尽管存储引擎可以管理自己的锁，但是Mysql本身还是会使用各种有效的表锁来实现不同的目的。比如：服务器会为诸如：ALTER Table之类的语句使用表锁，而忽略存储引擎的锁机制。</p>
</li>
</ul>
</li>
<li>行级锁<ul>
<li>行级锁可以最大程度的支持并发处理，INNodb和XtraDB存储引擎中实现了行级锁。行级锁只在存储引擎层实现，而在Mysql服务器层没有实现。服务器层完全不了解存储引擎中的锁实现（实际上也不需要了解）。</li>
</ul>
</li>
</ul>
<h3 id="3-事务"><a href="#3-事务" class="headerlink" title="3.事务"></a>3.事务</h3><h4 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h4><p>事务内的数据，要么全部执行成功，那么全部执行失败。可以Start Transaction开始一个事务，commit提交一个事务，而rollback撤销所有的修改。</p>
<p>A: atomicity 原子性：事务是不可分割的最小工作单位。</p>
<p>C: consistency一致性：数据库总是从一个一致性的状态转换到另一个一致性的状态。</p>
<p>I: isolation: 隔离性：事务所做的修改在提交之前，对其他事务是不可见的。</p>
<p>D: durability:持久性：一旦事务提交，事务所做的所有修改都会永久保存到数据库中。</p>
<h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><p>隔离性定义了四个级别，每一个级别都规定了一个事务中所做的修改，哪些在事务内和事务间是可见的。哪些是不可见的。较低的级别的隔离通常可以执行更高的并发。</p>
<p>READ UNCOMMITTED(未提交读): 事务即使没有提交,所做的修改对其他事务是可见的.  也称脏读.</p>
<p>READ COMMITTED(提交读):　事务没有提交前,所做的任何修改对其他事务是不可见的.这大多数数据库默认的隔离级别,也叫不可重复读.</p>
<p>REPEATABLE READ(可重复读): 当某个事务读取某个范围内记录时,另外一个事务又在该范围内插入了新纪录并且提交成功,这时前一个事务再次读取该范围内记录,便会产生幻行.</p>
<p>SERIALIIZABLE(可串行化): 通过强制事务串行执行,避免幻读的问题, 也就是在读取的每一行记录上加锁,所以可能导致大量超时和锁争用,实际中很少用这个隔离级别.</p>
<h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p>死锁是指两个或者多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环的现象。当多个事务试图以不同的顺序锁定资源时，就可能会产生死锁。</p>
<h4 id="MySQL中的事务"><a href="#MySQL中的事务" class="headerlink" title="MySQL中的事务"></a>MySQL中的事务</h4><p>MySQL中提供了两种事务型的存储引擎：InnoDB和NDB Cluster</p>
<p>自动提交：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> = <span class="string">'AUTOCOMMIT'</span>;</div><div class="line"><span class="keyword">SET</span> AUTOCOMMIT = <span class="number">1</span>;</div></pre></td></tr></table></figure>
<h3 id="4-多版本并发控制"><a href="#4-多版本并发控制" class="headerlink" title="4.多版本并发控制"></a>4.多版本并发控制</h3><p>innoDB中MVCC通过在每行记录后面保存两个隐藏的列来实现。这两个列，一个保存了行的创建时间，一个保存了行的过期时间。当然存储的并不是实际的时间值，而是系统版本号。事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较。</p>
<h3 id="4-mysql存储引擎"><a href="#4-mysql存储引擎" class="headerlink" title="4.mysql存储引擎"></a>4.mysql存储引擎</h3><p><code>show table status like &#39;user&#39;</code></p>
<h4 id="innodb存储引擎"><a href="#innodb存储引擎" class="headerlink" title="innodb存储引擎"></a>innodb存储引擎</h4><p>mysql默认事务型引擎</p>
<h4 id="myisam存储引擎"><a href="#myisam存储引擎" class="headerlink" title="myisam存储引擎"></a>myisam存储引擎</h4><p>不支持事务和行级锁</p>
<h4 id="archive存储引擎"><a href="#archive存储引擎" class="headerlink" title="archive存储引擎"></a>archive存储引擎</h4><p>只支持insert select操作</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;1-MySQL逻辑架构&quot;&gt;&lt;a href=&quot;#1-MySQL逻辑架构&quot; class=&quot;headerlink&quot; title=&quot;1.MySQL逻辑架构&quot;&gt;&lt;/a&gt;1.MySQL逻辑架构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http:/
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>面试题4：替换空格</title>
    <link href="http://yoursite.com/2017/01/17/Poffer4/"/>
    <id>http://yoursite.com/2017/01/17/Poffer4/</id>
    <published>2017-01-17T12:19:24.000Z</published>
    <updated>2017-02-15T08:11:35.817Z</updated>
    
    <content type="html"><![CDATA[<p>请实现一个函数，把字符串中的每个空格替换成“%20”。例如输入“We are happy.”，则输出“We%20are%20happy.”。</p>
<p>解答：</p>
<ol>
<li>首先遍历原字符串，找出字符串的长度以及其中的空格数量，</li>
<li>根据原字符串的长度和空格的数量我们可以求出最后新字符串的长度。</li>
<li>设置两个指针originalIndex和newIndex分别指向原字符串和新字符串的末尾位置。</li>
<li>如果originalIndex指向内容不为空格，那么将内容赋值给newIndex指向的位置，如果originalIndex指向为空格，那么从newIndex开始赋值“02%”</li>
<li>直到originalIndex==newIndex时表明字符串中的所有空格都已经替换完毕。</li>
</ol>
<p>代码：略</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;请实现一个函数，把字符串中的每个空格替换成“%20”。例如输入“We are happy.”，则输出“We%20are%20happy.”。&lt;/p&gt;
&lt;p&gt;解答：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先遍历原字符串，找出字符串的长度以及其中的空格数量，&lt;/li&gt;
&lt;li&gt;根据原字符
    
    </summary>
    
      <category term="poffer" scheme="http://yoursite.com/categories/poffer/"/>
    
    
      <category term="poffer" scheme="http://yoursite.com/tags/poffer/"/>
    
  </entry>
  
  <entry>
    <title>面试题30：最小的k个数</title>
    <link href="http://yoursite.com/2017/01/17/Poffer30/"/>
    <id>http://yoursite.com/2017/01/17/Poffer30/</id>
    <published>2017-01-17T12:19:24.000Z</published>
    <updated>2017-02-18T09:16:25.082Z</updated>
    
    <content type="html"><![CDATA[<p>题目：输入n个整数，找出其中最小的k个数。例如输入4，5，1，6，2，7，3，8这8个数字，则最小的4个数字是1，2，3，4<br>这道题最简单的思路莫过于把输入的n个整数排序，排序之后位于最前面的k个数就是最小的k个数。这种思路的时间复杂度是O(nlogn）,面试官会提示我们还有更快的算法。</p>
<p>思路：</p>
<p>我们可以先创建一个大小为k的数据容器来存储最小的k个数字，接下来我们每次从输入的n个整数中读入一个数。如果容器中已有数字少于k个，则直接把这次读入的整数放入容器中；如果容器中已有k个数字了，也就是容器已满，此时我们不能再插入新的数字了而只能替换已有的数字。找出这已有的k个数中的最大值，然后拿这次待插入的整数和最大值进行比较。如果待插入的值比当前已有的最小值小，则用这个数替换当前已有的最大值；如果待插入的值比当前已有的最大值还大，那么这个数不可能是最小的k个整数之一，于是我们可以抛弃这个整数。<br>因此当容器满了之后，我们要做3件事；一是在k个整数中找到最大数；二是有可能在这个容器中删除最大数；三是有可能要插入一个新的数字。如果用一个二叉树来实现这个容器，那么我们能在O(logk）时间内实现这三步操作。因此对于n个输入的数字而言，总的时间效率是O(nlogk).<br>我们可以选择用不同的二叉树来实现这个数据容器。由于每次都需要找到k个整数中的最大数字，我们很容易想到用最大堆。在最大堆中，根节点的值总是大于它的子树中的任意结点的值。于是我们每次可以在O(1）得到已有的k个数字中的最大值，但需要O(logk)时间完成删除及插入操作。</p>
<p><a href="http://www.cnblogs.com/CherishFX/p/4643940.html" target="_blank" rel="external">http://www.cnblogs.com/CherishFX/p/4643940.html</a></p>
<p>堆排序是一种树形选择排序方法，它的特点是：在排序的过程中，将array[0，…，n-1]看成是一颗完全二叉树的顺序存储结构，利用完全二叉树中双亲节点和孩子结点之间的内在关系，在当前无序区中选择关键字最大（最小）的元素。</p>
<ol>
<li>若array[0，…，n-1]表示一颗完全二叉树的顺序存储模式，则双亲节点指针和孩子结点指针之间的内在关系如下：</li>
</ol>
<p>　　任意一节点指针 i：父节点：i==0 ? null : (i-1)/2</p>
<p>　　　　　　　　　　  左孩子：2*i + 1</p>
<p>　　　　　　　　　　  右孩子：2*i + 2</p>
<ol>
<li>堆的定义：n个关键字序列array[0，…，n-1]，当且仅当满足下列要求：(0 &lt;= i &lt;= (n-1)/2)</li>
</ol>
<p>　　　　　　① array[i] &lt;= array[2<em>i + 1] 且 array[i] &lt;= array[2</em>i + 2]； 称为小根堆；</p>
<p>　　　　　　② array[i] &gt;= array[2<em>i + 1] 且 array[i] &gt;= array[2</em>i + 2]； 称为大根堆；</p>
<ol>
<li>建立大根堆：</li>
</ol>
<p>　　n个节点的完全二叉树array[0，…，n-1]，最后一个节点n-1是第(n-1-1)/2个节点的孩子。对第(n-1-1)/2个节点为根的子树调整，使该子树称为堆。</p>
<p>　　对于大根堆，调整方法为：若【根节点的关键字】小于【左右子女中关键字较大者】，则交换。</p>
<p>　　之后向前依次对各节点（(n-2)/2 - 1）~ 0为根的子树进行调整，看该节点值是否大于其左右子节点的值，若不是，将左右子节点中较大值与之交换，交换后可能会破坏下一级堆，于是继续采用上述方法构建下一级的堆，直到以该节点为根的子树构成堆为止。</p>
<p>　　反复利用上述调整堆的方法建堆，直到根节点。</p>
<p>4.堆排序：（大根堆）</p>
<p>　　①将存放在array[0，…，n-1]中的n个元素建成初始堆；</p>
<p>　　②将堆顶元素与堆底元素进行交换，则序列的最大值即已放到正确的位置；</p>
<p>　　③但此时堆被破坏，将堆顶元素向下调整使其继续保持大根堆的性质，再重复第②③步，直到堆中仅剩下一个元素为止。</p>
<p>堆排序算法的性能分析：</p>
<p>　　空间复杂度:o(1)；</p>
<p>　　时间复杂度:建堆：o(n)，每次调整o(log n)，故最好、最坏、平均情况下：o(n*logn);</p>
<p>　　稳定性：不稳定</p>
<ol>
<li>先找到一个路径，如果是叶节点，来比较当前和是不是k，是的话，打印一下栈。不是的话，回到父节点。进行递归。 </li>
</ol>
<p>解答：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> offer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t30</span> </span>&#123;</div><div class="line">	<span class="comment">//构建大根堆：将array看成完全二叉树的顺序存储结构</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span>[] buildMaxHeap(<span class="keyword">int</span>[] array)&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=(array.length-<span class="number">2</span>)/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">			adjustDownToUp(array, i, array.length);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> array;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//将元素array[k]自下往上逐步调整树形结构</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">adjustDownToUp</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> k,<span class="keyword">int</span> length)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> temp=array[k];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>*k+<span class="number">1</span>;i&lt;length-<span class="number">1</span>;i=<span class="number">2</span>*i+<span class="number">1</span>)&#123;</div><div class="line">			<span class="keyword">if</span>(i&lt;length &amp;&amp;array[i]&lt;array[i+<span class="number">1</span>]) i++;</div><div class="line">			<span class="keyword">if</span>(array[i]&lt;temp) <span class="keyword">break</span>;</div><div class="line">			<span class="keyword">else</span>&#123;</div><div class="line">				array[k]=array[i];</div><div class="line">				k=i;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		array[k]=temp;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] heapSort(<span class="keyword">int</span>[] array)&#123;</div><div class="line">		array=buildMaxHeap(array);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=array.length-<span class="number">1</span>;i&gt;<span class="number">1</span>;i--)&#123;</div><div class="line">			<span class="keyword">int</span> temp=array[<span class="number">0</span>];</div><div class="line">			array[<span class="number">0</span>]=array[i];</div><div class="line">			array[i]=temp;</div><div class="line">			adjustDownToUp(array, <span class="number">0</span>, i);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> array;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getLeastNumbers</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(arr.length&lt;k) <span class="keyword">return</span>;</div><div class="line">		<span class="keyword">int</span>[] kArray=Arrays.copyOfRange(arr, <span class="number">0</span>, k);</div><div class="line">		heapSort(kArray);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;arr.length;i++)&#123;</div><div class="line">			<span class="keyword">if</span>(arr[i]&lt;kArray[k-<span class="number">1</span>])&#123;</div><div class="line">				kArray[k-<span class="number">1</span>]=arr[i];</div><div class="line">				heapSort(kArray);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i:kArray)</div><div class="line">			System.out.print(i+<span class="string">","</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span>[] arr= &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">8</span>&#125;;  </div><div class="line">		t30 t= <span class="keyword">new</span> t30();</div><div class="line">		t.getLeastNumbers(arr,<span class="number">3</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：输入n个整数，找出其中最小的k个数。例如输入4，5，1，6，2，7，3，8这8个数字，则最小的4个数字是1，2，3，4&lt;br&gt;这道题最简单的思路莫过于把输入的n个整数排序，排序之后位于最前面的k个数就是最小的k个数。这种思路的时间复杂度是O(nlogn）,面试官会提示
    
    </summary>
    
      <category term="poffer" scheme="http://yoursite.com/categories/poffer/"/>
    
    
      <category term="poffer" scheme="http://yoursite.com/tags/poffer/"/>
    
  </entry>
  
  <entry>
    <title>面试题11：数值的整数次方</title>
    <link href="http://yoursite.com/2017/01/17/Poffer11/"/>
    <id>http://yoursite.com/2017/01/17/Poffer11/</id>
    <published>2017-01-17T12:19:24.000Z</published>
    <updated>2017-02-16T05:16:29.112Z</updated>
    
    <content type="html"><![CDATA[<p>题目：实现函数double Power(double base,int exponent),求base的exponent次方。不得使用库函数，同时不需要考虑大数问题</p>
<p>解答：我们用右移运算代替除2，用位与运算符代替了求余运算符（%)来判断一个数是奇数还是偶数。位运算的效率比乘除法及求余运算的效率要高很多。既然要优化代码，我们就把优化做到极致。</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> offer;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 实现函数power。</div><div class="line"> * <span class="doctag">@author</span> neuly</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t11</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> base,<span class="keyword">int</span> exponent)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(exponent==<span class="number">0</span>)</div><div class="line">			<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span>(exponent==<span class="number">1</span>)</div><div class="line">			<span class="keyword">return</span> base;</div><div class="line">		<span class="keyword">double</span> result=pow(base, exponent&gt;&gt;<span class="number">1</span>);</div><div class="line">		result*=result;</div><div class="line">		<span class="keyword">if</span>((exponent&amp;<span class="number">0x1</span>)==<span class="number">1</span>) result*=base;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">p</span><span class="params">(<span class="keyword">double</span> base,<span class="keyword">int</span> exponent)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(base==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		<span class="keyword">if</span>(exponent&lt;<span class="number">0</span>)&#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">1</span>/pow(base, -exponent);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> pow(base, exponent);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		System.out.println(p(<span class="number">2</span>, <span class="number">3</span>));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：实现函数double Power(double base,int exponent),求base的exponent次方。不得使用库函数，同时不需要考虑大数问题&lt;/p&gt;
&lt;p&gt;解答：我们用右移运算代替除2，用位与运算符代替了求余运算符（%)来判断一个数是奇数还是偶数。位
    
    </summary>
    
      <category term="poffer" scheme="http://yoursite.com/categories/poffer/"/>
    
    
      <category term="poffer" scheme="http://yoursite.com/tags/poffer/"/>
    
  </entry>
  
  <entry>
    <title>面试题13：在O(1)时间删除链表节点</title>
    <link href="http://yoursite.com/2017/01/17/Poffer13/"/>
    <id>http://yoursite.com/2017/01/17/Poffer13/</id>
    <published>2017-01-17T12:19:24.000Z</published>
    <updated>2017-02-16T06:25:03.005Z</updated>
    
    <content type="html"><![CDATA[<p>题目：给定单向链表的头指针和一个节点指针，定义一个函数在O(1)时间删除该节点。</p>
<p>如果我们把下一个节点的内容复制到要删除的节点上覆盖原有的内容，再把下一个节点删除，那是不是就相当于把当前要删除的节点删除了？</p>
<p>解答：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode head,ListNode deListNode)</span></span>&#123;  </div><div class="line">       <span class="keyword">if</span>(deListNode == <span class="keyword">null</span> || head == <span class="keyword">null</span>)&#123;  </div><div class="line">           <span class="keyword">return</span> ;  </div><div class="line">       &#125;  </div><div class="line">       <span class="keyword">if</span>(head == deListNode)&#123;  </div><div class="line">           head =<span class="keyword">null</span>;  </div><div class="line">       &#125;  </div><div class="line">       <span class="keyword">else</span>&#123;  </div><div class="line">           <span class="keyword">if</span>(deListNode.next == <span class="keyword">null</span>)&#123;  </div><div class="line">               ListNode pinitListNode = head;  </div><div class="line">               <span class="keyword">while</span>(pinitListNode.next.next != <span class="keyword">null</span>)&#123;  </div><div class="line">                   pinitListNode = pinitListNode.next;  </div><div class="line">               &#125;  </div><div class="line">               pinitListNode.next = <span class="keyword">null</span>;  </div><div class="line">           &#125;<span class="keyword">else</span>&#123;  </div><div class="line">               deListNode.data = deListNode.next.data;  </div><div class="line">               deListNode.next = deListNode.next.next;  </div><div class="line">           &#125;  </div><div class="line">       &#125;  </div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：给定单向链表的头指针和一个节点指针，定义一个函数在O(1)时间删除该节点。&lt;/p&gt;
&lt;p&gt;如果我们把下一个节点的内容复制到要删除的节点上覆盖原有的内容，再把下一个节点删除，那是不是就相当于把当前要删除的节点删除了？&lt;/p&gt;
&lt;p&gt;解答：&lt;br&gt;&lt;figure clas
    
    </summary>
    
      <category term="poffer" scheme="http://yoursite.com/categories/poffer/"/>
    
    
      <category term="poffer" scheme="http://yoursite.com/tags/poffer/"/>
    
  </entry>
  
  <entry>
    <title>面试题10：二进制中的1的个数</title>
    <link href="http://yoursite.com/2017/01/17/Poffer10/"/>
    <id>http://yoursite.com/2017/01/17/Poffer10/</id>
    <published>2017-01-17T12:19:24.000Z</published>
    <updated>2017-02-16T05:09:57.710Z</updated>
    
    <content type="html"><![CDATA[<p>题目：请实现一个函数，输入一个整数，输出该数二进制表示中1的个数。例如把9表示成二进制是1001，有2位是1，因此如果输入9，该函数输出2.</p>
<p>解答：把一个整数减去1，再和原整数做与运算，会把该整数最右边的一个1变成0.那么一个整数的二进制表示中有多少个1，就可以进行多少次运算。基于这种思路，我们可以写出这样的代码：</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> offer;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 1.请实现一个函数，输入一个整数，输出该数二进制表示中1的个数。</div><div class="line"> * </div><div class="line"> * 2.相关题目，判断一个整数是不是2的整数次幂，一个整数如果是2的整数次幂，</div><div class="line"> * 他的二进制表示有且仅有一个1，那么把这个整数减去1在和它自己做运算，这个整数中唯一的1就变成0.</div><div class="line"> * </div><div class="line"> * 3.输入m和n，计算需要改变m的二进制表示中多少位才能得到n，可以分两步：第一步先求异或，m^n</div><div class="line"> * 第二部，求结果中1的位数。</div><div class="line"> * </div><div class="line"> * 4.：将一个整数减去1之后在和原来的整数做位与运算，得到的结果相当把整数的二进制表示的最后边的1变为0</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> neuly</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t10</span> </span>&#123;</div><div class="line">	 <span class="function"><span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">int</span> <span class="title">numof1</span> <span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">		 <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">		 <span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</div><div class="line">			 count++;</div><div class="line">			 n=(n-<span class="number">1</span>)&amp;n;</div><div class="line">		 &#125;</div><div class="line">		 <span class="keyword">return</span> count;</div><div class="line">	 &#125;</div><div class="line">	 </div><div class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		System.out.println(numof1(<span class="number">9</span>));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：请实现一个函数，输入一个整数，输出该数二进制表示中1的个数。例如把9表示成二进制是1001，有2位是1，因此如果输入9，该函数输出2.&lt;/p&gt;
&lt;p&gt;解答：把一个整数减去1，再和原整数做与运算，会把该整数最右边的一个1变成0.那么一个整数的二进制表示中有多少个1，就可
    
    </summary>
    
      <category term="poffer" scheme="http://yoursite.com/categories/poffer/"/>
    
    
      <category term="poffer" scheme="http://yoursite.com/tags/poffer/"/>
    
  </entry>
  
  <entry>
    <title>面试题21：包含min函数的栈</title>
    <link href="http://yoursite.com/2017/01/17/Poffer21/"/>
    <id>http://yoursite.com/2017/01/17/Poffer21/</id>
    <published>2017-01-17T12:19:24.000Z</published>
    <updated>2017-02-17T05:44:38.842Z</updated>
    
    <content type="html"><![CDATA[<p>题目：定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的min函数。在该栈中，调用min，push及pop的时间复杂度都是O(1).</p>
<p><a href="http://blog.csdn.net/jsqfengbao/article/details/47260355" target="_blank" rel="external">http://blog.csdn.net/jsqfengbao/article/details/47260355</a></p>
<p>解答：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> offer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t21</span> </span>&#123;</div><div class="line">	Stack&lt;Integer&gt; stack1= <span class="keyword">new</span> Stack&lt;&gt;(); </div><div class="line">	Stack&lt;Integer&gt; stack2= <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Integer item)</span></span>&#123;</div><div class="line">		stack1.push(item);</div><div class="line">		<span class="keyword">if</span>(stack2.size()==<span class="number">0</span>||stack2.peek()&gt;item)&#123;</div><div class="line">			stack2.push(item);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			stack2.push(stack2.peek());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">pop</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(stack1==<span class="keyword">null</span>||stack2==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		stack2.pop();</div><div class="line">		<span class="keyword">return</span> stack1.pop();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">min</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> stack2.peek();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		t21 t= <span class="keyword">new</span> t21();</div><div class="line">		t.push(<span class="number">2</span>);</div><div class="line">		t.push(<span class="number">3</span>);</div><div class="line">		t.push(<span class="number">1</span>);</div><div class="line">		System.out.println(t.pop());</div><div class="line">		System.out.println(t.min());</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的min函数。在该栈中，调用min，push及pop的时间复杂度都是O(1).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/jsqfengbao/article/details/4
    
    </summary>
    
      <category term="poffer" scheme="http://yoursite.com/categories/poffer/"/>
    
    
      <category term="poffer" scheme="http://yoursite.com/tags/poffer/"/>
    
  </entry>
  
  <entry>
    <title>面试题12：打印1到最大的n位数</title>
    <link href="http://yoursite.com/2017/01/17/Poffer12/"/>
    <id>http://yoursite.com/2017/01/17/Poffer12/</id>
    <published>2017-01-17T12:19:24.000Z</published>
    <updated>2017-02-16T05:43:55.191Z</updated>
    
    <content type="html"><![CDATA[<p>题目：题目：输入数字n，按顺序打印出从1最大的的n位数十进制数。比如输入3，则打印出1，2，3一直到最大的3位数即999.</p>
<p>解答：<br><a href="http://blog.csdn.net/jsqfengbao/article/details/47174629" target="_blank" rel="external">http://blog.csdn.net/jsqfengbao/article/details/47174629</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：题目：输入数字n，按顺序打印出从1最大的的n位数十进制数。比如输入3，则打印出1，2，3一直到最大的3位数即999.&lt;/p&gt;
&lt;p&gt;解答：&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/jsqfengbao/article/details/4717
    
    </summary>
    
      <category term="poffer" scheme="http://yoursite.com/categories/poffer/"/>
    
    
      <category term="poffer" scheme="http://yoursite.com/tags/poffer/"/>
    
  </entry>
  
  <entry>
    <title>面试题14：调整数组顺序使奇数位于偶数的前面</title>
    <link href="http://yoursite.com/2017/01/17/Poffer14/"/>
    <id>http://yoursite.com/2017/01/17/Poffer14/</id>
    <published>2017-01-17T12:19:24.000Z</published>
    <updated>2017-02-16T10:59:42.112Z</updated>
    
    <content type="html"><![CDATA[<p>题目：输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。</p>
<p>思路：双指针。</p>
<p>解答：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> offer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t14</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEven</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> n%<span class="number">2</span>==<span class="number">0</span>;</div><div class="line">    &#125;  </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">order2</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;  </div><div class="line">        <span class="keyword">if</span>(arr == <span class="keyword">null</span>)  </div><div class="line">            <span class="keyword">return</span>;  </div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;  </div><div class="line">        <span class="keyword">int</span> j = arr.length-<span class="number">1</span>;  </div><div class="line">        <span class="keyword">while</span>(i&lt;j)&#123;  </div><div class="line">            <span class="keyword">if</span>(isEven(arr[i]) &amp;&amp; !isEven(arr[j]))&#123;  </div><div class="line">                <span class="keyword">int</span> temp = arr[i];  </div><div class="line">                arr[i]= arr[j];  </div><div class="line">                arr[j] = temp;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!isEven(arr[i]) &amp;&amp; isEven(arr[j]))&#123;  </div><div class="line">                i++;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(isEven(arr[i]) &amp;&amp; isEven(arr[j]))&#123;  </div><div class="line">                j--;  </div><div class="line">            &#125;<span class="keyword">else</span>&#123;  </div><div class="line">                i++;  </div><div class="line">                j--;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		t14 t= <span class="keyword">new</span> t14();</div><div class="line">		<span class="keyword">int</span>[] arr= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</div><div class="line">		t.order2(arr);</div><div class="line">		System.out.println(<span class="string">"s"</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.length ;i++)&#123;  </div><div class="line">            System.out.print(arr[i]+<span class="string">","</span>);  </div><div class="line">        &#125; </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。&lt;/p&gt;
&lt;p&gt;思路：双指针。&lt;/p&gt;
&lt;p&gt;解答：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
    
    </summary>
    
      <category term="poffer" scheme="http://yoursite.com/categories/poffer/"/>
    
    
      <category term="poffer" scheme="http://yoursite.com/tags/poffer/"/>
    
  </entry>
  
  <entry>
    <title>面试题18：树的子结构</title>
    <link href="http://yoursite.com/2017/01/17/Poffer18/"/>
    <id>http://yoursite.com/2017/01/17/Poffer18/</id>
    <published>2017-01-17T12:19:24.000Z</published>
    <updated>2017-02-17T03:23:15.278Z</updated>
    
    <content type="html"><![CDATA[<p>题目：输入两棵二叉树A和B，判断B是不是A的子结构。</p>
<p>思路：</p>
<ol>
<li>第一步在树A中找到和B的根节点的值一样的结点R，</li>
<li>第二步再判断树A中以R为根结点的子树是不是包含和树B一样的结构。</li>
</ol>
<p>解答：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> offer;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t17</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> data;</div><div class="line">		ListNode  next;</div><div class="line">	&#125;</div><div class="line">	 <span class="function"><span class="keyword">public</span> ListNode  <span class="title">Merge</span><span class="params">(ListNode pHead1,ListNode pHead2)</span></span>&#123;  </div><div class="line">	        <span class="keyword">if</span>(pHead1 == <span class="keyword">null</span>)  </div><div class="line">	            <span class="keyword">return</span> pHead2;  </div><div class="line">	        <span class="keyword">else</span> <span class="keyword">if</span>(pHead2 == <span class="keyword">null</span>)  </div><div class="line">	            <span class="keyword">return</span> pHead1;  </div><div class="line">	        ListNode pMergedHead = <span class="keyword">null</span>;  </div><div class="line">	        <span class="keyword">if</span>(pHead1.data &lt;pHead2.data)&#123;  </div><div class="line">	            pMergedHead = pHead1;  </div><div class="line">	            pMergedHead.next = Merge(pHead1.next ,pHead2);  </div><div class="line">	        &#125;<span class="keyword">else</span>&#123;  </div><div class="line">	            pMergedHead = pHead2;  </div><div class="line">	            pMergedHead.next = Merge(pHead1,pHead2.next);  </div><div class="line">	        &#125;  </div><div class="line">	        <span class="keyword">return</span> pMergedHead;  </div><div class="line">	    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：输入两棵二叉树A和B，判断B是不是A的子结构。&lt;/p&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一步在树A中找到和B的根节点的值一样的结点R，&lt;/li&gt;
&lt;li&gt;第二步再判断树A中以R为根结点的子树是不是包含和树B一样的结构。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解答：&lt;/
    
    </summary>
    
      <category term="poffer" scheme="http://yoursite.com/categories/poffer/"/>
    
    
      <category term="poffer" scheme="http://yoursite.com/tags/poffer/"/>
    
  </entry>
  
  <entry>
    <title>面试题15：链表中倒数第K个结点</title>
    <link href="http://yoursite.com/2017/01/17/Poffer15/"/>
    <id>http://yoursite.com/2017/01/17/Poffer15/</id>
    <published>2017-01-17T12:19:24.000Z</published>
    <updated>2017-02-16T11:35:24.567Z</updated>
    
    <content type="html"><![CDATA[<p>题目：输入一个链表，输出该链表中倒数第k哥结点。</p>
<p>思路：</p>
<ol>
<li>先遍历一遍，然后得到数组逆序，放入栈中，输出第k个。</li>
<li>方法二只遍历一遍，采用双指针，两个指针之间相差k</li>
</ol>
<p>解答：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> offer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t15</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> data;</div><div class="line">		ListNode  next;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> ListNode <span class="title">findK</span><span class="params">(ListNode head,<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(head==<span class="keyword">null</span> ||k&lt;=<span class="number">0</span>) <span class="keyword">return</span>  <span class="keyword">null</span>;</div><div class="line">		ListNode ANode = head;  </div><div class="line">        ListNode BNode = <span class="keyword">null</span>;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;k-<span class="number">1</span>;i++)&#123;  </div><div class="line">            <span class="keyword">if</span>(ANode.next != <span class="keyword">null</span>)  </div><div class="line">                ANode = ANode.next;  </div><div class="line">            <span class="keyword">else</span>  </div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">        &#125;  </div><div class="line">        BNode = head;  </div><div class="line">        <span class="keyword">while</span>(ANode.next != <span class="keyword">null</span>)&#123;  </div><div class="line">            ANode = ANode.next;  </div><div class="line">            BNode = BNode.next;  </div><div class="line">        &#125;  </div><div class="line">		<span class="keyword">return</span> BNode;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        ListNode head = <span class="keyword">new</span> ListNode();  </div><div class="line">        ListNode second = <span class="keyword">new</span> ListNode();  </div><div class="line">        ListNode third = <span class="keyword">new</span> ListNode();  </div><div class="line">        ListNode forth = <span class="keyword">new</span> ListNode();  </div><div class="line">        head.next = second;  </div><div class="line">        second.next = third;  </div><div class="line">        third.next = forth;  </div><div class="line">        head.data = <span class="number">1</span>;  </div><div class="line">        second.data = <span class="number">2</span>;  </div><div class="line">        third.data = <span class="number">3</span>;  </div><div class="line">        forth.data = <span class="number">4</span>;  </div><div class="line">        t15 test = <span class="keyword">new</span> t15();  </div><div class="line">        ListNode result = test.findK(head, <span class="number">1</span>);  </div><div class="line">        System.out.println(result.data);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：输入一个链表，输出该链表中倒数第k哥结点。&lt;/p&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先遍历一遍，然后得到数组逆序，放入栈中，输出第k个。&lt;/li&gt;
&lt;li&gt;方法二只遍历一遍，采用双指针，两个指针之间相差k&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解答：&lt;/p&gt;
&lt;figu
    
    </summary>
    
      <category term="poffer" scheme="http://yoursite.com/categories/poffer/"/>
    
    
      <category term="poffer" scheme="http://yoursite.com/tags/poffer/"/>
    
  </entry>
  
  <entry>
    <title>面试题17：合并两个排序的链表</title>
    <link href="http://yoursite.com/2017/01/17/Poffer17/"/>
    <id>http://yoursite.com/2017/01/17/Poffer17/</id>
    <published>2017-01-17T12:19:24.000Z</published>
    <updated>2017-02-16T13:56:02.262Z</updated>
    
    <content type="html"><![CDATA[<p>题目：输入两个递增排序的链表，合并这两个链表并使新链表中的结点仍然是按照递增排序的。</p>
<p>解答：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> offer;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t17</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> data;</div><div class="line">		ListNode  next;</div><div class="line">	&#125;</div><div class="line">	 <span class="function"><span class="keyword">public</span> ListNode  <span class="title">Merge</span><span class="params">(ListNode pHead1,ListNode pHead2)</span></span>&#123;  </div><div class="line">	        <span class="keyword">if</span>(pHead1 == <span class="keyword">null</span>)  </div><div class="line">	            <span class="keyword">return</span> pHead2;  </div><div class="line">	        <span class="keyword">else</span> <span class="keyword">if</span>(pHead2 == <span class="keyword">null</span>)  </div><div class="line">	            <span class="keyword">return</span> pHead1;  </div><div class="line">	        ListNode pMergedHead = <span class="keyword">null</span>;  </div><div class="line">	        <span class="keyword">if</span>(pHead1.data &lt;pHead2.data)&#123;  </div><div class="line">	            pMergedHead = pHead1;  </div><div class="line">	            pMergedHead.next = Merge(pHead1.next ,pHead2);  </div><div class="line">	        &#125;<span class="keyword">else</span>&#123;  </div><div class="line">	            pMergedHead = pHead2;  </div><div class="line">	            pMergedHead.next = Merge(pHead1,pHead2.next);  </div><div class="line">	        &#125;  </div><div class="line">	        <span class="keyword">return</span> pMergedHead;  </div><div class="line">	    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：输入两个递增排序的链表，合并这两个链表并使新链表中的结点仍然是按照递增排序的。&lt;/p&gt;
&lt;p&gt;解答：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;l
    
    </summary>
    
      <category term="poffer" scheme="http://yoursite.com/categories/poffer/"/>
    
    
      <category term="poffer" scheme="http://yoursite.com/tags/poffer/"/>
    
  </entry>
  
  <entry>
    <title>面试题16：反转链表</title>
    <link href="http://yoursite.com/2017/01/17/Poffer16/"/>
    <id>http://yoursite.com/2017/01/17/Poffer16/</id>
    <published>2017-01-17T12:19:24.000Z</published>
    <updated>2017-02-16T12:22:00.141Z</updated>
    
    <content type="html"><![CDATA[<p>题目：题目：定义一个函数，输入一个链表的头结点，反转该链表并输出反转后链表的头结点。</p>
<p>解答：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> offer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t16</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> data;</div><div class="line">		ListNode  next;</div><div class="line">	&#125;</div><div class="line">	 <span class="function"><span class="keyword">public</span> ListNode <span class="title">ReverseList</span><span class="params">(ListNode head)</span></span>&#123;  </div><div class="line">	        <span class="keyword">if</span>(head == <span class="keyword">null</span>)  </div><div class="line">	            <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">	        ListNode preListNode = <span class="keyword">null</span>;  </div><div class="line">	        ListNode nowListNode = head;  </div><div class="line">	          </div><div class="line">	        <span class="keyword">while</span>(nowListNode != <span class="keyword">null</span>)&#123;  </div><div class="line">	            ListNode nextListNode = nowListNode.next;   <span class="comment">//保存下一个结点  </span></div><div class="line">	            nowListNode.next = preListNode;             <span class="comment">//当前结点指向前一个结点  </span></div><div class="line">	            preListNode = nowListNode;                  <span class="comment">//前任结点 到现任节点  </span></div><div class="line">	            nowListNode = nextListNode;                 <span class="comment">//现任节点到下一结点  </span></div><div class="line">	        &#125;  </div><div class="line">	        <span class="keyword">return</span> preListNode;  </div><div class="line">	    &#125;  </div><div class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">	        ListNode head = <span class="keyword">new</span> ListNode();  </div><div class="line">	        ListNode second = <span class="keyword">new</span> ListNode();  </div><div class="line">	        ListNode third = <span class="keyword">new</span> ListNode();  </div><div class="line">	        ListNode forth = <span class="keyword">new</span> ListNode();  </div><div class="line">	        head.next = second;  </div><div class="line">	        second.next = third;  </div><div class="line">	        third.next = forth;  </div><div class="line">	        head.data = <span class="number">1</span>;  </div><div class="line">	        second.data = <span class="number">2</span>;  </div><div class="line">	        third.data = <span class="number">3</span>;  </div><div class="line">	        forth.data = <span class="number">4</span>;  </div><div class="line">	        t16 test = <span class="keyword">new</span> t16();  </div><div class="line">	        ListNode result = test.ReverseList(head);  </div><div class="line">	        System.out.println(result.data);  </div><div class="line">	 &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：题目：定义一个函数，输入一个链表的头结点，反转该链表并输出反转后链表的头结点。&lt;/p&gt;
&lt;p&gt;解答：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;l
    
    </summary>
    
      <category term="poffer" scheme="http://yoursite.com/categories/poffer/"/>
    
    
      <category term="poffer" scheme="http://yoursite.com/tags/poffer/"/>
    
  </entry>
  
  <entry>
    <title>面试题25：二叉树中和为某一值的路径</title>
    <link href="http://yoursite.com/2017/01/17/Poffer25/"/>
    <id>http://yoursite.com/2017/01/17/Poffer25/</id>
    <published>2017-01-17T12:19:24.000Z</published>
    <updated>2017-02-18T04:59:41.363Z</updated>
    
    <content type="html"><![CDATA[<p>题目：输入一颗二叉树和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。从树的根节点开始往下一直到叶结点所经过的所有的结点形成一条路径。<br>如下图，输入二叉树和整数22，则打印出两条路径，第一条路径包含结点10，12，第二条路径包含的结点为10，5，7.</p>
<ol>
<li>先找到一个路径，如果是叶节点，来比较当前和是不是k，是的话，打印一下栈。不是的话，回到父节点。进行递归。 </li>
</ol>
<p>解答：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> offer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t25</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeNode</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> value;</div><div class="line">		BinaryTreeNode left;</div><div class="line">		BinaryTreeNode right;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPath</span><span class="params">(BinaryTreeNode root, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">		Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">		<span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">		findPath(root, k,stack,sum);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPath</span><span class="params">(BinaryTreeNode root, <span class="keyword">int</span> k,Stack&lt;Integer&gt; stack, <span class="keyword">int</span> sum )</span></span>&#123;</div><div class="line">		sum+=root.value;</div><div class="line">		stack.push(root.value);</div><div class="line">		<span class="keyword">boolean</span> isLeaf=root.left==<span class="keyword">null</span>&amp;&amp;root.right==<span class="keyword">null</span>;</div><div class="line">		<span class="keyword">if</span>(isLeaf&amp;&amp;sum==k)&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i:stack)</div><div class="line">				System.out.print(i+<span class="string">","</span>);</div><div class="line">			System.out.println();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(root.left!=<span class="keyword">null</span>)</div><div class="line">			findPath(root.left, k,stack,sum);</div><div class="line">		<span class="keyword">if</span>(root.right!=<span class="keyword">null</span>)</div><div class="line">			findPath(root.right, k, stack,sum);</div><div class="line">		</div><div class="line">		sum-=root.value;</div><div class="line">		stack.pop();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        BinaryTreeNode root1 = <span class="keyword">new</span> BinaryTreeNode();  </div><div class="line">        BinaryTreeNode node1 = <span class="keyword">new</span> BinaryTreeNode();  </div><div class="line">        BinaryTreeNode node2 = <span class="keyword">new</span> BinaryTreeNode();  </div><div class="line">        BinaryTreeNode node3 = <span class="keyword">new</span> BinaryTreeNode();  </div><div class="line">        BinaryTreeNode node4 = <span class="keyword">new</span> BinaryTreeNode();  </div><div class="line">        BinaryTreeNode node5 = <span class="keyword">new</span> BinaryTreeNode();  </div><div class="line">        BinaryTreeNode node6 = <span class="keyword">new</span> BinaryTreeNode();  </div><div class="line">        root1.left = node1;  </div><div class="line">        root1.right = node2;  </div><div class="line">        node1.left = node3;  </div><div class="line">        node1.right = node4;  </div><div class="line">        node4.left = node5;  </div><div class="line">        node4.right = node6;  </div><div class="line">        root1.value = <span class="number">8</span>;  </div><div class="line">        node1.value = <span class="number">8</span>;  </div><div class="line">        node2.value = <span class="number">7</span>;  </div><div class="line">        node3.value = <span class="number">9</span>;  </div><div class="line">        node4.value = <span class="number">2</span>;  </div><div class="line">        node5.value = <span class="number">4</span>;  </div><div class="line">        node6.value = <span class="number">7</span>;  </div><div class="line">        t25 test = <span class="keyword">new</span> t25();  </div><div class="line">        test.findPath(root1, <span class="number">25</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：输入一颗二叉树和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。从树的根节点开始往下一直到叶结点所经过的所有的结点形成一条路径。&lt;br&gt;如下图，输入二叉树和整数22，则打印出两条路径，第一条路径包含结点10，12，第二条路径包含的结点为10，5，7.&lt;/p&gt;

    
    </summary>
    
      <category term="poffer" scheme="http://yoursite.com/categories/poffer/"/>
    
    
      <category term="poffer" scheme="http://yoursite.com/tags/poffer/"/>
    
  </entry>
  
  <entry>
    <title>面试题22：栈的压入、弹出序列</title>
    <link href="http://yoursite.com/2017/01/17/Poffer22/"/>
    <id>http://yoursite.com/2017/01/17/Poffer22/</id>
    <published>2017-01-17T12:19:24.000Z</published>
    <updated>2017-02-17T08:24:21.553Z</updated>
    
    <content type="html"><![CDATA[<p>题目：输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。<br>假设压入栈的所有数字均不相等。例如序列1，2，3，4，5是某栈的压栈序列，序列，4，5，3，2，1是该压栈序列对应的一个弹出序列，但4，3，5，1，2就不可能是该压栈序列的弹出序列。</p>
<p><a href="http://blog.csdn.net/jsqfengbao/article/details/47261085" target="_blank" rel="external">http://blog.csdn.net/jsqfengbao/article/details/47261085</a></p>
<p>解答：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> offer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t22</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">boolean</span> <span class="title">isPopOrder</span><span class="params">(<span class="keyword">int</span>[] push ,<span class="keyword">int</span>[] pop )</span></span>&#123;</div><div class="line">		<span class="keyword">boolean</span> result=<span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span>(push.length!=pop.length) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">		<span class="keyword">if</span>(push!=<span class="keyword">null</span> &amp;&amp;pop!=<span class="keyword">null</span>)&#123;</div><div class="line">			<span class="keyword">int</span> n=pop.length;</div><div class="line">			<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</div><div class="line">			<span class="keyword">while</span>(j&lt;n)&#123;</div><div class="line">				<span class="keyword">while</span>(i&lt;n&amp;&amp;push[i]!=pop[j])&#123;</div><div class="line">					stack.push(push[i]);</div><div class="line">					i++;</div><div class="line">				&#125;</div><div class="line">				i++;</div><div class="line">				j++;</div><div class="line">				<span class="keyword">while</span>(!stack.isEmpty()&amp;&amp; stack.peek()==pop[j])&#123;</div><div class="line">					j++;</div><div class="line">					stack.pop();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>(i&gt;=n &amp;&amp;!stack.isEmpty())&#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(stack.empty()) result=<span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span>[] push=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</div><div class="line">		<span class="keyword">int</span>[] pop=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</div><div class="line">		System.out.println(isPopOrder(push, pop));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。&lt;br&gt;假设压入栈的所有数字均不相等。例如序列1，2，3，4，5是某栈的压栈序列，序列，4，5，3，2，1是该压栈序列对应的一个弹出序列，但4，3，5，1，2就不可能是该压栈序列的弹出
    
    </summary>
    
      <category term="poffer" scheme="http://yoursite.com/categories/poffer/"/>
    
    
      <category term="poffer" scheme="http://yoursite.com/tags/poffer/"/>
    
  </entry>
  
  <entry>
    <title>面试题31：连续子数组的最大和</title>
    <link href="http://yoursite.com/2017/01/17/Poffer31/"/>
    <id>http://yoursite.com/2017/01/17/Poffer31/</id>
    <published>2017-01-17T12:19:24.000Z</published>
    <updated>2017-02-18T12:32:56.492Z</updated>
    
    <content type="html"><![CDATA[<p>题目：输入一个整型数组，数组里有正数也有负数。数组中一个或连续的多个整数组成一个子数组。求所有子数组的和的最大值。要求时间复杂度为O(n)</p>
<p>解答：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> offer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t31</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findGreatestSum</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> greatest = <span class="number">0x80000000</span>; </div><div class="line">		<span class="keyword">int</span> cursum=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</div><div class="line">			<span class="keyword">if</span>(cursum&lt;=<span class="number">0</span>)</div><div class="line">				cursum=arr[i];</div><div class="line">			<span class="keyword">else</span></div><div class="line">				cursum+=arr[i];</div><div class="line">			<span class="keyword">if</span>(greatest&lt;cursum)</div><div class="line">				greatest=cursum;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> greatest;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        <span class="keyword">int</span>[] arr=&#123;-<span class="number">1</span>,-<span class="number">2</span>,-<span class="number">3</span>,-<span class="number">10</span>,-<span class="number">4</span>,-<span class="number">7</span>,<span class="number">2</span>,-<span class="number">5</span>&#125;;  </div><div class="line">        t31 test = <span class="keyword">new</span> t31();  </div><div class="line">        System.out.println(test.findGreatestSum(arr));  </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：输入一个整型数组，数组里有正数也有负数。数组中一个或连续的多个整数组成一个子数组。求所有子数组的和的最大值。要求时间复杂度为O(n)&lt;/p&gt;
&lt;p&gt;解答：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
    
    </summary>
    
      <category term="poffer" scheme="http://yoursite.com/categories/poffer/"/>
    
    
      <category term="poffer" scheme="http://yoursite.com/tags/poffer/"/>
    
  </entry>
  
  <entry>
    <title>面试题37：两个链表的第一个公共结点</title>
    <link href="http://yoursite.com/2017/01/17/Poffer37/"/>
    <id>http://yoursite.com/2017/01/17/Poffer37/</id>
    <published>2017-01-17T12:19:24.000Z</published>
    <updated>2017-02-18T15:27:37.821Z</updated>
    
    <content type="html"><![CDATA[<p>题目：输入两个链表，找出它们的第一个公共结点。</p>
<p>思路： 如果有的话 肯定是一个T型结构。 可以找到各自长度，然后一个长</p>
<p>解答：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">package</span> offer;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t37</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> data;</div><div class="line">		ListNode  next;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(<span class="keyword">int</span> data,ListNode next)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.data=data;</div><div class="line">			<span class="keyword">this</span>.next=next;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(ListNode node)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">		<span class="keyword">if</span>(node==<span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">		ListNode d=node;</div><div class="line">		</div><div class="line">		<span class="keyword">while</span>(d!=<span class="keyword">null</span>)&#123;</div><div class="line">			count++;</div><div class="line">			d=d.next;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> count;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> ListNode <span class="title">getFirstSameNode</span><span class="params">(ListNode node1,ListNode node2)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> l1=size(node1);</div><div class="line">		<span class="keyword">int</span> l2=size(node2);</div><div class="line">		ListNode p1 = node1;  </div><div class="line">        ListNode p2 = node2;</div><div class="line">		<span class="keyword">if</span>(l1&gt;l2)&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l1-l2;i++)&#123;</div><div class="line">				p1=p1.next;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">while</span>(p1!=<span class="keyword">null</span> &amp;&amp;p2!=<span class="keyword">null</span> &amp;&amp;p1!=p2)&#123;</div><div class="line">				p1=p1.next;</div><div class="line">				p2=p2.next;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> p1;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l2-l1;i++)&#123;</div><div class="line">				p2=p2.next;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">while</span>(p1!=<span class="keyword">null</span> &amp;&amp;p2!=<span class="keyword">null</span> &amp;&amp;p1!=p2)&#123;</div><div class="line">				p1=p1.next;</div><div class="line">				p2=p2.next;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> p2;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		ListNode n6=<span class="keyword">new</span> ListNode(<span class="number">6</span>,<span class="keyword">null</span>);</div><div class="line">		ListNode n5=<span class="keyword">new</span> ListNode(<span class="number">5</span>,n6);</div><div class="line">		ListNode n4=<span class="keyword">new</span> ListNode(<span class="number">4</span>,n5);</div><div class="line">		ListNode n3=<span class="keyword">new</span> ListNode(<span class="number">3</span>,n4);</div><div class="line">		ListNode n2=<span class="keyword">new</span> ListNode(<span class="number">2</span>,n3);</div><div class="line">		ListNode n1=<span class="keyword">new</span> ListNode(<span class="number">1</span>,n2);</div><div class="line">		ListNode l3=<span class="keyword">new</span> ListNode(<span class="number">3</span>,n4);</div><div class="line">		ListNode l2=<span class="keyword">new</span> ListNode(<span class="number">2</span>,l3);</div><div class="line">		</div><div class="line">		t37 t=<span class="keyword">new</span> t37();</div><div class="line">		System.out.println(t.getFirstSameNode(n1, l2).data);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：输入两个链表，找出它们的第一个公共结点。&lt;/p&gt;
&lt;p&gt;思路： 如果有的话 肯定是一个T型结构。 可以找到各自长度，然后一个长&lt;/p&gt;
&lt;p&gt;解答：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
    
    </summary>
    
      <category term="poffer" scheme="http://yoursite.com/categories/poffer/"/>
    
    
      <category term="poffer" scheme="http://yoursite.com/tags/poffer/"/>
    
  </entry>
  
  <entry>
    <title>面试题23：从上往下打印二叉树</title>
    <link href="http://yoursite.com/2017/01/17/Poffer23/"/>
    <id>http://yoursite.com/2017/01/17/Poffer23/</id>
    <published>2017-01-17T12:19:24.000Z</published>
    <updated>2017-02-17T11:38:58.179Z</updated>
    
    <content type="html"><![CDATA[<p>题目：从上往下打印二叉树的每个结点，同一层的结点按照从左到右的顺序打印。例如输入下图的二叉树，则一次打印出8，6，10，5，7，9，11.也就是广度遍历。</p>
<p><a href="http://blog.csdn.net/jsqfengbao/article/details/47261871" target="_blank" rel="external">http://blog.csdn.net/jsqfengbao/article/details/47261871</a></p>
<p>解答：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> offer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.Queue;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t23</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeNode</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> value;</div><div class="line">		BinaryTreeNode left;</div><div class="line">		BinaryTreeNode right;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printTree</span><span class="params">(BinaryTreeNode node)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">		Queue&lt;BinaryTreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">		queue.add(node);</div><div class="line">		<span class="keyword">while</span>(!queue.isEmpty())&#123;</div><div class="line">			BinaryTreeNode n=queue.poll();</div><div class="line">			System.out.println(n.value);</div><div class="line">			<span class="keyword">if</span>(n.left!=<span class="keyword">null</span>) queue.add(n.left);</div><div class="line">			<span class="keyword">if</span>(n.right!=<span class="keyword">null</span>) queue.add(n.right);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：从上往下打印二叉树的每个结点，同一层的结点按照从左到右的顺序打印。例如输入下图的二叉树，则一次打印出8，6，10，5，7，9，11.也就是广度遍历。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/jsqfengbao/article/det
    
    </summary>
    
      <category term="poffer" scheme="http://yoursite.com/categories/poffer/"/>
    
    
      <category term="poffer" scheme="http://yoursite.com/tags/poffer/"/>
    
  </entry>
  
  <entry>
    <title>面试题3：二维数组中查找</title>
    <link href="http://yoursite.com/2017/01/17/Poffer3/"/>
    <id>http://yoursite.com/2017/01/17/Poffer3/</id>
    <published>2017-01-17T12:19:24.000Z</published>
    <updated>2017-02-15T08:07:11.908Z</updated>
    
    <content type="html"><![CDATA[<p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序，请完成一个函数，输入一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<p>解答：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> offer;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 题目：在一个二维数组中，每一行都按照从左到右递增的顺序排序，</div><div class="line"> * 每一列都按照从上到下递增的顺序排序。请完成一个函数，</div><div class="line"> * 输入一个这样的一个二维数组和一个整数，判断数组是否含有该数组</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> neuly</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t3</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span>[][] a=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">9</span>&#125;,&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">12</span>&#125;,&#123;<span class="number">4</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">13</span>&#125;,&#123;<span class="number">6</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">15</span>&#125;&#125;;</div><div class="line">		System.out.println(find(<span class="keyword">null</span>,<span class="number">5</span>));</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[][] a,<span class="keyword">int</span> t)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(a!=<span class="keyword">null</span>)&#123;</div><div class="line">			<span class="keyword">int</span> x=a.length;</div><div class="line">			<span class="keyword">int</span> y=a[<span class="number">0</span>].length-<span class="number">1</span>;</div><div class="line">			<span class="keyword">int</span> i=<span class="number">0</span>,j=y;</div><div class="line">			<span class="keyword">while</span>(i&lt;x&amp;&amp;j&gt;=<span class="number">0</span>)&#123;</div><div class="line">				<span class="keyword">if</span>(a[i][j]==t) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(a[i][j]&gt;t)&#123;</div><div class="line">					j--;</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					i++;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序，请完成一个函数，输入一个二维数组和一个整数，判断数组中是否含有该整数。&lt;/p&gt;
&lt;p&gt;解答：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr
    
    </summary>
    
      <category term="poffer" scheme="http://yoursite.com/categories/poffer/"/>
    
    
      <category term="poffer" scheme="http://yoursite.com/tags/poffer/"/>
    
  </entry>
  
</feed>
