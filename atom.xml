<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lyp&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-31T05:09:47.028Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Loren</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2016总结</title>
    <link href="http://yoursite.com/2016/12/31/2016%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/12/31/2016总结/</id>
    <published>2016-12-31T04:14:17.000Z</published>
    <updated>2016-12-31T05:09:47.028Z</updated>
    
    <content type="html"><![CDATA[<h3 id="阅读书籍"><a href="#阅读书籍" class="headerlink" title="阅读书籍"></a>阅读书籍</h3><p>2016.06-2016.12</p>
<ul>
<li>深入理解java虚拟机 （总结：感觉要在温故一遍，其实最后几章有些没有认真阅读和思考 jvm内存模型？ 类加载过程？ 类加载器？ 类加载其顺序 垃圾回收算法？ minorgc和fullgc）</li>
<li>数据结构与算法分析 （总结：好吧，其实看完当时有收获，时间久了忘了也差不多了）</li>
<li>effective java （总结：一些模棱两可的问题更加清楚了）</li>
<li>hadoop应用开发技术详解（总结：其实蛮有意思的，大数据）</li>
<li>深入剖析tomact （总结：未完，讲道理，以前对于web编程只会写，一些原理不很清楚，感觉很有用去分析一下tomact源码）</li>
</ul>
<p>2017.01.01-2017.02.28（计划）</p>
<ul>
<li>java并发编程的艺术（线程池底层如何实现？ 如何模拟一个线程池？synchronized和lock的优缺点？）</li>
<li>pro spring（待定，其实是想找一本书好好理一下spring的源码实现 aop ioc？ springmvc流程？）</li>
<li>mybatis实现原理</li>
<li>深入浅出设计模式（观察者模式如何实现？ 单例模式两种的优缺点）</li>
<li>java基础（NIO：new io思想是什么？ hashmap内部实现？ 距离finally代码不执行？system。exit nio堆外内存？ hashmap和hashset关系？ 哪些类有serialVersionUID？futuretask类有什么作用 java访问数据库过程 jdbc？ cuncurrenthashmap读写加不加锁？）</li>
<li>redis（基本应用）</li>
<li>servlet（生命周期？过滤器和监听器用到的设计模式？ 单例多线程还是多利多线程？）</li>
<li>socket网络编程</li>
<li>网络相关 TCP、ip协议（tcp三次握手？ 常用http响应码含义？）</li>
<li>算法题（二叉树？ 快排？链表 堆 （10亿个数找topk））</li>
<li>软件工程（软件的设计原则）</li>
<li>js(prototype是什么 isNAN是什么意思)</li>
<li>jsp（两种include区别）</li>
<li>jstp（常用标签）</li>
<li>mysql（常用引擎？ 事务隔离级别？ sqlserver mysql oracle分页语句？ sql92和sql99写一个a和b表关联的语句？ 复合索引？）</li>
<li>linux（常用linux命令 复制一个文件 linux实时查看日志命令）</li>
<li>maven(maven命令)</li>
</ul>
<p>ps：怎么越写越多。。。以上是要付息或者预习的。</p>
<h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><ul>
<li>机器学习</li>
<li>spark</li>
<li>python</li>
</ul>
<h3 id="实习"><a href="#实习" class="headerlink" title="实习"></a>实习</h3><p>没什么写的。有一定收获。</p>
<ul>
<li>中科院 （2016.10-至今）</li>
<li>上海卯仕（2016.06-2016.09）</li>
<li>ibm （2015.09-2016.09）</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;阅读书籍&quot;&gt;&lt;a href=&quot;#阅读书籍&quot; class=&quot;headerlink&quot; title=&quot;阅读书籍&quot;&gt;&lt;/a&gt;阅读书籍&lt;/h3&gt;&lt;p&gt;2016.06-2016.12&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;深入理解java虚拟机 （总结：感觉要在温故一遍，其实最后几章有些
    
    </summary>
    
    
      <category term="life" scheme="http://yoursite.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>tomact8源码分析</title>
    <link href="http://yoursite.com/2016/12/31/tomact8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2016/12/31/tomact8源码分析/</id>
    <published>2016-12-31T04:08:12.000Z</published>
    <updated>2017-01-04T08:30:15.714Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h4><p>Tomcat作为JavaWeb领域的Web容器，现在基本上所有线上业务系统都是部署在Tomcat上。为了对平时开发的Web系统有更深入的理解，于是仔细研究了下Tomcat的源码。Servlet规范是Java领域中为服务端编程制定的规范，对于我们开发者只是关注了Servlet规范中提供的编程组件(ServletContextListener,Filer,Servlet) 等 ，但是规范中还有一些我们经常使用的接口（ServletContext,ServletRequest,ServletResponse,FilterChain）等都是由Tomcat去实现的，并且我们开发者实现的编程组件只是被Tomcat去回调而已。所以看Tomcat源码实现也有助于我们更好的理解Servlet规范及系统如何在容器中运行(一些开源的MVC框架如Struts2,Webx,SpringMVC本质无非就是这个)</p>
<p>本文内容主要参考深入剖析tomact。由于这本书是基于tomcat4的，但是tomcat的核心思想应该是没有变的，最主要的两个组件还是连接器和容器。</p>
<p>本文分析内容为tomact8.0版本。</p>
<h4 id="2-tomact8-0源码目录"><a href="#2-tomact8-0源码目录" class="headerlink" title="2.tomact8.0源码目录"></a>2.tomact8.0源码目录</h4><p><img src="http://i.imgur.com/zkkS3tQ.png" alt=""></p>
<p>简单的包介绍：</p>
<ul>
<li>javax:servlet规范的api</li>
<li>org.apache.catalina：tomact自身架构（分析重点）</li>
<li>org.apache.coyote：http,ajp协议实现相关的类</li>
<li>org.apache.el :实现el规范</li>
<li>org.apache.jasper：实现jsp规范，编译jsp文件</li>
<li>org.apache.juli ：tomact的日志系统</li>
<li>org.apache.naming ： jndi实现</li>
<li>org.apache.tomact：tomact的工具包、net、digester xml解析器</li>
</ul>
<h4 id="3-tomact体系结构"><a href="#3-tomact体系结构" class="headerlink" title="3.tomact体系结构"></a>3.tomact体系结构</h4><p>为了后面的理解，先大致说一下Tomcat的整体架构，Tomcat主要有两个组件，<strong>连接器和容器</strong>，所谓连接器就是一个http请求过来了，连接器负责接收这个请求，然后转发给容器。容器即servlet容器，容器有很多层，分别是Engine，Host，Context，Wrapper。最大的容器Engine，代表一个servlet 引擎，接下来是Host，代表一个虚拟机，然后是Context，代表一个应用，Wrapper对应一个servlet。从连接器传过来连接后，容器便会顺序经过上面的容器，最后到达特定的servlet。</p>
<p><img src="http://i.imgur.com/irZpmOV.png" alt=""></p>
<p>一个server可以有多个service，一个service包含多个连接器和一个容器，一个Engine可以由多个虚拟主机Host组成，每一个Host下面又可以由多个Web应用Context构成，每一个的Context下面可以包含多个Wrapper（Servlet的包装器）组成。如图所示</p>
<p><img src="http://i.imgur.com/TnOdb8R.png" alt=""></p>
<p>Tomcat将Engine，Host，Context，Wrapper统一抽象成Container。一个抽象的Container模块可以包含各种服务。例如，Manager管理器（Session管理），Pipeline管道（ 维护管道阀门Value ）等。Lifecycle接口统一定义了容器的生命周期，通过事件机制实现各个容器间的内部通讯。</p>
<p>而容器的核心接口Container的抽象实现中定义了一个Pipeline，一个Manager，一个Realm以及ClassLoader统一了具体容器的实现规范。</p>
<ul>
<li>连接器（Connector）组件的主要任务是为其所接收到的每一个请求（可以是HTTP协议，也可以AJP协议），委托给具体相关协议的解析类ProtocolHandler</li>
<li>解析类 ProtocolHandler，构造出Request 对象和Response 对象。然后将这两个对象传送给容器（Container）进行处理。</li>
<li>容器（Container）组件收到来自连接器（Connector）的Request 和Response对象后，负责调用Filter，最后调用Servlet的service 方法（进入我们开发的Web系统中）。</li>
</ul>
<h4 id="4-tomact，servlet规范关系"><a href="#4-tomact，servlet规范关系" class="headerlink" title="4.tomact，servlet规范关系"></a>4.tomact，servlet规范关系</h4><p>Servlet规范由一组用 Java编程语言编写的类和接口组成。Servlet规范为服务端开发人员提供了一个标准的 API以及为服务器厂商制定了相关实现规范，开发人员只需要关心Servlet规范中的编程组件（如Filter,Servlet等），其他规范接口由第三方服务器厂商(如Tomcat)去实现，三者的关系如下图，Servlet规范之于Tomcat的关系，也类似于JDBC规范与数据库驱动的关系，本质就是一套接口和一套实现的关系。对于一个Web服务器主要需要做的事情，个人认为基本由以下组件组成： [TCP连接管理] –&gt; [请求处理线程池管理] –&gt; [HTTP协议解析封装] –&gt; [Servlet规范的实现,对编程组件的回调] –&gt; [MVC框架,Web系统业务逻辑]。</p>
<p>servlet规范和web应用和web容器之间的关系</p>
<p><img src="http://i.imgur.com/LGqAoZZ.png" alt=""></p>
<p>tomact对servlet规范的实现：</p>
<p><img src="http://i.imgur.com/WU5rWPi.png" alt=""></p>
<h3 id="第一章-类加载体系"><a href="#第一章-类加载体系" class="headerlink" title="第一章 类加载体系"></a>第一章 类加载体系</h3><p>首先简单介绍下Java虚拟机规范中提到的主要类加载器：</p>
<ul>
<li>Bootstrap Loader：加载lib目录下或者System.getProperty(“sun.boot.class.path”)、或者-XBootclasspath所指定的路径或jar。</li>
<li>Extended Loader：加载lib\ext目录下或者System.getProperty(“java.ext.dirs”) 所指定的 路径或jar。在使用Java运行程序时，也可以指定其搜索路径，例如：java -Djava.ext.dirs=d:\projects\testproj\classes HelloWorld。</li>
<li>AppClass Loader：加载System.getProperty(“java.class.path”)所指定的 路径或jar。在使用Java运行程序时，也可以加上-cp来覆盖原有的Classpath设置，例如： java -cp ./lavasoft/classes HelloWorld。</li>
</ul>
<p>根据java虚拟机的双亲委派模式的原则，类加载器在加载一个类时，首先交给父类加载器加载，层层往上直到Bootstrap Loader。也就是一个类最先由Bootstrap Loader加载，如果没有加载到，则交给下一层的类加载器加载，如果没有加载到，则依次层层往下，直到最下层的类加载器。这也就是说，凡是能通过父一级类加载器加载到的类，对于子类也是可见的。因此可以利用双亲委派模式的特性，使用类加载器对不同路径下的jar包或者类进行环境隔离。</p>
<p>然后用一张图片来展示Tomcat的类加载体系：</p>
<p><img src="http://i.imgur.com/yutfn3I.png" alt=""></p>
<ul>
<li>ClassLoader：Java提供的类加载器抽象类，用户自定义的类加载器需要继承实现</li>
<li>commonLoader：Tomcat最基本的类加载器，加载路径中的class可以被Tomcat容器本身以及各个Webapp访问；</li>
<li>catalinaLoader：Tomcat容器私有的类加载器，加载路径中的class对于Webapp不可见；</li>
<li>sharedLoader：各个Webapp共享的类加载器，加载路径中的class对于所有Webapp可见，但是对于Tomcat容器不可见；</li>
<li>WebappClassLoader：各个Webapp私有的类加载器，加载路径中的class只对当前Webapp可见；</li>
</ul>
<h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h4><p>commonLoader、catalinaLoader和sharedLoader在Tomcat容器初始化的一开始，即调用Bootstrap的init方法时创建。catalinaLoader会被设置为Tomcat主线程的线程上下文类加载器，并且使用catalinaLoader加载Tomcat容器自身容器下的class。Bootstrap的init方法的部分代码见代码清单1。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        initClassLoaders();</div><div class="line"></div><div class="line">        Thread.currentThread().setContextClassLoader(catalinaLoader);</div><div class="line"></div><div class="line">        SecurityClassLoad.securityClassLoad(catalinaLoader);</div><div class="line"></div><div class="line">        <span class="comment">// Load our startup class and call its process() method</span></div><div class="line">        <span class="keyword">if</span> (log.isDebugEnabled())</div><div class="line">            log.debug(<span class="string">"Loading startup class"</span>);</div><div class="line">        Class&lt;?&gt; startupClass =</div><div class="line">            catalinaLoader.loadClass</div><div class="line">            (<span class="string">"org.apache.catalina.startup.Catalina"</span>);</div><div class="line">        Object startupInstance = startupClass.newInstance();</div><div class="line"></div><div class="line">        <span class="comment">// Set the shared extensions class loader</span></div><div class="line">        <span class="keyword">if</span> (log.isDebugEnabled())</div><div class="line">            log.debug(<span class="string">"Setting startup class properties"</span>);</div><div class="line">        String methodName = <span class="string">"setParentClassLoader"</span>;</div><div class="line">        Class&lt;?&gt; paramTypes[] = <span class="keyword">new</span> Class[<span class="number">1</span>];</div><div class="line">        paramTypes[<span class="number">0</span>] = Class.forName(<span class="string">"java.lang.ClassLoader"</span>);</div><div class="line">        Object paramValues[] = <span class="keyword">new</span> Object[<span class="number">1</span>];</div><div class="line">        paramValues[<span class="number">0</span>] = sharedLoader;</div><div class="line">        Method method =</div><div class="line">            startupInstance.getClass().getMethod(methodName, paramTypes);</div><div class="line">        method.invoke(startupInstance, paramValues);</div><div class="line"></div><div class="line">        catalinaDaemon = startupInstance;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>接下来我们关注initclassloaders方法的实现，该方法主要用来初始化commonLoader、catalinaLoader、sharedLoader。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initClassLoaders</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            commonLoader = createClassLoader(<span class="string">"common"</span>, <span class="keyword">null</span>);</div><div class="line">            <span class="keyword">if</span>( commonLoader == <span class="keyword">null</span> ) &#123;</div><div class="line">                <span class="comment">// no config file, default to this loader - we might be in a 'single' env.</span></div><div class="line">                commonLoader=<span class="keyword">this</span>.getClass().getClassLoader();</div><div class="line">            &#125;</div><div class="line">            catalinaLoader = createClassLoader(<span class="string">"server"</span>, commonLoader);</div><div class="line">            sharedLoader = createClassLoader(<span class="string">"shared"</span>, commonLoader);</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">            handleThrowable(t);</div><div class="line">            log.error(<span class="string">"Class loader creation threw exception"</span>, t);</div><div class="line">            System.exit(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>从代码中看到创建类加载器是通过调用createClassLoader方法实现的。createClassLoader的实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> ClassLoader <span class="title">createClassLoader</span><span class="params">(String name, ClassLoader parent)</span></span></div><div class="line">        <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">        String value = CatalinaProperties.getProperty(name + <span class="string">".loader"</span>);</div><div class="line">        <span class="keyword">if</span> ((value == <span class="keyword">null</span>) || (value.equals(<span class="string">""</span>)))</div><div class="line">            <span class="keyword">return</span> parent;</div><div class="line"></div><div class="line">        value = replace(value);</div><div class="line"></div><div class="line">        List&lt;Repository&gt; repositories = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">        String[] repositoryPaths = getPaths(value);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (String repository : repositoryPaths) &#123;</div><div class="line">            <span class="comment">// Check for a JAR URL repository</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</div><div class="line">                URL url = <span class="keyword">new</span> URL(repository);</div><div class="line">                repositories.add(</div><div class="line">                        <span class="keyword">new</span> Repository(repository, RepositoryType.URL));</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</div><div class="line">                <span class="comment">// Ignore</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Local repository</span></div><div class="line">            <span class="keyword">if</span> (repository.endsWith(<span class="string">"*.jar"</span>)) &#123;</div><div class="line">                repository = repository.substring</div><div class="line">                    (<span class="number">0</span>, repository.length() - <span class="string">"*.jar"</span>.length());</div><div class="line">                repositories.add(</div><div class="line">                        <span class="keyword">new</span> Repository(repository, RepositoryType.GLOB));</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (repository.endsWith(<span class="string">".jar"</span>)) &#123;</div><div class="line">                repositories.add(</div><div class="line">                        <span class="keyword">new</span> Repository(repository, RepositoryType.JAR));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                repositories.add(</div><div class="line">                        <span class="keyword">new</span> Repository(repository, RepositoryType.DIR));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ClassLoaderFactory.createClassLoader(repositories, parent);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>createClassLoader方法的执行步骤如下：</p>
<ol>
<li>获取各个类加载器相应的资源配置文件（分别为common.loader、server.loader、shared.loader），从中获取类资源路径的配置信息；</li>
<li>解析类资源路径下的各个资源位置和类型，也包括对jar资源的检查；</li>
<li>调用ClassLoaderFactory.createClassLoader(locations, types, parent)方法创建ClassLoader；</li>
</ol>
<p>我们回头看看代码清单1中的SecurityClassLoad.securityClassLoad(catalinaLoader)的实现，见代码清单4.这说明加载Tomcat容器本身的类资源的确是使用catalinaLoader来完成的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> org.apache.catalina.security;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">securityClassLoad</span><span class="params">(ClassLoader loader, <span class="keyword">boolean</span> requireSecurityManager)</span></span></div><div class="line">           <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (requireSecurityManager &amp;&amp; System.getSecurityManager() == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">return</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       loadCorePackage(loader);</div><div class="line">       loadCoyotePackage(loader);</div><div class="line">       loadLoaderPackage(loader);</div><div class="line">       loadRealmPackage(loader);</div><div class="line">       loadServletsPackage(loader);</div><div class="line">       loadSessionPackage(loader);</div><div class="line">       loadUtilPackage(loader);</div><div class="line">       loadValvesPackage(loader);</div><div class="line">       loadJavaxPackage(loader);</div><div class="line">       loadConnectorPackage(loader);</div><div class="line">       loadTomcatPackage(loader);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>securityClassLoad方法主要加载Tomcat容器所需的class，包括：</p>
<ul>
<li>Tomcat核心class，即org.apache.catalina.core路径下的class；</li>
<li>loadCoyotePackage</li>
<li>org.apache.catalina.loader.WebappClassLoader$PrivilegedFindResourceByName；</li>
<li>loadRealmPackage</li>
<li>loadServletsPackage</li>
<li>Tomcat有关session的class，即org.apache.catalina.session路径下的class；</li>
<li>Tomcat工具类的class，即org.apache.catalina.util路径下的class；</li>
<li>loadValvesPackage</li>
<li>javax.servlet.http.Cookie；</li>
<li>Tomcat处理请求的class，即org.apache.catalina.connector路径下的class；</li>
<li>Tomcat其它工具类的class，也是org.apache.catalina.util路径下的class；</li>
</ul>
<p>我们以加载Tomcat核心class的loadCorePackage方法为例，其实现见代码清单5所示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">loadCorePackage</span><span class="params">(ClassLoader loader)</span></span></div><div class="line">            <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="keyword">final</span> String basePackage = <span class="string">"org.apache.catalina.core."</span>;</div><div class="line">        loader.loadClass</div><div class="line">            (basePackage +</div><div class="line">             <span class="string">"AccessLogAdapter"</span>);</div><div class="line">        loader.loadClass</div><div class="line">            (basePackage +</div><div class="line">             <span class="string">"ApplicationContextFacade$1"</span>);</div><div class="line">        loader.loadClass</div><div class="line">            (basePackage +</div><div class="line">             <span class="string">"ApplicationDispatcher$PrivilegedForward"</span>);</div><div class="line">        loader.loadClass</div><div class="line">            (basePackage +</div><div class="line">             <span class="string">"ApplicationDispatcher$PrivilegedInclude"</span>);</div><div class="line">        loader.loadClass</div><div class="line">            (basePackage +</div><div class="line">            <span class="string">"AsyncContextImpl"</span>);</div><div class="line">        loader.loadClass</div><div class="line">            (basePackage +</div><div class="line">            <span class="string">"AsyncContextImpl$DebugException"</span>);</div><div class="line">        loader.loadClass</div><div class="line">            (basePackage +</div><div class="line">            <span class="string">"AsyncContextImpl$1"</span>);</div><div class="line">        loader.loadClass</div><div class="line">            (basePackage +</div><div class="line">            <span class="string">"AsyncListenerWrapper"</span>);</div><div class="line">        loader.loadClass</div><div class="line">            (basePackage +</div><div class="line">             <span class="string">"ContainerBase$PrivilegedAddChild"</span>);</div><div class="line">        loader.loadClass</div><div class="line">            (basePackage +</div><div class="line">             <span class="string">"DefaultInstanceManager$1"</span>);</div><div class="line">        loader.loadClass</div><div class="line">            (basePackage +</div><div class="line">             <span class="string">"DefaultInstanceManager$2"</span>);</div><div class="line">        loader.loadClass</div><div class="line">            (basePackage +</div><div class="line">             <span class="string">"DefaultInstanceManager$3"</span>);</div><div class="line">        loader.loadClass</div><div class="line">            (basePackage +</div><div class="line">             <span class="string">"DefaultInstanceManager$AnnotationCacheEntry"</span>);</div><div class="line">        loader.loadClass</div><div class="line">            (basePackage +</div><div class="line">             <span class="string">"DefaultInstanceManager$AnnotationCacheEntryType"</span>);</div><div class="line">        loader.loadClass</div><div class="line">            (basePackage +</div><div class="line">             <span class="string">"ApplicationHttpRequest$AttributeNamesEnumerator"</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>至此，有关commonLoader、catalinaLoader和sharedLoader三个类加载器的初始化以及使用catalinaLoader加载Tomcat容器自身类资源的内容已经介绍完了，但是我们还没有看到WebappClassLoader。启动StandardContext的时候会创建WebappLoader，最终调用其startInternal方法.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.apache.catalina.core;</div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"> * Start this component and implement the requirements </div><div class="line"> * of &#123;<span class="doctag">@link</span> LifecycleBase#startInternal()&#125;. </div><div class="line"> * </div><div class="line"> * <span class="doctag">@exception</span> LifecycleException if this component detects a fatal error </div><div class="line"> *  that prevents this component from being used </div><div class="line"> */  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="comment">// 省略前边的代码   </span></div><div class="line">  </div><div class="line">    <span class="keyword">if</span> (getLoader() == <span class="keyword">null</span>) &#123;  </div><div class="line">        WebappLoader webappLoader = <span class="keyword">new</span> WebappLoader(getParentClassLoader());  </div><div class="line">        webappLoader.setDelegate(getDelegate());  </div><div class="line">        setLoader(webappLoader);  </div><div class="line">    &#125;  </div><div class="line">   <span class="comment">// 省略中间的代码   </span></div><div class="line">   <span class="comment">// Start our subordinate components, if any  </span></div><div class="line">   <span class="keyword">if</span> ((loader != <span class="keyword">null</span>) &amp;&amp; (loader <span class="keyword">instanceof</span> Lifecycle))  </div><div class="line">        ((Lifecycle) loader).start();   </div><div class="line">   <span class="comment">// 省略后边的代码   </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码清单6看到首先创建WebappLoader实例，然后调用WebappLoader的start方法，start又调用了startInternal方法，WebappLoader的startInternal的实现见代码清单7.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (log.isDebugEnabled())</div><div class="line">            log.debug(sm.getString(<span class="string">"webappLoader.starting"</span>));</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (context.getResources() == <span class="keyword">null</span>) &#123;</div><div class="line">            log.info(<span class="string">"No resources for "</span> + context);</div><div class="line">            setState(LifecycleState.STARTING);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Construct a class loader based on our current repositories list</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            classLoader = createClassLoader();</div><div class="line">            classLoader.setResources(context.getResources());</div><div class="line">            classLoader.setDelegate(<span class="keyword">this</span>.delegate);</div><div class="line"></div><div class="line">            <span class="comment">// Configure our repositories</span></div><div class="line">            setClassPath();</div><div class="line"></div><div class="line">            setPermissions();</div><div class="line"></div><div class="line">            ((Lifecycle) classLoader).start();</div><div class="line"></div><div class="line">            String contextName = context.getName();</div><div class="line">            <span class="keyword">if</span> (!contextName.startsWith(<span class="string">"/"</span>)) &#123;</div><div class="line">                contextName = <span class="string">"/"</span> + contextName;</div><div class="line">            &#125;</div><div class="line">            ObjectName cloname = <span class="keyword">new</span> ObjectName(context.getDomain() + <span class="string">":type="</span> +</div><div class="line">                    classLoader.getClass().getSimpleName() + <span class="string">",host="</span> +</div><div class="line">                    context.getParent().getName() + <span class="string">",context="</span> + contextName);</div><div class="line">            Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>)</div><div class="line">                .registerComponent(classLoader, cloname, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">            t = ExceptionUtils.unwrapInvocationTargetException(t);</div><div class="line">            ExceptionUtils.handleThrowable(t);</div><div class="line">            log.error( <span class="string">"LifecycleException "</span>, t );</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(<span class="string">"start: "</span>, t);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setState(LifecycleState.STARTING);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>我们看到代码清单7中通过调用createClassLoader来创建类加载器，并且设置其资源路径为当前Webapp下的类资源。最后我们看看createClassLoader的实现，见代码清单8.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Create associated classLoader.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> WebappClassLoaderBase <span class="title">createClassLoader</span><span class="params">()</span></span></div><div class="line">       <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">       Class&lt;?&gt; clazz = Class.forName(loaderClass);</div><div class="line">       WebappClassLoaderBase classLoader = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (parentClassLoader == <span class="keyword">null</span>) &#123;</div><div class="line">           parentClassLoader = context.getParentClassLoader();</div><div class="line">       &#125;</div><div class="line">       Class&lt;?&gt;[] argTypes = &#123; ClassLoader.class &#125;;</div><div class="line">       Object[] args = &#123; parentClassLoader &#125;;</div><div class="line">       Constructor&lt;?&gt; constr = clazz.getConstructor(argTypes);</div><div class="line">       classLoader = (WebappClassLoaderBase) constr.newInstance(args);</div><div class="line"></div><div class="line">       <span class="keyword">return</span> classLoader;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这里loaderClass的值是字符串org.apache.catalina.loader.WebappClassLoader，通过反射来实例化WebappClassLoader。由于每个Webapp下的类资源由不同的WebappClassLoader负责加载，因此各个Webapp下的类资源是独立的。至此，整个Tomcat的类加载体系构建完毕。</p>
<h3 id="第二章-server-xml文件的加载和解析"><a href="#第二章-server-xml文件的加载和解析" class="headerlink" title="第二章 server.xml文件的加载和解析"></a>第二章 server.xml文件的加载和解析</h3><p>作为Java程序员，对于Tomcat的server.xml想必都不陌生。本章主要对server.xml文件是如何加载和解析进行分析。</p>
<h4 id="1-web-xml"><a href="#1-web-xml" class="headerlink" title="1.web.xml"></a>1.web.xml</h4><p>首先让我们来查看一下web.xml内容</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></div><div class="line">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></div><div class="line">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</div><div class="line">  <span class="attr">version</span>=<span class="string">"3.1"</span></div><div class="line">  <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Tomcat Documentation<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span></div><div class="line">     Tomcat Documentation.</div><div class="line">  <span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-加载过程分析"><a href="#2-加载过程分析" class="headerlink" title="2.加载过程分析"></a>2.加载过程分析</h4><p>bootstrap中load方法用于加载tomact的server.xml,实际是通过反射调用Catalina的load方法.代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">    * Load daemon.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(String[] arguments)</span></span></div><div class="line">       <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">       <span class="comment">// Call the load() method</span></div><div class="line">       String methodName = <span class="string">"load"</span>;</div><div class="line">       Object param[];</div><div class="line">       Class&lt;?&gt; paramTypes[];</div><div class="line">       <span class="keyword">if</span> (arguments==<span class="keyword">null</span> || arguments.length==<span class="number">0</span>) &#123;</div><div class="line">           paramTypes = <span class="keyword">null</span>;</div><div class="line">           param = <span class="keyword">null</span>;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           paramTypes = <span class="keyword">new</span> Class[<span class="number">1</span>];</div><div class="line">           paramTypes[<span class="number">0</span>] = arguments.getClass();</div><div class="line">           param = <span class="keyword">new</span> Object[<span class="number">1</span>];</div><div class="line">           param[<span class="number">0</span>] = arguments;</div><div class="line">       &#125;</div><div class="line">       Method method =</div><div class="line">           catalinaDaemon.getClass().getMethod(methodName, paramTypes);</div><div class="line">       <span class="keyword">if</span> (log.isDebugEnabled())</div><div class="line">           log.debug(<span class="string">"Calling startup class "</span> + method);</div><div class="line">       method.invoke(catalinaDaemon, param);</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>Catalina的load方法实现如下代码所示。其中load方法主要执行如是过程：</p>
<ol>
<li>initDirs()用于对catalina.home和catalina.base的一些检查工作。</li>
<li>initNaming()给系统设置java.naming.factory.url.pkgs和java.naming.factory.initial。</li>
<li>createStartDigester();创建并配置将要用来启动的Digester实例，并且设置一些列Rule，具体映射到server.xml。</li>
<li>FileInputStream获取conf/server.xml配置文件输入流</li>
<li>将FileInputStream封装为InputSource，并且调用Digester的parse方法进行解析。</li>
<li>initStreams()对输出流、错误流重定向</li>
<li>初始化server</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Start a new server instance.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> t1 = System.nanoTime();</div><div class="line"></div><div class="line">        initDirs();</div><div class="line"></div><div class="line">        <span class="comment">// Before digester - it may be needed</span></div><div class="line">        initNaming();</div><div class="line"></div><div class="line">        <span class="comment">// Create and execute our Digester</span></div><div class="line">        Digester digester = createStartDigester();</div><div class="line"></div><div class="line">        InputSource inputSource = <span class="keyword">null</span>;</div><div class="line">        InputStream inputStream = <span class="keyword">null</span>;</div><div class="line">        File file = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                file = configFile();</div><div class="line">                inputStream = <span class="keyword">new</span> FileInputStream(file);</div><div class="line">                inputSource = <span class="keyword">new</span> InputSource(file.toURI().toURL().toString());</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</div><div class="line">                    log.debug(sm.getString(<span class="string">"catalina.configFail"</span>, file), e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (inputStream == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    inputStream = getClass().getClassLoader()</div><div class="line">                        .getResourceAsStream(getConfigFile());</div><div class="line">                    inputSource = <span class="keyword">new</span> InputSource</div><div class="line">                        (getClass().getClassLoader()</div><div class="line">                         .getResource(getConfigFile()).toString());</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</div><div class="line">                        log.debug(sm.getString(<span class="string">"catalina.configFail"</span>,</div><div class="line">                                getConfigFile()), e);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// This should be included in catalina.jar</span></div><div class="line">            <span class="comment">// Alternative: don't bother with xml, just create it manually.</span></div><div class="line">            <span class="keyword">if</span> (inputStream == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    inputStream = getClass().getClassLoader()</div><div class="line">                            .getResourceAsStream(<span class="string">"server-embed.xml"</span>);</div><div class="line">                    inputSource = <span class="keyword">new</span> InputSource</div><div class="line">                    (getClass().getClassLoader()</div><div class="line">                            .getResource(<span class="string">"server-embed.xml"</span>).toString());</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</div><div class="line">                        log.debug(sm.getString(<span class="string">"catalina.configFail"</span>,</div><div class="line">                                <span class="string">"server-embed.xml"</span>), e);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (inputStream == <span class="keyword">null</span> || inputSource == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span>  (file == <span class="keyword">null</span>) &#123;</div><div class="line">                    log.warn(sm.getString(<span class="string">"catalina.configFail"</span>,</div><div class="line">                            getConfigFile() + <span class="string">"] or [server-embed.xml]"</span>));</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    log.warn(sm.getString(<span class="string">"catalina.configFail"</span>,</div><div class="line">                            file.getAbsolutePath()));</div><div class="line">                    <span class="keyword">if</span> (file.exists() &amp;&amp; !file.canRead()) &#123;</div><div class="line">                        log.warn(<span class="string">"Permissions incorrect, read permission is not allowed on the file."</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                inputSource.setByteStream(inputStream);</div><div class="line">                digester.push(<span class="keyword">this</span>);</div><div class="line">                digester.parse(inputSource);</div><div class="line">            &#125; <span class="keyword">catch</span> (SAXParseException spe) &#123;</div><div class="line">                log.warn(<span class="string">"Catalina.start using "</span> + getConfigFile() + <span class="string">": "</span> +</div><div class="line">                        spe.getMessage());</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                log.warn(<span class="string">"Catalina.start using "</span> + getConfigFile() + <span class="string">": "</span> , e);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    inputStream.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    <span class="comment">// Ignore</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        getServer().setCatalina(<span class="keyword">this</span>);</div><div class="line">        getServer().setCatalinaHome(Bootstrap.getCatalinaHomeFile());</div><div class="line">        getServer().setCatalinaBase(Bootstrap.getCatalinaBaseFile());</div><div class="line"></div><div class="line">        <span class="comment">// Stream redirection</span></div><div class="line">        initStreams();</div><div class="line"></div><div class="line">        <span class="comment">// Start the new server</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            getServer().init();</div><div class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</div><div class="line">            <span class="keyword">if</span> (Boolean.getBoolean(<span class="string">"org.apache.catalina.startup.EXIT_ON_INIT_FAILURE"</span>)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> java.lang.Error(e);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                log.error(<span class="string">"Catalina.start"</span>, e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> t2 = System.nanoTime();</div><div class="line">        <span class="keyword">if</span>(log.isInfoEnabled()) &#123;</div><div class="line">            log.info(<span class="string">"Initialization processed in "</span> + ((t2 - t1) / <span class="number">1000000</span>) + <span class="string">" ms"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="3-规则"><a href="#3-规则" class="headerlink" title="3.规则"></a>3.规则</h4><p>在针对上述加载过程具体分析及正式介绍Digester的parse方法的解析过程前，我们先要掌握一些规则相关的内容。<br>Tomcat将server.xml文件中的所有元素上的属性都抽象为Rule，以Server元素为例，在内存中对应Server实例，Server实例的属性值就来自于Server元素的属性值。通过对规则（Rule）的应用，最终改变Server实例的属性值。</p>
<p>rule抽象类，结构如下：</p>
<p><img src="http://i.imgur.com/hQoWO8b.png" alt=""></p>
<p>主要接口介绍：</p>
<ul>
<li>getDigester：获取Digester实例；</li>
<li>setDigester：设置Digester实例；</li>
<li>getNamespaceURI：获取Rule所在的相对命名空间URI；</li>
<li>setNamespaceURI：设置Rule所在的相对命名空间URI；</li>
<li>begin(String namespace, String name, Attributes attributes)：此方法在遇到一个匹配的XML元素的开头时被调用，如：<server>。</server></li>
<li>body(String namespace, String name, String text)：在遇到匹配XML元素的body时，此方法被调用，如进入<server>标签内部时。</server></li>
<li>end(String namespace, String name)：此方法在遇到一个匹配的XML元素的末尾时被调用。如：。</li>
</ul>
<p>Rule目前有很多实现类，如：NodeCreateRule，AbsoluteOrderingRule、CallParamRule、ConnectorCreateRule等。下图展示了Rule的部分实现类：<br><img src="http://i.imgur.com/8oFCvId.png" alt=""></p>
<h4 id="4-SAX"><a href="#4-SAX" class="headerlink" title="4.SAX"></a>4.SAX</h4><p><strong>simple api for xml</strong></p>
<p>相比于 DOM 而言 SAX 是一种速度更快，更有效，占用内存更少的解析 XML 文件的方法。它是逐行扫描，可以做到边扫描边解析，因此 SAX 可以在解析文档的任意时刻停止解析。</p>
<p>SAX 是基于事件驱动的。</p>
<p>SAX 不用解析完整个文档，在按内容顺序解析文档过程中， SAX 会判断当前读到的字符是否符合 XML 文件语法中的某部分。如果符合某部分，则会触发事件。</p>
<p>所谓触发事件，就是调用一些回调方法。在用 SAX 解析 xml 文档时候，在读取到文档开始和结束标签时候就会回调一个事件，在读取到其他节点与内容时候也会回调一个事件。</p>
<p>在 SAX 接口中，事件源是 org.xml.sax 包中的 XMLReader ，它通过 parser() 方法来解析 XML 文档，并产生事件。事件处理器是 org.xml.sax 包中 ContentHander 、 DTDHander 、 ErrorHandler ，以及 EntityResolver 这 4 个接口。</p>
<p><img src="http://i.imgur.com/ZteQz4W.png" alt=""></p>
<p>我们用来做内容解析的回调方法一般都定义在 ContentHandler 接口中 。ContentHandler 接口常用的方法：</p>
<ul>
<li>startDocument() :当遇到文档的开头的时候，调用这个方法，可以在其中做一些预处理的工作。 </li>
<li>endDocument() :当文档结束的时候，调用这个方法，可以在其中做一些善后的工作。   </li>
<li>startElement(String namespaceURI, String localName,String qName, Attributes atts):当读到开始标签的时候，会调用这个方法。 namespaceURI 就是命名空间， localName 是不带命名空间前缀的标签名， qName 是带命名空间前缀的标签名。通过 atts 可以得到所有的属性名和相应的值。 </li>
<li>endElement(String uri, String localName, String name):在遇到结束标签的时候，调用这个方法。</li>
<li>characters(char[] ch, int start, int length):这个方法用来处理在 XML 文件中读到的内容。例如： <high data="30"> 主要目的是获取 high 标签中的值。</high></li>
</ul>
<p>使用 SAX 解析 XML 文件一般有以下五个步骤： </p>
<ol>
<li>创建一个 SAXParserFactory 对象； </li>
<li>调用 SAXParserFactory 中的 newSAXParser 方法创建一个 SAXParser 对象； </li>
<li>然后在调用 SAXParser 中的 getXMLReader 方法获取一个 XMLReader 对象；</li>
<li>实例化一个 DefaultHandler 对象；</li>
<li>连接事件源对象 XMLReader 到事件处理类 DefaultHandler 中；</li>
<li>调用 XMLReader 的 parse 方法从输入源中获取到的 xml 数据；</li>
<li>通过 DefaultHandler 返回我们需要的数据集合。</li>
</ol>
<h4 id="5-解析过程分析"><a href="#5-解析过程分析" class="headerlink" title="5.解析过程分析"></a>5.解析过程分析</h4><p>回顾第二小节讲的catalina中load方法执行步骤：</p>
<blockquote>
<p>Catalina的load方法实现如下代码所示。其中load方法主要执行如是过程：</p>
<ol>
<li>initDirs()用于对catalina.home和catalina.base的一些检查工作。</li>
<li>initNaming()给系统设置java.naming.factory.url.pkgs和java.naming.factory.initial。</li>
<li>createStartDigester();创建并配置将要用来启动的Digester实例，并且设置一些列Rule，具体映射到server.xml。</li>
<li>FileInputStream获取conf/server.xml配置文件输入流</li>
<li>将FileInputStream封装为InputSource，并且调用Digester的parse方法进行解析。</li>
<li>initStreams()对输出流、错误流重定向</li>
<li>初始化server</li>
</ol>
</blockquote>
<p>首先来查看createStartDigester方法。实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Create and configure the Digester we will be using for startup.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> Digester <span class="title">createStartDigester</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> t1=System.currentTimeMillis();</div><div class="line">        <span class="comment">// Initialize the digester</span></div><div class="line">        Digester digester = <span class="keyword">new</span> Digester();</div><div class="line">        digester.setValidating(<span class="keyword">false</span>);</div><div class="line">        digester.setRulesValidation(<span class="keyword">true</span>);</div><div class="line">        HashMap&lt;Class&lt;?&gt;, List&lt;String&gt;&gt; fakeAttributes = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        ArrayList&lt;String&gt; attrs = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        attrs.add(<span class="string">"className"</span>);</div><div class="line">        fakeAttributes.put(Object.class, attrs);</div><div class="line">        digester.setFakeAttributes(fakeAttributes);</div><div class="line">        digester.setUseContextClassLoader(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Configure the actions we will be using</span></div><div class="line">        digester.addObjectCreate(<span class="string">"Server"</span>,</div><div class="line">                                 <span class="string">"org.apache.catalina.core.StandardServer"</span>,</div><div class="line">                                 <span class="string">"className"</span>);</div><div class="line">        digester.addSetProperties(<span class="string">"Server"</span>);</div><div class="line">        digester.addSetNext(<span class="string">"Server"</span>,</div><div class="line">                            <span class="string">"setServer"</span>,</div><div class="line">                            <span class="string">"org.apache.catalina.Server"</span>);</div><div class="line"></div><div class="line">        digester.addObjectCreate(<span class="string">"Server/GlobalNamingResources"</span>,</div><div class="line">                                 <span class="string">"org.apache.catalina.deploy.NamingResourcesImpl"</span>);</div><div class="line">        digester.addSetProperties(<span class="string">"Server/GlobalNamingResources"</span>);</div><div class="line">        digester.addSetNext(<span class="string">"Server/GlobalNamingResources"</span>,</div><div class="line">                            <span class="string">"setGlobalNamingResources"</span>,</div><div class="line">                            <span class="string">"org.apache.catalina.deploy.NamingResourcesImpl"</span>);</div><div class="line"></div><div class="line">        digester.addObjectCreate(<span class="string">"Server/Listener"</span>,</div><div class="line">                                 <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></div><div class="line">                                 <span class="string">"className"</span>);</div><div class="line">        digester.addSetProperties(<span class="string">"Server/Listener"</span>);</div><div class="line">        digester.addSetNext(<span class="string">"Server/Listener"</span>,</div><div class="line">                            <span class="string">"addLifecycleListener"</span>,</div><div class="line">                            <span class="string">"org.apache.catalina.LifecycleListener"</span>);</div><div class="line"></div><div class="line">        digester.addObjectCreate(<span class="string">"Server/Service"</span>,</div><div class="line">                                 <span class="string">"org.apache.catalina.core.StandardService"</span>,</div><div class="line">                                 <span class="string">"className"</span>);</div><div class="line">        digester.addSetProperties(<span class="string">"Server/Service"</span>);</div><div class="line">        digester.addSetNext(<span class="string">"Server/Service"</span>,</div><div class="line">                            <span class="string">"addService"</span>,</div><div class="line">                            <span class="string">"org.apache.catalina.Service"</span>);</div><div class="line"></div><div class="line">        digester.addObjectCreate(<span class="string">"Server/Service/Listener"</span>,</div><div class="line">                                 <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></div><div class="line">                                 <span class="string">"className"</span>);</div><div class="line">        digester.addSetProperties(<span class="string">"Server/Service/Listener"</span>);</div><div class="line">        digester.addSetNext(<span class="string">"Server/Service/Listener"</span>,</div><div class="line">                            <span class="string">"addLifecycleListener"</span>,</div><div class="line">                            <span class="string">"org.apache.catalina.LifecycleListener"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//Executor</span></div><div class="line">        digester.addObjectCreate(<span class="string">"Server/Service/Executor"</span>,</div><div class="line">                         <span class="string">"org.apache.catalina.core.StandardThreadExecutor"</span>,</div><div class="line">                         <span class="string">"className"</span>);</div><div class="line">        digester.addSetProperties(<span class="string">"Server/Service/Executor"</span>);</div><div class="line"></div><div class="line">        digester.addSetNext(<span class="string">"Server/Service/Executor"</span>,</div><div class="line">                            <span class="string">"addExecutor"</span>,</div><div class="line">                            <span class="string">"org.apache.catalina.Executor"</span>);</div><div class="line"></div><div class="line"></div><div class="line">        digester.addRule(<span class="string">"Server/Service/Connector"</span>,</div><div class="line">                         <span class="keyword">new</span> ConnectorCreateRule());</div><div class="line">        digester.addRule(<span class="string">"Server/Service/Connector"</span>,</div><div class="line">                         <span class="keyword">new</span> SetAllPropertiesRule(<span class="keyword">new</span> String[]&#123;<span class="string">"executor"</span>&#125;));</div><div class="line">        digester.addSetNext(<span class="string">"Server/Service/Connector"</span>,</div><div class="line">                            <span class="string">"addConnector"</span>,</div><div class="line">                            <span class="string">"org.apache.catalina.connector.Connector"</span>);</div><div class="line"></div><div class="line"></div><div class="line">        digester.addObjectCreate(<span class="string">"Server/Service/Connector/Listener"</span>,</div><div class="line">                                 <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></div><div class="line">                                 <span class="string">"className"</span>);</div><div class="line">        digester.addSetProperties(<span class="string">"Server/Service/Connector/Listener"</span>);</div><div class="line">        digester.addSetNext(<span class="string">"Server/Service/Connector/Listener"</span>,</div><div class="line">                            <span class="string">"addLifecycleListener"</span>,</div><div class="line">                            <span class="string">"org.apache.catalina.LifecycleListener"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Add RuleSets for nested elements</span></div><div class="line">        digester.addRuleSet(<span class="keyword">new</span> NamingRuleSet(<span class="string">"Server/GlobalNamingResources/"</span>));</div><div class="line">        digester.addRuleSet(<span class="keyword">new</span> EngineRuleSet(<span class="string">"Server/Service/"</span>));</div><div class="line">        digester.addRuleSet(<span class="keyword">new</span> HostRuleSet(<span class="string">"Server/Service/Engine/"</span>));</div><div class="line">        digester.addRuleSet(<span class="keyword">new</span> ContextRuleSet(<span class="string">"Server/Service/Engine/Host/"</span>));</div><div class="line">        addClusterRuleSet(digester, <span class="string">"Server/Service/Engine/Host/Cluster/"</span>);</div><div class="line">        digester.addRuleSet(<span class="keyword">new</span> NamingRuleSet(<span class="string">"Server/Service/Engine/Host/Context/"</span>));</div><div class="line"></div><div class="line">        <span class="comment">// When the 'engine' is found, set the parentClassLoader.</span></div><div class="line">        digester.addRule(<span class="string">"Server/Service/Engine"</span>,</div><div class="line">                         <span class="keyword">new</span> SetParentClassLoaderRule(parentClassLoader));</div><div class="line">        addClusterRuleSet(digester, <span class="string">"Server/Service/Engine/Cluster/"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">long</span> t2=System.currentTimeMillis();</div><div class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</div><div class="line">            log.debug(<span class="string">"Digester for server.xml created "</span> + ( t2-t1 ));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (digester);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>代码清单1首先创建Digester，Digester继承了DefaultHandler2，而DefaultHandler默认实现了DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2 这几个接口，代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultHandler2</span> <span class="keyword">extends</span> <span class="title">DefaultHandler</span></span></div><div class="line">    <span class="keyword">implements</span> <span class="title">LexicalHandler</span>, <span class="title">DeclHandler</span>, <span class="title">EntityResolver2</span></div></pre></td></tr></table></figure>
<p>如果阅读DefaultHandler的源码，发现它的所有实现都是空实现，看来要发挥解析作用，只能依靠Digester自己了，digester中部分实现如下;</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Process notification of the end of the document being reached.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@exception</span> SAXException if a parsing error is to be reported</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (saxLog.isDebugEnabled()) &#123;</div><div class="line">            <span class="keyword">if</span> (getCount() &gt; <span class="number">1</span>) &#123;</div><div class="line">                saxLog.debug(<span class="string">"endDocument():  "</span> + getCount() + <span class="string">" elements left"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                saxLog.debug(<span class="string">"endDocument()"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (getCount() &gt; <span class="number">1</span>) &#123;</div><div class="line">            pop();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Fire "finish" events for all defined rules</span></div><div class="line">        Iterator&lt;Rule&gt; rules = getRules().rules().iterator();</div><div class="line">        <span class="keyword">while</span> (rules.hasNext()) &#123;</div><div class="line">            Rule rule = rules.next();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                rule.finish();</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                log.error(<span class="string">"Finish event threw exception"</span>, e);</div><div class="line">                <span class="keyword">throw</span> createSAXException(e);</div><div class="line">            &#125; <span class="keyword">catch</span> (Error e) &#123;</div><div class="line">                log.error(<span class="string">"Finish event threw error"</span>, e);</div><div class="line">                <span class="keyword">throw</span> e;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Perform final cleanup</span></div><div class="line">        clear();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Process notification of the end of an XML element being reached.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> namespaceURI - The Namespace URI, or the empty string if the</div><div class="line">     *   element has no Namespace URI or if Namespace processing is not</div><div class="line">     *   being performed.</div><div class="line">     * <span class="doctag">@param</span> localName - The local name (without prefix), or the empty</div><div class="line">     *   string if Namespace processing is not being performed.</div><div class="line">     * <span class="doctag">@param</span> qName - The qualified XML 1.0 name (with prefix), or the</div><div class="line">     *   empty string if qualified names are not available.</div><div class="line">     * <span class="doctag">@exception</span> SAXException if a parsing error is to be reported</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String namespaceURI, String localName, String qName)</span></span></div><div class="line">            <span class="keyword">throws</span> SAXException &#123;</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> debug = log.isDebugEnabled();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (debug) &#123;</div><div class="line">            <span class="keyword">if</span> (saxLog.isDebugEnabled()) &#123;</div><div class="line">                saxLog.debug(<span class="string">"endElement("</span> + namespaceURI + <span class="string">","</span> + localName + <span class="string">","</span> + qName + <span class="string">")"</span>);</div><div class="line">            &#125;</div><div class="line">            log.debug(<span class="string">"  match='"</span> + match + <span class="string">"'"</span>);</div><div class="line">            log.debug(<span class="string">"  bodyText='"</span> + bodyText + <span class="string">"'"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Parse system properties</span></div><div class="line">        bodyText = updateBodyText(bodyText);</div><div class="line"></div><div class="line">        <span class="comment">// the actual element name is either in localName or qName, depending</span></div><div class="line">        <span class="comment">// on whether the parser is namespace aware</span></div><div class="line">        String name = localName;</div><div class="line">        <span class="keyword">if</span> ((name == <span class="keyword">null</span>) || (name.length() &lt; <span class="number">1</span>)) &#123;</div><div class="line">            name = qName;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Fire "body" events for all relevant rules</span></div><div class="line">        List&lt;Rule&gt; rules = matches.pop();</div><div class="line">        <span class="keyword">if</span> ((rules != <span class="keyword">null</span>) &amp;&amp; (rules.size() &gt; <span class="number">0</span>)) &#123;</div><div class="line">            String bodyText = <span class="keyword">this</span>.bodyText.toString();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rules.size(); i++) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Rule rule = rules.get(i);</div><div class="line">                    <span class="keyword">if</span> (debug) &#123;</div><div class="line">                        log.debug(<span class="string">"  Fire body() for "</span> + rule);</div><div class="line">                    &#125;</div><div class="line">                    rule.body(namespaceURI, name, bodyText);</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    log.error(<span class="string">"Body event threw exception"</span>, e);</div><div class="line">                    <span class="keyword">throw</span> createSAXException(e);</div><div class="line">                &#125; <span class="keyword">catch</span> (Error e) &#123;</div><div class="line">                    log.error(<span class="string">"Body event threw error"</span>, e);</div><div class="line">                    <span class="keyword">throw</span> e;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (debug) &#123;</div><div class="line">                log.debug(<span class="string">"  No rules found matching '"</span> + match + <span class="string">"'."</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (rulesValidation) &#123;</div><div class="line">                log.warn(<span class="string">"  No rules found matching '"</span> + match + <span class="string">"'."</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Recover the body text from the surrounding element</span></div><div class="line">        bodyText = bodyTexts.pop();</div><div class="line"></div><div class="line">        <span class="comment">// Fire "end" events for all relevant rules in reverse order</span></div><div class="line">        <span class="keyword">if</span> (rules != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rules.size(); i++) &#123;</div><div class="line">                <span class="keyword">int</span> j = (rules.size() - i) - <span class="number">1</span>;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Rule rule = rules.get(j);</div><div class="line">                    <span class="keyword">if</span> (debug) &#123;</div><div class="line">                        log.debug(<span class="string">"  Fire end() for "</span> + rule);</div><div class="line">                    &#125;</div><div class="line">                    rule.end(namespaceURI, name);</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    log.error(<span class="string">"End event threw exception"</span>, e);</div><div class="line">                    <span class="keyword">throw</span> createSAXException(e);</div><div class="line">                &#125; <span class="keyword">catch</span> (Error e) &#123;</div><div class="line">                    log.error(<span class="string">"End event threw error"</span>, e);</div><div class="line">                    <span class="keyword">throw</span> e;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Recover the previous match expression</span></div><div class="line">        <span class="keyword">int</span> slash = match.lastIndexOf(<span class="string">'/'</span>);</div><div class="line">        <span class="keyword">if</span> (slash &gt;= <span class="number">0</span>) &#123;</div><div class="line">            match = match.substring(<span class="number">0</span>, slash);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            match = <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>代码清单1中创建完Digester后，会调用addObjectCreate、addSetProperties、addSetNext方法陆续添加很多Rule，这些方法的实现如代码清单3：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObjectCreate</span><span class="params">(String pattern, String className,  </span></span></div><div class="line">                            String attributeName) &#123;  </div><div class="line">    addRule(pattern,  </div><div class="line">            <span class="keyword">new</span> ObjectCreateRule(className, attributeName));  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSetProperties</span><span class="params">(String pattern)</span> </span>&#123;  </div><div class="line">    addRule(pattern,  </div><div class="line">            <span class="keyword">new</span> SetPropertiesRule());  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSetNext</span><span class="params">(String pattern, String methodName,  </span></span></div><div class="line">                       String paramType) &#123;  </div><div class="line">    addRule(pattern,  </div><div class="line">            <span class="keyword">new</span> SetNextRule(methodName, paramType));  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上述代码我们看到这三个方法分别创建ObjectCreateRule、SetPropertiesRule及SetNextRule。为了简化理解我们以Server相关的Rule为例，在createStartDigester中，如代码清单4：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">digester.addObjectCreate(<span class="string">"Server"</span>,  </div><div class="line">                         <span class="string">"org.apache.catalina.core.StandardServer"</span>,  </div><div class="line">                         <span class="string">"className"</span>);  </div><div class="line">digester.addSetProperties(<span class="string">"Server"</span>);  </div><div class="line">digester.addSetNext(<span class="string">"Server"</span>,  </div><div class="line">                    <span class="string">"setServer"</span>,  </div><div class="line">                    <span class="string">"org.apache.catalina.Server"</span>);</div></pre></td></tr></table></figure>
<p>根据代码清单3的实现，我们知道最终会创建ObjectCreateRule、SetPropertiesRule及SetNextRule，并且调用addRule方法。addRule方法首先调用getRules方法获取RulesBase，然后调用RulesBase的add方法。addRule方法的实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRule</span><span class="params">(String pattern, Rule rule)</span> </span>&#123;  </div><div class="line">  </div><div class="line">    rule.setDigester(<span class="keyword">this</span>);  </div><div class="line">    getRules().add(pattern, rule);  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">public</span> Rules <span class="title">getRules</span><span class="params">()</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.rules == <span class="keyword">null</span>) &#123;  </div><div class="line">        <span class="keyword">this</span>.rules = <span class="keyword">new</span> RulesBase();  </div><div class="line">        <span class="keyword">this</span>.rules.setDigester(<span class="keyword">this</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>.rules);  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RulesBase的add方法的实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Register a new Rule instance matching the specified pattern.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> pattern Nesting pattern to be matched for this Rule</div><div class="line">     * <span class="doctag">@param</span> rule Rule instance to be registered</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String pattern, Rule rule)</span> </span>&#123;</div><div class="line">        <span class="comment">// to help users who accidently add '/' to the end of their patterns</span></div><div class="line">        <span class="keyword">int</span> patternLength = pattern.length();</div><div class="line">        <span class="keyword">if</span> (patternLength&gt;<span class="number">1</span> &amp;&amp; pattern.endsWith(<span class="string">"/"</span>)) &#123;</div><div class="line">            pattern = pattern.substring(<span class="number">0</span>, patternLength-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        List&lt;Rule&gt; list = cache.get(pattern);</div><div class="line">        <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</div><div class="line">            list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            cache.put(pattern, list);</div><div class="line">        &#125;</div><div class="line">        list.add(rule);</div><div class="line">        rules.add(rule);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.digester != <span class="keyword">null</span>) &#123;</div><div class="line">            rule.setDigester(<span class="keyword">this</span>.digester);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.namespaceURI != <span class="keyword">null</span>) &#123;</div><div class="line">            rule.setNamespaceURI(<span class="keyword">this</span>.namespaceURI);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>其中，cache的数据结构为HashMap<string,list<rule>&gt;，每个键值维护一个List<rule>，由此可知，对Server标签来说，对应的Rule列表为ObjectCreateRule、SetPropertiesRule及SetNextRule。</rule></string,list<rule></p>
<p>Digester解析XML的入口是其parse方法，其处理步骤如下：</p>
<ol>
<li>创建XMLReader ；</li>
<li>使用XMLReader解析XML。</li>
</ol>
<p>parse方法的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">parse</span><span class="params">(InputSource input)</span> <span class="keyword">throws</span> IOException, SAXException </span>&#123;  </div><div class="line">  </div><div class="line">    configure();  </div><div class="line">    getXMLReader().parse(input);  </div><div class="line">    <span class="keyword">return</span> (root);  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>getXMLReader方法调用getParser创建SAXParser ，然后调用SAXParser 的getXMLReader方法创建XMLReader ，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Return the XMLReader to be used for parsing the input document.</div><div class="line">     *</div><div class="line">     * FIX ME: there is a bug in JAXP/XERCES that prevent the use of a</div><div class="line">     * parser that contains a schema with a DTD.</div><div class="line">     * <span class="doctag">@exception</span> SAXException if no XMLReader can be instantiated</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> XMLReader <span class="title">getXMLReader</span><span class="params">()</span> <span class="keyword">throws</span> SAXException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (reader == <span class="keyword">null</span>) &#123;</div><div class="line">            reader = getParser().getXMLReader();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        reader.setDTDHandler(<span class="keyword">this</span>);</div><div class="line">        reader.setContentHandler(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (entityResolver == <span class="keyword">null</span>) &#123;</div><div class="line">            reader.setEntityResolver(<span class="keyword">this</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            reader.setEntityResolver(entityResolver);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        reader.setProperty(<span class="string">"http://xml.org/sax/properties/lexical-handler"</span>, <span class="keyword">this</span>);</div><div class="line"></div><div class="line">        reader.setErrorHandler(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> reader;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>getParser方法调用getFactory方法创建SAXParserFactory，然后调用SAXParserFactory的newSAXParser方法创建SAXParser ，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> SAXParser <span class="title">getParser</span><span class="params">()</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="comment">// Return the parser we already created (if any)  </span></div><div class="line">    <span class="keyword">if</span> (parser != <span class="keyword">null</span>) &#123;  </div><div class="line">        <span class="keyword">return</span> (parser);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">// Create a new parser  </span></div><div class="line">    <span class="keyword">try</span> &#123;  </div><div class="line">        parser = getFactory().newSAXParser();  </div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">        log.error(<span class="string">"Digester.getParser: "</span>, e);  </div><div class="line">        <span class="keyword">return</span> (<span class="keyword">null</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> (parser);  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>getFactory方法使用SAX的API生成SAXParserFactory实例，代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Return the SAXParserFactory we will use, creating one if necessary.</div><div class="line">     * <span class="doctag">@throws</span> ParserConfigurationException</div><div class="line">     * <span class="doctag">@throws</span> SAXNotSupportedException</div><div class="line">     * <span class="doctag">@throws</span> SAXNotRecognizedException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> SAXParserFactory <span class="title">getFactory</span><span class="params">()</span> <span class="keyword">throws</span> SAXNotRecognizedException, SAXNotSupportedException,</span></div><div class="line">            ParserConfigurationException &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</div><div class="line">            factory = SAXParserFactory.newInstance();</div><div class="line"></div><div class="line">            factory.setNamespaceAware(namespaceAware);</div><div class="line">            <span class="comment">// Preserve xmlns attributes</span></div><div class="line">            <span class="keyword">if</span> (namespaceAware) &#123;</div><div class="line">                factory.setFeature(<span class="string">"http://xml.org/sax/features/namespace-prefixes"</span>, <span class="keyword">true</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            factory.setValidating(validating);</div><div class="line">            <span class="keyword">if</span> (validating) &#123;</div><div class="line">                <span class="comment">// Enable DTD validation</span></div><div class="line">                factory.setFeature(<span class="string">"http://xml.org/sax/features/validation"</span>, <span class="keyword">true</span>);</div><div class="line">                <span class="comment">// Enable schema validation</span></div><div class="line">                factory.setFeature(<span class="string">"http://apache.org/xml/features/validation/schema"</span>, <span class="keyword">true</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (factory);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>XMLReader解析XML时，会生成事件，回调Digester的startDocument方法，解析的第一个元素是Server，此时回调Digester的startElement方法，入参Attributes list即Server上的属性，如port、shutdown等，入参qName即为Server。startElement方法的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Process notification of the start of an XML element being reached.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> namespaceURI The Namespace URI, or the empty string if the element</div><div class="line">     *   has no Namespace URI or if Namespace processing is not being performed.</div><div class="line">     * <span class="doctag">@param</span> localName The local name (without prefix), or the empty</div><div class="line">     *   string if Namespace processing is not being performed.</div><div class="line">     * <span class="doctag">@param</span> qName The qualified name (with prefix), or the empty</div><div class="line">     *   string if qualified names are not available.\</div><div class="line">     * <span class="doctag">@param</span> list The attributes attached to the element. If there are</div><div class="line">     *   no attributes, it shall be an empty Attributes object.</div><div class="line">     * <span class="doctag">@exception</span> SAXException if a parsing error is to be reported</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String namespaceURI, String localName, String qName, Attributes list)</span></span></div><div class="line">            <span class="keyword">throws</span> SAXException &#123;</div><div class="line">        <span class="keyword">boolean</span> debug = log.isDebugEnabled();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (saxLog.isDebugEnabled()) &#123;</div><div class="line">            saxLog.debug(<span class="string">"startElement("</span> + namespaceURI + <span class="string">","</span> + localName + <span class="string">","</span> + qName + <span class="string">")"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Parse system properties</span></div><div class="line">        list = updateAttributes(list);</div><div class="line"></div><div class="line">        <span class="comment">// Save the body text accumulated for our surrounding element</span></div><div class="line">        bodyTexts.push(bodyText);</div><div class="line">        bodyText = <span class="keyword">new</span> StringBuilder();</div><div class="line"></div><div class="line">        <span class="comment">// the actual element name is either in localName or qName, depending</span></div><div class="line">        <span class="comment">// on whether the parser is namespace aware</span></div><div class="line">        String name = localName;</div><div class="line">        <span class="keyword">if</span> ((name == <span class="keyword">null</span>) || (name.length() &lt; <span class="number">1</span>)) &#123;</div><div class="line">            name = qName;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Compute the current matching rule</span></div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(match);</div><div class="line">        <span class="keyword">if</span> (match.length() &gt; <span class="number">0</span>) &#123;</div><div class="line">            sb.append(<span class="string">'/'</span>);</div><div class="line">        &#125;</div><div class="line">        sb.append(name);</div><div class="line">        match = sb.toString();</div><div class="line">        <span class="keyword">if</span> (debug) &#123;</div><div class="line">            log.debug(<span class="string">"  New match='"</span> + match + <span class="string">"'"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Fire "begin" events for all relevant rules</span></div><div class="line">        List&lt;Rule&gt; rules = getRules().match(namespaceURI, match);</div><div class="line">        matches.push(rules);</div><div class="line">        <span class="keyword">if</span> ((rules != <span class="keyword">null</span>) &amp;&amp; (rules.size() &gt; <span class="number">0</span>)) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rules.size(); i++) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Rule rule = rules.get(i);</div><div class="line">                    <span class="keyword">if</span> (debug) &#123;</div><div class="line">                        log.debug(<span class="string">"  Fire begin() for "</span> + rule);</div><div class="line">                    &#125;</div><div class="line">                    rule.begin(namespaceURI, name, list);</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    log.error(<span class="string">"Begin event threw exception"</span>, e);</div><div class="line">                    <span class="keyword">throw</span> createSAXException(e);</div><div class="line">                &#125; <span class="keyword">catch</span> (Error e) &#123;</div><div class="line">                    log.error(<span class="string">"Begin event threw error"</span>, e);</div><div class="line">                    <span class="keyword">throw</span> e;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (debug) &#123;</div><div class="line">                log.debug(<span class="string">"  No rules found matching '"</span> + match + <span class="string">"'."</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>startElement方法的处理步骤如下：</p>
<ol>
<li>match刚开始为空字符串，拼接Server后变为Server。</li>
<li>调用RulesBase的match方法，返回cache中按照键值Server匹配的ObjectCreateRule、SetPropertiesRule及SetNextRule。</li>
<li>循环列表依次遍历ObjectCreateRule、SetPropertiesRule及SetNextRule，并调用它们的begin方法。</li>
</ol>
<p>ObjectCreateRule的begin方法将生成Server的实例（默认为”org.apache.catalina.core.StandardServer”，用户可以通过给Server标签指定className使用其它Server实现），最后将Server的实例压入Digester的栈中，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Process the beginning of this element.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> namespace the namespace URI of the matching element, or an</div><div class="line">     *   empty string if the parser is not namespace aware or the element has</div><div class="line">     *   no namespace</div><div class="line">     * <span class="doctag">@param</span> name the local name if the parser is namespace aware, or just</div><div class="line">     *   the element name otherwise</div><div class="line">     * <span class="doctag">@param</span> attributes The attribute list for this element</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">(String namespace, String name, Attributes attributes)</span></span></div><div class="line">            <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">        <span class="comment">// Identify the name of the class to instantiate</span></div><div class="line">        String realClassName = className;</div><div class="line">        <span class="keyword">if</span> (attributeName != <span class="keyword">null</span>) &#123;</div><div class="line">            String value = attributes.getValue(attributeName);</div><div class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">                realClassName = value;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (digester.log.isDebugEnabled()) &#123;</div><div class="line">            digester.log.debug(<span class="string">"[ObjectCreateRule]&#123;"</span> + digester.match +</div><div class="line">                    <span class="string">"&#125;New "</span> + realClassName);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (realClassName == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"No class name specified for "</span> +</div><div class="line">                    namespace + <span class="string">" "</span> + name);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Instantiate the new object and push it on the context stack</span></div><div class="line">        Class&lt;?&gt; clazz = digester.getClassLoader().loadClass(realClassName);</div><div class="line">        Object instance = clazz.newInstance();</div><div class="line">        digester.push(instance);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>SetPropertiesRule的begin方法首先将刚才压入栈中的Server实例出栈，然后给Server实例设置各个属性值，如port、shutdown等，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Process the beginning of this element.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> namespace the namespace URI of the matching element, or an</div><div class="line">     *   empty string if the parser is not namespace aware or the element has</div><div class="line">     *   no namespace</div><div class="line">     * <span class="doctag">@param</span> theName the local name if the parser is namespace aware, or just</div><div class="line">     *   the element name otherwise</div><div class="line">     * <span class="doctag">@param</span> attributes The attribute list for this element</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">(String namespace, String theName, Attributes attributes)</span></span></div><div class="line">            <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">        <span class="comment">// Populate the corresponding properties of the top object</span></div><div class="line">        Object top = digester.peek();</div><div class="line">        <span class="keyword">if</span> (digester.log.isDebugEnabled()) &#123;</div><div class="line">            <span class="keyword">if</span> (top != <span class="keyword">null</span>) &#123;</div><div class="line">                digester.log.debug(<span class="string">"[SetPropertiesRule]&#123;"</span> + digester.match +</div><div class="line">                                   <span class="string">"&#125; Set "</span> + top.getClass().getName() +</div><div class="line">                                   <span class="string">" properties"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                digester.log.debug(<span class="string">"[SetPropertiesRule]&#123;"</span> + digester.match +</div><div class="line">                                   <span class="string">"&#125; Set NULL properties"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; attributes.getLength(); i++) &#123;</div><div class="line">            String name = attributes.getLocalName(i);</div><div class="line">            <span class="keyword">if</span> (<span class="string">""</span>.equals(name)) &#123;</div><div class="line">                name = attributes.getQName(i);</div><div class="line">            &#125;</div><div class="line">            String value = attributes.getValue(i);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (digester.log.isDebugEnabled()) &#123;</div><div class="line">                digester.log.debug(<span class="string">"[SetPropertiesRule]&#123;"</span> + digester.match +</div><div class="line">                        <span class="string">"&#125; Setting property '"</span> + name + <span class="string">"' to '"</span> +</div><div class="line">                        value + <span class="string">"'"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!digester.isFakeAttribute(top, name)</div><div class="line">                    &amp;&amp; !IntrospectionUtils.setProperty(top, name, value)</div><div class="line">                    &amp;&amp; digester.getRulesValidation()) &#123;</div><div class="line">                digester.log.warn(<span class="string">"[SetPropertiesRule]&#123;"</span> + digester.match +</div><div class="line">                        <span class="string">"&#125; Setting property '"</span> + name + <span class="string">"' to '"</span> +</div><div class="line">                        value + <span class="string">"' did not find a matching property."</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>SetNextRule的begin不做什么动作。当遇到Server的结束标签时，还会依次调用ObjectCreateRule、SetPropertiesRule及SetNextRule的end方法，不再赘述。所有元素的解析都与Server标签同理，最终将server.xml文件中设置的元素及其属性值，构造出Tomcat中的容器，如：Server、Service、Connector等。</p>
<p>致此，web.xml解析分析完毕。</p>
<h3 id="第三章-生命周期管理"><a href="#第三章-生命周期管理" class="headerlink" title="第三章 生命周期管理"></a>第三章 生命周期管理</h3><p>从server.xml文件解析出来的各个对象都是容器，比如：Server、Service、Connector等。这些容器都具有新建、初始化完成、启动、停止、失败、销毁等状态。Tomcat的实现提供了对这些容器的生命周期管理，本章将通过对Tomcat7.0的源码阅读，深入剖析这一过程。</p>
<h4 id="1-Tomcat生命周期类接口设计"><a href="#1-Tomcat生命周期类接口设计" class="headerlink" title="1.Tomcat生命周期类接口设计"></a>1.Tomcat生命周期类接口设计</h4><p>我们先阅读图（tomact7），从中了解Tomcat涉及生命周期管理的主要类。</p>
<p><img src="http://i.imgur.com/xmgOHR4.jpg" alt=""></p>
<p>针对图中主要类进行简单介绍：</p>
<ul>
<li>Lifecycle：定义了容器生命周期、容器状态转换及容器状态迁移事件的监听器注册和移除等主要接口；</li>
<li>LifecycleBase：作为Lifecycle接口的抽象实现类，运用抽象模板模式将所有容器的生命周期及状态转换衔接起来，此外还提供了生成LifecycleEvent事件的接口；</li>
<li>LifecycleSupport：提供有关LifecycleEvent事件的监听器注册、移除，并且使用经典的监听器模式，实现事件生成后触达监听器的实现；</li>
<li>MBeanRegistration：Java JMX框架提供的注册MBean的接口，引入此接口是为了便于使用JMX提供的管理功能；</li>
<li>LifecycleMBeanBase：Tomcat提供的对MBeanRegistration的抽象实现类，运用抽象模板模式将所有容器统一注册到JMX；</li>
</ul>
<p>lifecycle继承关系：<br><img src="http://i.imgur.com/PZsO3lD.png" alt=""></p>
<h4 id="2-JMX"><a href="#2-JMX" class="headerlink" title="2.JMX"></a>2.JMX</h4><p>简单介绍一下（细节请参考其他文献）。</p>
<p>java管理程序扩展（java management extensions，简称JMX），是一个可以为Java应用程序或系统植入远程管理功能的框架。JMX的架构，如图所示。</p>
<p><img src="http://i.imgur.com/J6nqmXU.jpg" alt=""></p>
<p>这里对三个分层进行介绍：</p>
<ul>
<li>Probe Level：负责资源的检测（获取信息），包含MBeans，通常也叫做Instrumentation Level。MX管理构件（MBean）分为四种形式，分别是标准管理构件（Standard MBean）、动态管理构件（Dynamic MBean）、开放管理构件(Open Mbean)和模型管理构件(Model MBean)。</li>
<li>Agent Level：即MBeanServer，是JMX的核心，负责连接Mbeans和应用程序。 </li>
<li>Remote Management Level：通过connectors和adaptors来远程操作MBeanServer，常用的控制台，例如JConsole、VisualVM等。</li>
</ul>
<h4 id="3-容器"><a href="#3-容器" class="headerlink" title="3.容器"></a>3.容器</h4><p>容器即servlet容器，容器有很多层，分别是Engine，Host，Context，Wrapper。最大的容器Engine，代表一个servlet 引擎，接下来是Host，代表一个虚拟机，然后是Context，代表一个应用，Wrapper对应一个servlet。从连接器传过来连接后，容器便会顺序经过上面的容器，最后到达特定的servlet。</p>
<p><img src="http://i.imgur.com/irZpmOV.png" alt=""></p>
<p>一个server可以有多个service，一个service包含多个连接器和一个容器，一个Engine可以由多个虚拟主机Host组成，每一个Host下面又可以由多个Web应用Context构成，每一个的Context下面可以包含多个Wrapper（Servlet的包装器）组成。如图所示</p>
<p><img src="http://i.imgur.com/TnOdb8R.png" alt=""></p>
<p>Tomcat将Engine，Host，Context，Wrapper统一抽象成Container。一个抽象的Container模块可以包含各种服务。例如，Manager管理器（Session管理），Pipeline管道（ 维护管道阀门Value ）等。Lifecycle接口统一定义了容器的生命周期，通过事件机制实现各个容器间的内部通讯。</p>
<p>而容器的核心接口Container的抽象实现中定义了一个Pipeline，一个Manager，一个Realm以及ClassLoader统一了具体容器的实现规范。</p>
<p><strong>容器的状态</strong>：</p>
<p>目前，Tomcat的容器具有以下状态：</p>
<ul>
<li>NEW：容器刚刚创建时，即在LifecycleBase实例构造完成时的状态。</li>
<li>INITIALIZED：容器初始化完成时的状态。</li>
<li>STARTING_PREP：容器启动前的状态。</li>
<li>STARTING：容器启动过程中的状态。</li>
<li>STARTED：容器启动完成的状态。</li>
<li>STOPPING_PREP：容器停止前的状态。</li>
<li>STOPPING：容器停止过程中的状态。</li>
<li>STOPPED：容器停止完成的状态。</li>
<li>DESTROYED：容器销毁后的状态。</li>
<li>FAILED：容器启动、停止过程中出现异常的状态。</li>
<li>MUST_STOP：此状态未使用。</li>
<li>MUST_DESTROY：此状态未使用。</li>
<li>这些状态都定义在枚举类LifecycleState中。代码如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> LifecycleState &#123;</div><div class="line">    NEW(<span class="keyword">false</span>, <span class="keyword">null</span>),</div><div class="line">    INITIALIZING(<span class="keyword">false</span>, Lifecycle.BEFORE_INIT_EVENT),</div><div class="line">    INITIALIZED(<span class="keyword">false</span>, Lifecycle.AFTER_INIT_EVENT),</div><div class="line">    STARTING_PREP(<span class="keyword">false</span>, Lifecycle.BEFORE_START_EVENT),</div><div class="line">    STARTING(<span class="keyword">true</span>, Lifecycle.START_EVENT),</div><div class="line">    STARTED(<span class="keyword">true</span>, Lifecycle.AFTER_START_EVENT),</div><div class="line">    STOPPING_PREP(<span class="keyword">true</span>, Lifecycle.BEFORE_STOP_EVENT),</div><div class="line">    STOPPING(<span class="keyword">false</span>, Lifecycle.STOP_EVENT),</div><div class="line">    STOPPED(<span class="keyword">false</span>, Lifecycle.AFTER_STOP_EVENT),</div><div class="line">    DESTROYING(<span class="keyword">false</span>, Lifecycle.BEFORE_DESTROY_EVENT),</div><div class="line">    DESTROYED(<span class="keyword">false</span>, Lifecycle.AFTER_DESTROY_EVENT),</div><div class="line">    FAILED(<span class="keyword">false</span>, <span class="keyword">null</span>),</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@deprecated</span> Unused. Will be removed in Tomcat 8.5.x. The state transition</div><div class="line">     *             checking in &#123;<span class="doctag">@link</span> org.apache.catalina.util.LifecycleBase&#125;</div><div class="line">     *             makes it impossible to use this state. The intended behaviour</div><div class="line">     *             can be obtained by setting the state to</div><div class="line">     *             &#123;<span class="doctag">@link</span> LifecycleState#FAILED&#125; in</div><div class="line">     *             &lt;code&gt;LifecycleBase.startInternal()&lt;/code&gt;</div><div class="line">     */</div><div class="line">    <span class="meta">@Deprecated</span></div><div class="line">    MUST_STOP(<span class="keyword">true</span>, <span class="keyword">null</span>),</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@deprecated</span> Unused. Will be removed in Tomcat 8.5.x. The state transition</div><div class="line">     *             checking in &#123;<span class="doctag">@link</span> org.apache.catalina.util.LifecycleBase&#125;</div><div class="line">     *             makes it impossible to use this state. The intended behaviour</div><div class="line">     *             can be obtained by implementing &#123;<span class="doctag">@link</span> Lifecycle.SingleUse&#125;.</div><div class="line">     */</div><div class="line">    <span class="meta">@Deprecated</span></div><div class="line">    MUST_DESTROY(<span class="keyword">false</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> available;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String lifecycleEvent;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LifecycleState</span><span class="params">(<span class="keyword">boolean</span> available, String lifecycleEvent)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.available = available;</div><div class="line">        <span class="keyword">this</span>.lifecycleEvent = lifecycleEvent;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * May the public methods other than property getters/setters and lifecycle</div><div class="line">     * methods be called for a component in this state? It returns</div><div class="line">     * &lt;code&gt;true&lt;/code&gt; for any component in any of the following states:</div><div class="line">     * &lt;ul&gt;</div><div class="line">     * &lt;li&gt;&#123;<span class="doctag">@link</span> #STARTING&#125;&lt;/li&gt;</div><div class="line">     * &lt;li&gt;&#123;<span class="doctag">@link</span> #STARTED&#125;&lt;/li&gt;</div><div class="line">     * &lt;li&gt;&#123;<span class="doctag">@link</span> #STOPPING_PREP&#125;&lt;/li&gt;</div><div class="line">     * &lt;li&gt;&#123;<span class="doctag">@link</span> #MUST_STOP&#125;&lt;/li&gt;</div><div class="line">     * &lt;/ul&gt;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAvailable</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> available;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLifecycleEvent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> lifecycleEvent;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-事件与监听"><a href="#4-事件与监听" class="headerlink" title="4.事件与监听"></a>4.事件与监听</h4><p>lifecycle接口结构如下：<br><img src="http://i.imgur.com/J8zYMFU.png" alt=""></p>
<p>LifecycleBase实现lifecycle接口.结构如下：<br><img src="http://i.imgur.com/fpzneEf.png" alt=""></p>
<p>lifecycleListener继承关系示意图：<br><img src="http://i.imgur.com/1IqmqEH.png" alt=""></p>
<p>每个容器由于继承自LifecycleBase，当容器状态发生变化时，都会调用fireLifecycleEvent方法，生成LifecycleEvent，并且交由此容器的事件监听器处理。LifecycleBase的fireLifecycleEvent方法的实现见代码清单1。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * Used to handle firing lifecycle events. </div><div class="line"> * <span class="doctag">TODO:</span> Consider merging LifecycleSupport into this class. </div><div class="line"> */  </div><div class="line"><span class="keyword">private</span> LifecycleSupport lifecycle = <span class="keyword">new</span> LifecycleSupport(<span class="keyword">this</span>);  </div><div class="line"></div><div class="line"><span class="comment">//中间代码略</span></div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Allow sub classes to fire &#123;<span class="doctag">@link</span> Lifecycle&#125; events.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> type  Event type</div><div class="line">    * <span class="doctag">@param</span> data  Data associated with event.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">fireLifecycleEvent</span><span class="params">(String type, Object data)</span> </span>&#123;</div><div class="line">       lifecycle.fireLifecycleEvent(type, data);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>LifecycleSupport的fireLifecycleEvent方法的实现，见代码清单2。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Notify all lifecycle event listeners that a particular event has</div><div class="line"> * occurred for this Container.  The default implementation performs</div><div class="line"> * this notification synchronously using the calling thread.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> type Event type</div><div class="line"> * <span class="doctag">@param</span> data Event data</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fireLifecycleEvent</span><span class="params">(String type, Object data)</span> </span>&#123;</div><div class="line">    LifecycleEvent event = <span class="keyword">new</span> LifecycleEvent(lifecycle, type, data);</div><div class="line">    <span class="keyword">for</span> (LifecycleListener listener : listeners) &#123;</div><div class="line">        listener.lifecycleEvent(event);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将事件通知给所有监听当前容器的生命周期监听器LifecycleListener，并调用LifecycleListener的lifecycleEvent方法。每个容器都维护这一个监听器缓存，其实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * The list of registered LifecycleListeners for event notifications.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;LifecycleListener&gt; listeners = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</div></pre></td></tr></table></figure>
<p>那么listeners中的监听器是何时添加进来的呢？每个容器在新建、初始化、启动，销毁，被添加到父容器的过程中都会调用父类LifecycleBase的addLifecycleListener方法，addLifecycleListener的实现见代码清单3。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * &#123;<span class="doctag">@inheritDoc</span>&#125;</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLifecycleListener</span><span class="params">(LifecycleListener listener)</span> </span>&#123;</div><div class="line">    lifecycle.addLifecycleListener(listener);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>LifecycleSupport的addLifecycleListener方法的实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Add a lifecycle event listener to this component.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> listener The listener to add</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLifecycleListener</span><span class="params">(LifecycleListener listener)</span> </span>&#123;</div><div class="line">    listeners.add(listener);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在fireLifecycleEvent中，我们讲过容器会最终调用每个对此容器感兴趣的LifecycleListener的lifecycleEvent方法，那么LifecycleListener的lifecycleEvent方法会做些什么呢？为了简单起见，我们以监听器AprLifecycleListener为例AprLifecycleListener的lifecycleEvent方法的实现，间见如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Primary entry point for startup and shutdown events.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> event The event that has occurred</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lifecycleEvent</span><span class="params">(LifecycleEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (Lifecycle.BEFORE_INIT_EVENT.equals(event.getType())) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">                init();</div><div class="line">                <span class="keyword">for</span> (String msg : initInfoLogMessages) &#123;</div><div class="line">                    log.info(msg);</div><div class="line">                &#125;</div><div class="line">                initInfoLogMessages.clear();</div><div class="line">                <span class="keyword">if</span> (aprAvailable) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        initializeSSL();</div><div class="line">                    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">                        t = ExceptionUtils.unwrapInvocationTargetException(t);</div><div class="line">                        ExceptionUtils.handleThrowable(t);</div><div class="line">                        log.error(sm.getString(<span class="string">"aprListener.sslInit"</span>), t);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// Failure to initialize FIPS mode is fatal</span></div><div class="line">                <span class="keyword">if</span> (!(<span class="keyword">null</span> == FIPSMode || <span class="string">"off"</span>.equalsIgnoreCase(FIPSMode)) &amp;&amp; !isFIPSModeActive()) &#123;</div><div class="line">                    Error e = <span class="keyword">new</span> Error(</div><div class="line">                            sm.getString(<span class="string">"aprListener.initializeFIPSFailed"</span>));</div><div class="line">                    <span class="comment">// Log here, because thrown error might be not logged</span></div><div class="line">                    log.fatal(e.getMessage(), e);</div><div class="line">                    <span class="keyword">throw</span> e;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Lifecycle.AFTER_DESTROY_EVENT.equals(event.getType())) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">                <span class="keyword">if</span> (!aprAvailable) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    terminateAPR();</div><div class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">                    t = ExceptionUtils.unwrapInvocationTargetException(t);</div><div class="line">                    ExceptionUtils.handleThrowable(t);</div><div class="line">                    log.info(sm.getString(<span class="string">"aprListener.aprDestroy"</span>));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="5-容器生命周期"><a href="#5-容器生命周期" class="headerlink" title="5.容器生命周期"></a>5.容器生命周期</h4><p>每个容器都会有自身的生命周期，其中也涉及状态的迁移，以及伴随的事件生成，本节详细介绍Tomcat中的容器生命周期实现。所有容器的转态转换（如新疆、初始化、启动、停止等）都是由外到内，由上到下进行，即先执行父容器的状态转换及相关操作，然后再执行子容器的转态转换，这个过程是层层迭代执行的。</p>
<h5 id="容器初始化"><a href="#容器初始化" class="headerlink" title="容器初始化"></a><strong>容器初始化</strong></h5><p>每个容器的init方法是自身初始化的入口，其初始化过程如图所示。</p>
<p><img src="http://i.imgur.com/ZU9Cikh.jpg" alt=""></p>
<p>根据图所示的初始化过程，我们对Tomcat的源码进行分析，其处理步骤如下：</p>
<ol>
<li>调用方调用容器父类LifecycleBase的init方法，LifecycleBase的init方法主要完成一些所有容器公共抽象出来的动作；</li>
<li>LifecycleBase的init方法调用具体容器的initInternal方法实现，此initInternal方法用于对容器本身真正的初始化；</li>
<li>具体容器的initInternal方法调用父类LifecycleMBeanBase的initInternal方法实现，此initInternal方法用于将容器托管到JMX，便于运维管理；</li>
<li>LifecycleMBeanBase的initInternal方法调用自身的register方法，将容器作为MBean注册到MBeanServer；</li>
<li>容器如果有子容器，会调用子容器的init方法；</li>
<li>容器初始化完毕，LifecycleBase会将容器的状态更改为初始化完毕，即LifecycleState.INITIALIZED。</li>
</ol>
<p>init()方法实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!state.equals(LifecycleState.NEW)) &#123;</div><div class="line">            invalidTransition(Lifecycle.BEFORE_INIT_EVENT);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            setStateInternal(LifecycleState.INITIALIZING, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">            initInternal();</div><div class="line">            setStateInternal(LifecycleState.INITIALIZED, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">            ExceptionUtils.handleThrowable(t);</div><div class="line">            setStateInternal(LifecycleState.FAILED, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(</div><div class="line">                    sm.getString(<span class="string">"lifecycleBase.initFail"</span>,toString()), t);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>上述代码说明，只有当前容器的状态处于LifecycleState.NEW的才可以被初始化，真正执行初始化的方法是initInternal，当初始化完毕，当前容器的状态会被更改为LifecycleState.INITIALIZED。为了简便起见，我们还是以StandardServer这个容器为例，StandardServer的initInternal方法的实现见代码清单7。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Invoke a pre-startup initialization. This is used to allow connectors</div><div class="line">     * to bind to restricted ports under Unix operating environments.</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.initInternal();</div><div class="line"></div><div class="line">        <span class="comment">// Register global String cache</span></div><div class="line">        <span class="comment">// Note although the cache is global, if there are multiple Servers</span></div><div class="line">        <span class="comment">// present in the JVM (may happen when embedding) then the same cache</span></div><div class="line">        <span class="comment">// will be registered under multiple names</span></div><div class="line">        onameStringCache = register(<span class="keyword">new</span> StringCache(), <span class="string">"type=StringCache"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Register the MBeanFactory</span></div><div class="line">        MBeanFactory factory = <span class="keyword">new</span> MBeanFactory();</div><div class="line">        factory.setContainer(<span class="keyword">this</span>);</div><div class="line">        onameMBeanFactory = register(factory, <span class="string">"type=MBeanFactory"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Register the naming resources</span></div><div class="line">        globalNamingResources.init();</div><div class="line"></div><div class="line">        <span class="comment">// Populate the extension validator with JARs from common and shared</span></div><div class="line">        <span class="comment">// class loaders</span></div><div class="line">        <span class="keyword">if</span> (getCatalina() != <span class="keyword">null</span>) &#123;</div><div class="line">            ClassLoader cl = getCatalinal().getParentClassLoader();</div><div class="line">            <span class="comment">// Walk the class loader hierarchy. Stop at the system class loader.</span></div><div class="line">            <span class="comment">// This will add the shared (if present) and common class loaders</span></div><div class="line">            <span class="keyword">while</span> (cl != <span class="keyword">null</span> &amp;&amp; cl != ClassLoader.getSystemClassLoader()) &#123;</div><div class="line">                <span class="keyword">if</span> (cl <span class="keyword">instanceof</span> URLClassLoader) &#123;</div><div class="line">                    URL[] urls = ((URLClassLoader) cl).getURLs();</div><div class="line">                    <span class="keyword">for</span> (URL url : urls) &#123;</div><div class="line">                        <span class="keyword">if</span> (url.getProtocol().equals(<span class="string">"file"</span>)) &#123;</div><div class="line">                            <span class="keyword">try</span> &#123;</div><div class="line">                                File f = <span class="keyword">new</span> File (url.toURI());</div><div class="line">                                <span class="keyword">if</span> (f.isFile() &amp;&amp;</div><div class="line">                                        f.getName().endsWith(<span class="string">".jar"</span>)) &#123;</div><div class="line">                                    ExtensionValidator.addSystemResource(f);</div><div class="line">                                &#125;</div><div class="line">                            &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</div><div class="line">                                <span class="comment">// Ignore</span></div><div class="line">                            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                                <span class="comment">// Ignore</span></div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                cl = cl.getParent();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Initialize our defined Services</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; services.length; i++) &#123;</div><div class="line">            services[i].init();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>通过分析StandardServer的initInternal方法，其处理过程如下：</p>
<ol>
<li><p>将当前容器注册到JMX<br>调用父类LifecycleBase的initInternal方法（见代码清单8），为当前容器创建DynamicMBean，并注册到JMX中。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="comment">// If oname is not null then registration has already happened via jiaan  </span></div><div class="line">    <span class="comment">// preRegister().  </span></div><div class="line">    <span class="keyword">if</span> (oname == <span class="keyword">null</span>) &#123;  </div><div class="line">        mserver = Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).getMBeanServer();  </div><div class="line">          </div><div class="line">        oname = register(<span class="keyword">this</span>, getObjectNameKeyProperties());  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> String <span class="title">getObjectNameKeyProperties</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> <span class="string">"type=Server"</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>LifecycleBase的register方法会为当前容器创建对应的注册名称，以StandardServer为例，getDomain默认返回Catalina，因此StandardServer的JMX注册名称默认为Catalina:type=Server，真正的注册在registerComponent方法中实现。

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> ObjectName <span class="title">register</span><span class="params">(Object obj,  </span></span></div><div class="line">        String objectNameKeyProperties) &#123;  </div><div class="line">      </div><div class="line">    <span class="comment">// Construct an object name with the right domain  </span></div><div class="line">    StringBuilder name = <span class="keyword">new</span> StringBuilder(getDomain());  </div><div class="line">    name.append(<span class="string">':'</span>);  </div><div class="line">    name.append(objectNameKeyProperties);  </div><div class="line">  </div><div class="line">    ObjectName on = <span class="keyword">null</span>;  </div><div class="line">  </div><div class="line">    <span class="keyword">try</span> &#123;  </div><div class="line">        on = <span class="keyword">new</span> ObjectName(name.toString());  </div><div class="line">          </div><div class="line">        Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(obj, on, <span class="keyword">null</span>);  </div><div class="line">    &#125; <span class="keyword">catch</span> (MalformedObjectNameException e) &#123;  </div><div class="line">        log.warn(sm.getString(<span class="string">"lifecycleMBeanBase.registerFail"</span>, obj, name),  </div><div class="line">                e);  </div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">        log.warn(sm.getString(<span class="string">"lifecycleMBeanBase.registerFail"</span>, obj, name),  </div><div class="line">                e);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> on;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>

Registry的registerComponent方法会为当前容器（如StandardServer）创建DynamicMBean，并且注册到MBeanServer，见代码。

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Register a component  </span></div><div class="line"> * XXX make it private  </div><div class="line"> *  </div><div class="line"> * <span class="doctag">@param</span> bean </div><div class="line"> * <span class="doctag">@param</span> oname </div><div class="line"> * <span class="doctag">@param</span> type </div><div class="line"> * <span class="doctag">@throws</span> Exception </div><div class="line"> */   </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerComponent</span><span class="params">(Object bean, ObjectName oname, String type)</span>  </span></div><div class="line">       <span class="keyword">throws</span> Exception  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">if</span>( log.isDebugEnabled() ) &#123;  </div><div class="line">        log.debug( <span class="string">"Managed= "</span>+ oname);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">if</span>( bean ==<span class="keyword">null</span> ) &#123;  </div><div class="line">        log.error(<span class="string">"Null component "</span> + oname );  </div><div class="line">        <span class="keyword">return</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">try</span> &#123;  </div><div class="line">        <span class="keyword">if</span>( type==<span class="keyword">null</span> ) &#123;  </div><div class="line">            type=bean.getClass().getName();  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        ManagedBean managed = findManagedBean(bean.getClass(), type);  </div><div class="line">  </div><div class="line">        <span class="comment">// The real mbean is created and registered  </span></div><div class="line">        DynamicMBean mbean = managed.createMBean(bean);  </div><div class="line">  </div><div class="line">        <span class="keyword">if</span>(  getMBeanServer().isRegistered( oname )) &#123;  </div><div class="line">            <span class="keyword">if</span>( log.isDebugEnabled()) &#123;  </div><div class="line">                log.debug(<span class="string">"Unregistering existing component "</span> + oname );  </div><div class="line">            &#125;  </div><div class="line">            getMBeanServer().unregisterMBean( oname );  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        getMBeanServer().registerMBean( mbean, oname);  </div><div class="line">    &#125; <span class="keyword">catch</span>( Exception ex) &#123;  </div><div class="line">        log.error(<span class="string">"Error registering "</span> + oname, ex );  </div><div class="line">        <span class="keyword">throw</span> ex;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><ol>
<li><p>将StringCache、MBeanFactory、globalNamingResources注册到JMX</p>
<p> 从代码清单7中已经列出。其中StringCache的注册名为Catalina:type=StringCache，MBeanFactory的注册名为Catalina:type=MBeanFactory，globalNamingResources的注册名为Catalina:type=NamingResources。</p>
</li>
<li><p>初始化子容器</p>
<p> 从代码清单7中看到StandardServer主要对Service子容器进行初始化，默认是StandardService。注意：个别容器并不完全遵循以上的初始化过程，比如ProtocolHandler作为Connector的子容器，其初始化过程并不是由Connector的initInternal方法调用的，而是与启动过程一道被Connector的startInternal方法所调用。</p>
</li>
</ol>
<h5 id="容器启动"><a href="#容器启动" class="headerlink" title="容器启动"></a><strong>容器启动</strong></h5><p>每个容器的start方法是自身启动的入口，其启动过程如图6所示。</p>
<p><img src="http://i.imgur.com/ss0j9ut.jpg" alt=""></p>
<p>根据图所示的启动过程，我们对Tomcat的源码进行分析，其处理步骤如下：</p>
<ol>
<li>调用方调用容器父类LifecycleBase的start方法，LifecycleBase的start方法主要完成一些所有容器公共抽象出来的动作；</li>
<li>LifecycleBase的start方法先将容器状态改为LifecycleState.STARTING_PREP，然后调用具体容器的startInternal方法实现，此startInternal方法用于对容器本身真正的初始化；</li>
<li>具体容器的startInternal方法会将容器状态改为LifecycleState.STARTING，容器如果有子容器，会调用子容器的start方法启动子容器；</li>
<li>容器启动完毕，LifecycleBase会将容器的状态更改为启动完毕，即LifecycleState.STARTED。</li>
</ol>
<p>LifecycleBase的start方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (LifecycleState.STARTING_PREP.equals(state) || LifecycleState.STARTING.equals(state) ||</div><div class="line">                LifecycleState.STARTED.equals(state)) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</div><div class="line">                Exception e = <span class="keyword">new</span> LifecycleException();</div><div class="line">                log.debug(sm.getString(<span class="string">"lifecycleBase.alreadyStarted"</span>, toString()), e);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</div><div class="line">                log.info(sm.getString(<span class="string">"lifecycleBase.alreadyStarted"</span>, toString()));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (state.equals(LifecycleState.NEW)) &#123;</div><div class="line">            init();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state.equals(LifecycleState.FAILED)) &#123;</div><div class="line">            stop();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!state.equals(LifecycleState.INITIALIZED) &amp;&amp;</div><div class="line">                !state.equals(LifecycleState.STOPPED)) &#123;</div><div class="line">            invalidTransition(Lifecycle.BEFORE_START_EVENT);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            setStateInternal(LifecycleState.STARTING_PREP, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">            startInternal();</div><div class="line">            <span class="keyword">if</span> (state.equals(LifecycleState.FAILED)) &#123;</div><div class="line">                <span class="comment">// This is a 'controlled' failure. The component put itself into the</span></div><div class="line">                <span class="comment">// FAILED state so call stop() to complete the clean-up.</span></div><div class="line">                stop();</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!state.equals(LifecycleState.STARTING)) &#123;</div><div class="line">                <span class="comment">// Shouldn't be necessary but acts as a check that sub-classes are</span></div><div class="line">                <span class="comment">// doing what they are supposed to.</span></div><div class="line">                invalidTransition(Lifecycle.AFTER_START_EVENT);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                setStateInternal(LifecycleState.STARTED, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">            <span class="comment">// This is an 'uncontrolled' failure so put the component into the</span></div><div class="line">            <span class="comment">// FAILED state and throw an exception.</span></div><div class="line">            ExceptionUtils.handleThrowable(t);</div><div class="line">            setStateInternal(LifecycleState.FAILED, <span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(sm.getString(<span class="string">"lifecycleBase.startFail"</span>, toString()), t);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上述代码说明：</p>
<ol>
<li>如果当前容器已经处于启动过程（即容器状态为LifecycleState.STARTING_PREP、LifecycleState.STARTING、LifecycleState.STARTED）中，则会产生并且用日志记录LifecycleException异常并退出。</li>
<li>如果容器依然处于LifecycleState.NEW状态，则在启动之前，首先确保初始化完毕</li>
<li>如果容器启动异常导致容器进入LifecycleState.FAILED或者LifecycleState.MUST_STOP状态，则需要调用stop方法停止容器。</li>
</ol>
<p>现在我们重点分析startInternal方法，还是以StandardServer为例，其startInternal的实现见代码所示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</div><div class="line"></div><div class="line">        fireLifecycleEvent(CONFIGURE_START_EVENT, <span class="keyword">null</span>);</div><div class="line">        setState(LifecycleState.STARTING);</div><div class="line"></div><div class="line">        globalNamingResources.start();</div><div class="line"></div><div class="line">        <span class="comment">// Start our defined Services</span></div><div class="line">        <span class="keyword">synchronized</span> (servicesLock) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; services.length; i++) &#123;</div><div class="line">                services[i].start();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>从上述代码看到StandardServer的启动由以下步骤组成：</p>
<ol>
<li>产生CONFIGURE_START_EVENT事件；</li>
<li>将自身状态更改为LifecycleState.STARTING；</li>
<li>调用子容器Service（默认为StandardService）的start方法启动子容器。</li>
</ol>
<p>除了初始化、启动外，各个容器还有停止和销毁的生命周期，其原理与初始化、启动类似，本文不再赘述，有兴趣的读者可以自行研究。</p>
<h4 id="本章总结"><a href="#本章总结" class="headerlink" title="本章总结"></a>本章总结</h4><p>Tomcat通过将内部所有组件都抽象为容器，为容器提供统一的生命周期管理，各个子容器只需要关心各自的具体实现，这便于Tomcat以后扩展更多的容器，对于研究或者学习Tomcat的人来说，其设计清晰易懂。</p>
<h3 id="第四章-tomact的启动"><a href="#第四章-tomact的启动" class="headerlink" title="第四章 tomact的启动"></a>第四章 tomact的启动</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>熟悉Tomcat的工程师们，肯定都知道Tomcat是如何启动与停止的。对于startup.sh、startup.bat、shutdown.sh、shutdown.bat等脚本或者批处理命令，大家一定知道改如何使用它，但是它们究竟是如何实现的？</p>
<p>startup.sh启动：<br><img src="http://i.imgur.com/qhuaBiA.png" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">os400=false</div><div class="line">case "`uname`" in</div><div class="line">OS400*) os400=true;;</div><div class="line">esac</div><div class="line"></div><div class="line"># resolve links - $0 may be a softlink</div><div class="line">PRG="$0"</div><div class="line"></div><div class="line">while [ -h "$PRG" ] ; do</div><div class="line">  ls=`ls -ld "$PRG"`</div><div class="line">  link=`expr "$ls" : '.*-&gt; \(.*\)$'`</div><div class="line">  if expr "$link" : '/.*' &gt; /dev/null; then</div><div class="line">    PRG="$link"</div><div class="line">  else</div><div class="line">    PRG=`dirname "$PRG"`/"$link"</div><div class="line">  fi</div><div class="line">done</div><div class="line"></div><div class="line">PRGDIR=`dirname "$PRG"`</div><div class="line">EXECUTABLE=catalina.sh</div><div class="line"></div><div class="line"># Check that target executable exists</div><div class="line">if $os400; then</div><div class="line">  # -x will Only work on the os400 if the files are:</div><div class="line">  # 1. owned by the user</div><div class="line">  # 2. owned by the PRIMARY group of the user</div><div class="line">  # this will not work if the user belongs in secondary groups</div><div class="line">  eval</div><div class="line">else</div><div class="line">  if [ ! -x "$PRGDIR"/"$EXECUTABLE" ]; then</div><div class="line">    echo "Cannot find $PRGDIR/$EXECUTABLE"</div><div class="line">    echo "The file is absent or does not have execute permission"</div><div class="line">    echo "This file is needed to run this program"</div><div class="line">    exit 1</div><div class="line">  fi</div><div class="line">fi</div><div class="line"></div><div class="line">exec "$PRGDIR"/"$EXECUTABLE" start "$@"</div></pre></td></tr></table></figure>
<p>由上述脚本得知，执行脚本catalina.sh。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">elif [ "$1" = "start" ] ; then  </div><div class="line">  </div><div class="line"># 此处省略参数校验的脚本  </div><div class="line">  </div><div class="line">shift  </div><div class="line">touch "$CATALINA_OUT"  </div><div class="line">if [ "$1" = "-security" ] ; then  </div><div class="line">  if [ $have_tty -eq 1 ]; then  </div><div class="line">    echo "Using Security Manager"  </div><div class="line">  fi  </div><div class="line">  shift  </div><div class="line">  eval "\"$_RUNJAVA\"" "\"$LOGGING_CONFIG\"" $LOGGING_MANAGER $JAVA_OPTS $CATALINA_OPTS \  </div><div class="line">    -Djava.endorsed.dirs="\"$JAVA_ENDORSED_DIRS\"" -classpath "\"$CLASSPATH\"" \  </div><div class="line">    -Djava.security.manager \  </div><div class="line">    -Djava.security.policy=="\"$CATALINA_BASE/conf/catalina.policy\"" \  </div><div class="line">    -Dcatalina.base="\"$CATALINA_BASE\"" \  </div><div class="line">    -Dcatalina.home="\"$CATALINA_HOME\"" \  </div><div class="line">    -Djava.io.tmpdir="\"$CATALINA_TMPDIR\"" \  </div><div class="line">    org.apache.catalina.startup.Bootstrap "$@" start \  </div><div class="line">    &gt;&gt; "$CATALINA_OUT" 2&gt;&amp;1 "&amp;"  </div><div class="line">  </div><div class="line">else  </div><div class="line">  eval "\"$_RUNJAVA\"" "\"$LOGGING_CONFIG\"" $LOGGING_MANAGER $JAVA_OPTS $CATALINA_OPTS \  </div><div class="line">    -Djava.endorsed.dirs="\"$JAVA_ENDORSED_DIRS\"" -classpath "\"$CLASSPATH\"" \  </div><div class="line">    -Dcatalina.base="\"$CATALINA_BASE\"" \  </div><div class="line">    -Dcatalina.home="\"$CATALINA_HOME\"" \  </div><div class="line">    -Djava.io.tmpdir="\"$CATALINA_TMPDIR\"" \  </div><div class="line">    org.apache.catalina.startup.Bootstrap "$@" start \  </div><div class="line">    &gt;&gt; "$CATALINA_OUT" 2&gt;&amp;1 "&amp;"  </div><div class="line">  </div><div class="line">fi  </div><div class="line">  </div><div class="line">if [ ! -z "$CATALINA_PID" ]; then  </div><div class="line">  echo $! &gt; "$CATALINA_PID"  </div><div class="line">fi  </div><div class="line">  </div><div class="line">echo "Tomcat started."</div></pre></td></tr></table></figure>
<p>从代码清单2可以看出，最终使用Java命令执行了org.apache.catalina.startup.Bootstrap类中的main方法，参数也是start。Bootstrap的main方法的实现见代码清单3.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Main method and entry point when starting Tomcat via the provided</div><div class="line">     * scripts.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> args Command line arguments to be processed</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (daemon == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// Don't set daemon until init() has completed</span></div><div class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                bootstrap.init();</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">                handleThrowable(t);</div><div class="line">                t.printStackTrace();</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            daemon = bootstrap;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// When running as a service the call to stop will be on a new</span></div><div class="line">            <span class="comment">// thread so make sure the correct class loader is used to prevent</span></div><div class="line">            <span class="comment">// a range of class not found exceptions.</span></div><div class="line">            Thread.currentThread().setContextClassLoader(daemon.catalinaLoader);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String command = <span class="string">"start"</span>;</div><div class="line">            <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</div><div class="line">                command = args[args.length - <span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (command.equals(<span class="string">"startd"</span>)) &#123;</div><div class="line">                args[args.length - <span class="number">1</span>] = <span class="string">"start"</span>;</div><div class="line">                daemon.load(args);</div><div class="line">                daemon.start();</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"stopd"</span>)) &#123;</div><div class="line">                args[args.length - <span class="number">1</span>] = <span class="string">"stop"</span>;</div><div class="line">                daemon.stop();</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"start"</span>)) &#123;</div><div class="line">                daemon.setAwait(<span class="keyword">true</span>);</div><div class="line">                daemon.load(args);</div><div class="line">                daemon.start();</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"stop"</span>)) &#123;</div><div class="line">                daemon.stopServer(args);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"configtest"</span>)) &#123;</div><div class="line">                daemon.load(args);</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span>==daemon.getServer()) &#123;</div><div class="line">                    System.exit(<span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">                System.exit(<span class="number">0</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                log.warn(<span class="string">"Bootstrap: command \""</span> + command + <span class="string">"\" does not exist."</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">            <span class="comment">// Unwrap the Exception for clearer error reporting</span></div><div class="line">            <span class="keyword">if</span> (t <span class="keyword">instanceof</span> InvocationTargetException &amp;&amp;</div><div class="line">                    t.getCause() != <span class="keyword">null</span>) &#123;</div><div class="line">                t = t.getCause();</div><div class="line">            &#125;</div><div class="line">            handleThrowable(t);</div><div class="line">            t.printStackTrace();</div><div class="line">            System.exit(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>从代码清单3可以看出，当传递参数start的时候，command等于start. 启动tomact</p>
<p>main方法主要执行以下步骤：</p>
<ol>
<li>初始化Bootstrap <code>bootstrap.init();</code></li>
<li>加载、解析server.xml配置文件 <code>daemon.load(args);</code></li>
<li>启动tomact <code>daemon.start();</code></li>
</ol>
<p>以下分别来详细分析三个步骤</p>
<h5 id="步骤一-初始化Bootstrap"><a href="#步骤一-初始化Bootstrap" class="headerlink" title="步骤一 初始化Bootstrap"></a>步骤一 初始化Bootstrap</h5><p>bootstrap.init执行过程如下：</p>
<ol>
<li><code>Bootstrap bootstrap = new Bootstrap();</code>构造一个bootstrap对象，会执行静态代码块，来初始化路径。</li>
<li>初始化Tomcat的类加载器，并设置线程上下文类加载器（参照第一章）</li>
<li>用反射实例化org.apache.catalina.startup.Catalina对象，并且使用反射调用其setParentClassLoader方法，给Catalina对象设置Tomcat类加载体系的顶级加载器（Java自带的三种类加载器除外）</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        initClassLoaders();</div><div class="line"></div><div class="line">        Thread.currentThread().setContextClassLoader(catalinaLoader);</div><div class="line"></div><div class="line">        SecurityClassLoad.securityClassLoad(catalinaLoader);</div><div class="line"></div><div class="line">        <span class="comment">// Load our startup class and call its process() method</span></div><div class="line">        <span class="keyword">if</span> (log.isDebugEnabled())</div><div class="line">            log.debug(<span class="string">"Loading startup class"</span>);</div><div class="line">        Class&lt;?&gt; startupClass =</div><div class="line">            catalinaLoader.loadClass</div><div class="line">            (<span class="string">"org.apache.catalina.startup.Catalina"</span>);</div><div class="line">        Object startupInstance = startupClass.newInstance();</div><div class="line"></div><div class="line">        <span class="comment">// Set the shared extensions class loader</span></div><div class="line">        <span class="keyword">if</span> (log.isDebugEnabled())</div><div class="line">            log.debug(<span class="string">"Setting startup class properties"</span>);</div><div class="line">        String methodName = <span class="string">"setParentClassLoader"</span>;</div><div class="line">        Class&lt;?&gt; paramTypes[] = <span class="keyword">new</span> Class[<span class="number">1</span>];</div><div class="line">        paramTypes[<span class="number">0</span>] = Class.forName(<span class="string">"java.lang.ClassLoader"</span>);</div><div class="line">        Object paramValues[] = <span class="keyword">new</span> Object[<span class="number">1</span>];</div><div class="line">        paramValues[<span class="number">0</span>] = sharedLoader;</div><div class="line">        Method method =</div><div class="line">            startupInstance.getClass().getMethod(methodName, paramTypes);</div><div class="line">        method.invoke(startupInstance, paramValues);</div><div class="line"></div><div class="line">        catalinaDaemon = startupInstance;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="步骤二-加载、解析server-xml配置文件"><a href="#步骤二-加载、解析server-xml配置文件" class="headerlink" title="步骤二 加载、解析server.xml配置文件"></a>步骤二 加载、解析server.xml配置文件</h5><p>当传递参数start的时候，会调用Bootstrap的load方法（见代码清单5），其作用是用反射调用catalinaDaemon（类型是Catalina）的load方法加载和解析server.xml配置文件。参照第二章。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Load daemon.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(String[] arguments)</span></span></div><div class="line">       <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">       <span class="comment">// Call the load() method</span></div><div class="line">       String methodName = <span class="string">"load"</span>;</div><div class="line">       Object param[];</div><div class="line">       Class&lt;?&gt; paramTypes[];</div><div class="line">       <span class="keyword">if</span> (arguments==<span class="keyword">null</span> || arguments.length==<span class="number">0</span>) &#123;</div><div class="line">           paramTypes = <span class="keyword">null</span>;</div><div class="line">           param = <span class="keyword">null</span>;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           paramTypes = <span class="keyword">new</span> Class[<span class="number">1</span>];</div><div class="line">           paramTypes[<span class="number">0</span>] = arguments.getClass();</div><div class="line">           param = <span class="keyword">new</span> Object[<span class="number">1</span>];</div><div class="line">           param[<span class="number">0</span>] = arguments;</div><div class="line">       &#125;</div><div class="line">       Method method =</div><div class="line">           catalinaDaemon.getClass().getMethod(methodName, paramTypes);</div><div class="line">       <span class="keyword">if</span> (log.isDebugEnabled())</div><div class="line">           log.debug(<span class="string">"Calling startup class "</span> + method);</div><div class="line">       method.invoke(catalinaDaemon, param);</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h5 id="步骤三-启动Tomcat"><a href="#步骤三-启动Tomcat" class="headerlink" title="步骤三 启动Tomcat"></a>步骤三 启动Tomcat</h5><p>当传递参数start的时候，调用Bootstrap的load方法之后会接着调用start方法（见代码清单6）启动Tomcat，此方法实际是用反射调用了catalinaDaemon（类型是Catalina）的start方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Start the Catalina daemon.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></div><div class="line">    <span class="keyword">throws</span> Exception &#123;</div><div class="line">    <span class="keyword">if</span>( catalinaDaemon==<span class="keyword">null</span> ) init();</div><div class="line"></div><div class="line">    Method method = catalinaDaemon.getClass().getMethod(<span class="string">"start"</span>, (Class [] )<span class="keyword">null</span>);</div><div class="line">    method.invoke(catalinaDaemon, (Object [])<span class="keyword">null</span>);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>catalina类结构如下：</p>
<p><img src="http://i.imgur.com/msNYutk.png" alt=""></p>
<p>Catalina的start方法（见代码清单7）的执行步骤如下:</p>
<ol>
<li>验证Server容器是否已经实例化。如果没有实例化Server容器，还会再次调用Catalina的load方法加载和解析server.xml，这也说明Tomcat只允许Server容器通过配置在server.xml的方式生成，用户也可以自己实现Server接口创建自定义的Server容器以取代默认的StandardServer</li>
<li>启动Server容器，有关容器的启动过程的分析可以参考《生命周期管理》该章的内容。</li>
<li>设置关闭钩子。这么说可能有些不好理解，那就换个说法。Tomcat本身可能由于所在机器断点，程序bug甚至内存溢出导致进程退出，但是Tomcat可能需要在退出的时候做一些清理工作，比如：内存清理、对象销毁等。这些清理动作需要封装在一个Thread的实现中，然后将此Thread对象作为参数传递给Runtime的addShutdownHook方法即可。</li>
<li>最后调用Catalina的await方法循环等待接收Tomcat的shutdown命令。</li>
<li>如果Tomcat运行正常且没有收到shutdown命令，是不会向下执行stop方法的，当接收到shutdown命令，Catalina的await方法会退出循环等待，然后顺序执行stop方法停止Tomcat。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Start a new server instance.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (getServer() == <span class="keyword">null</span>) &#123;</div><div class="line">            load();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (getServer() == <span class="keyword">null</span>) &#123;</div><div class="line">            log.fatal(<span class="string">"Cannot start server. Server instance is not configured."</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> t1 = System.nanoTime();</div><div class="line"></div><div class="line">        <span class="comment">// Start the new server</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            getServer().start();</div><div class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</div><div class="line">            log.fatal(sm.getString(<span class="string">"catalina.serverStartFail"</span>), e);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                getServer().destroy();</div><div class="line">            &#125; <span class="keyword">catch</span> (LifecycleException e1) &#123;</div><div class="line">                log.debug(<span class="string">"destroy() failed for failed Server "</span>, e1);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> t2 = System.nanoTime();</div><div class="line">        <span class="keyword">if</span>(log.isInfoEnabled()) &#123;</div><div class="line">            log.info(<span class="string">"Server startup in "</span> + ((t2 - t1) / <span class="number">1000000</span>) + <span class="string">" ms"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Register shutdown hook</span></div><div class="line">        <span class="keyword">if</span> (useShutdownHook) &#123;</div><div class="line">            <span class="keyword">if</span> (shutdownHook == <span class="keyword">null</span>) &#123;</div><div class="line">                shutdownHook = <span class="keyword">new</span> CatalinaShutdownHook();</div><div class="line">            &#125;</div><div class="line">            Runtime.getRuntime().addShutdownHook(shutdownHook);</div><div class="line"></div><div class="line">            <span class="comment">// If JULI is being used, disable JULI's shutdown hook since</span></div><div class="line">            <span class="comment">// shutdown hooks run in parallel and log messages may be lost</span></div><div class="line">            <span class="comment">// if JULI's hook completes before the CatalinaShutdownHook()</span></div><div class="line">            LogManager logManager = LogManager.getLogManager();</div><div class="line">            <span class="keyword">if</span> (logManager <span class="keyword">instanceof</span> ClassLoaderLogManager) &#123;</div><div class="line">                ((ClassLoaderLogManager) logManager).setUseShutdownHook(</div><div class="line">                        <span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (await) &#123;</div><div class="line">            await();</div><div class="line">            stop();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>Catalina的await方法（见代码清单8）实际只是代理执行了Server容器的await方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Await and shutdown.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    getServer().await();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以Server的默认实现StandardServer为例，其await方法的执行步骤如下：</p>
<ol>
<li>创建socket连接的服务端对象ServerSocket；</li>
<li>循环等待接收客户端发出的命令，如果接收到的命令与SHUTDOWN匹配（由于使用了equals，所以shutdown命令必须是大写的），那么退出循环等待。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Wait until a proper shutdown command is received, then return.</div><div class="line">     * This keeps the main thread alive - the thread pool listening for http</div><div class="line">     * connections is daemon threads.</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Negative values - don't wait on port - tomcat is embedded or we just don't like ports</span></div><div class="line">        <span class="keyword">if</span>( port == -<span class="number">2</span> ) &#123;</div><div class="line">            <span class="comment">// undocumented yet - for embedding apps that are around, alive.</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>( port==-<span class="number">1</span> ) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                awaitThread = Thread.currentThread();</div><div class="line">                <span class="keyword">while</span>(!stopAwait) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.sleep( <span class="number">10000</span> );</div><div class="line">                    &#125; <span class="keyword">catch</span>( InterruptedException ex ) &#123;</div><div class="line">                        <span class="comment">// continue and check the flag</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                awaitThread = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Set up a server socket to wait on</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            awaitSocket = <span class="keyword">new</span> ServerSocket(port, <span class="number">1</span>,</div><div class="line">                    InetAddress.getByName(address));</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            log.error(<span class="string">"StandardServer.await: create["</span> + address</div><div class="line">                               + <span class="string">":"</span> + port</div><div class="line">                               + <span class="string">"]: "</span>, e);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            awaitThread = Thread.currentThread();</div><div class="line"></div><div class="line">            <span class="comment">// Loop waiting for a connection and a valid command</span></div><div class="line">            <span class="keyword">while</span> (!stopAwait) &#123;</div><div class="line">                ServerSocket serverSocket = awaitSocket;</div><div class="line">                <span class="keyword">if</span> (serverSocket == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// Wait for the next connection</span></div><div class="line">                Socket socket = <span class="keyword">null</span>;</div><div class="line">                StringBuilder command = <span class="keyword">new</span> StringBuilder();</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    InputStream stream;</div><div class="line">                    <span class="keyword">long</span> acceptStartTime = System.currentTimeMillis();</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        socket = serverSocket.accept();</div><div class="line">                        socket.setSoTimeout(<span class="number">10</span> * <span class="number">1000</span>);  <span class="comment">// Ten seconds</span></div><div class="line">                        stream = socket.getInputStream();</div><div class="line">                    &#125; <span class="keyword">catch</span> (SocketTimeoutException ste) &#123;</div><div class="line">                        <span class="comment">// This should never happen but bug 56684 suggests that</span></div><div class="line">                        <span class="comment">// it does.</span></div><div class="line">                        log.warn(sm.getString(<span class="string">"standardServer.accept.timeout"</span>,</div><div class="line">                                Long.valueOf(System.currentTimeMillis() - acceptStartTime)), ste);</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                    &#125; <span class="keyword">catch</span> (AccessControlException ace) &#123;</div><div class="line">                        log.warn(<span class="string">"StandardServer.accept security exception: "</span></div><div class="line">                                + ace.getMessage(), ace);</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                        <span class="keyword">if</span> (stopAwait) &#123;</div><div class="line">                            <span class="comment">// Wait was aborted with socket.close()</span></div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                        log.error(<span class="string">"StandardServer.await: accept: "</span>, e);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="comment">// Read a set of characters from the socket</span></div><div class="line">                    <span class="keyword">int</span> expected = <span class="number">1024</span>; <span class="comment">// Cut off to avoid DoS attack</span></div><div class="line">                    <span class="keyword">while</span> (expected &lt; shutdown.length()) &#123;</div><div class="line">                        <span class="keyword">if</span> (random == <span class="keyword">null</span>)</div><div class="line">                            random = <span class="keyword">new</span> Random();</div><div class="line">                        expected += (random.nextInt() % <span class="number">1024</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">while</span> (expected &gt; <span class="number">0</span>) &#123;</div><div class="line">                        <span class="keyword">int</span> ch = -<span class="number">1</span>;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            ch = stream.read();</div><div class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                            log.warn(<span class="string">"StandardServer.await: read: "</span>, e);</div><div class="line">                            ch = -<span class="number">1</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">// Control character or EOF (-1) terminates loop</span></div><div class="line">                        <span class="keyword">if</span> (ch &lt; <span class="number">32</span> || ch == <span class="number">127</span>) &#123;</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                        command.append((<span class="keyword">char</span>) ch);</div><div class="line">                        expected--;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    <span class="comment">// Close the socket now that we are done with it</span></div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</div><div class="line">                            socket.close();</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                        <span class="comment">// Ignore</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// Match against our command string</span></div><div class="line">                <span class="keyword">boolean</span> match = command.toString().equals(shutdown);</div><div class="line">                <span class="keyword">if</span> (match) &#123;</div><div class="line">                    log.info(sm.getString(<span class="string">"standardServer.shutdownViaPort"</span>));</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125; <span class="keyword">else</span></div><div class="line">                    log.warn(<span class="string">"StandardServer.await: Invalid command '"</span></div><div class="line">                            + command.toString() + <span class="string">"' received"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            ServerSocket serverSocket = awaitSocket;</div><div class="line">            awaitThread = <span class="keyword">null</span>;</div><div class="line">            awaitSocket = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Close the server socket and return</span></div><div class="line">            <span class="keyword">if</span> (serverSocket != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    serverSocket.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    <span class="comment">// Ignore</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>本章小结</p>
<p>至此，Tomcat启动完毕。<br>以下是一个tomact启动过程时序图：</p>
<p><img src="http://i.imgur.com/mL0bxFk.png" alt=""></p>
<h3 id="第五章-tomact的停止"><a href="#第五章-tomact的停止" class="headerlink" title="第五章 tomact的停止"></a>第五章 tomact的停止</h3><p>分析：</p>
<p>我们停止Tomcat的命令如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh shutdown.sh</div></pre></td></tr></table></figure>
<p>所以，将从shell脚本shutdown.sh开始分析Tomcat的停止过程。shutdown.sh的脚本代码见代码:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">os400=false  </div><div class="line">case "`uname`" in  </div><div class="line">OS400*) os400=true;;  </div><div class="line">esac  </div><div class="line">  </div><div class="line"># resolve links - $0 may be a softlink  </div><div class="line">PRG="$0"  </div><div class="line">  </div><div class="line">while [ -h "$PRG" ] ; do  </div><div class="line">  ls=`ls -ld "$PRG"`  </div><div class="line">  link=`expr "$ls" : '.*-&gt; .∗$'`  </div><div class="line">  if expr "$link" : '/.*' &gt; /dev/null; then  </div><div class="line">    PRG="$link"  </div><div class="line">  else  </div><div class="line">    PRG=`dirname "$PRG"`/"$link"  </div><div class="line">  fi  </div><div class="line">done  </div><div class="line">  </div><div class="line">PRGDIR=`dirname "$PRG"`  </div><div class="line">EXECUTABLE=catalina.sh  </div><div class="line">  </div><div class="line"># Check that target executable exists  </div><div class="line">if $os400; then  </div><div class="line">  # -x will Only work on the os400 if the files are:  </div><div class="line">  # 1. owned by the user  </div><div class="line">  # 2. owned by the PRIMARY group of the user  </div><div class="line">  # this will not work if the user belongs in secondary groups  </div><div class="line">  eval  </div><div class="line">else  </div><div class="line">  if [ ! -x "$PRGDIR"/"$EXECUTABLE" ]; then  </div><div class="line">    echo "Cannot find $PRGDIR/$EXECUTABLE"  </div><div class="line">    echo "The file is absent or does not have execute permission"  </div><div class="line">    echo "This file is needed to run this program"  </div><div class="line">    exit 1  </div><div class="line">  fi  </div><div class="line">fi  </div><div class="line">  </div><div class="line">exec "$PRGDIR"/"$EXECUTABLE" stop "$@"</div></pre></td></tr></table></figure>
<p>执行脚本catalina.sh</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">elif [ "$1" = "stop" ] ; then  </div><div class="line">  </div><div class="line">  #省略参数校验脚本  </div><div class="line">  </div><div class="line">  eval "\"$_RUNJAVA\"" $LOGGING_MANAGER $JAVA_OPTS \  </div><div class="line">    -Djava.endorsed.dirs="\"$JAVA_ENDORSED_DIRS\"" -classpath "\"$CLASSPATH\"" \  </div><div class="line">    -Dcatalina.base="\"$CATALINA_BASE\"" \  </div><div class="line">    -Dcatalina.home="\"$CATALINA_HOME\"" \  </div><div class="line">    -Djava.io.tmpdir="\"$CATALINA_TMPDIR\"" \  </div><div class="line">    org.apache.catalina.startup.Bootstrap "$@" stop</div></pre></td></tr></table></figure>
<p>从代码可以看出，最终使用java命令执行了org.apache.catalina.startup.Bootstrap类中的main方法，参数是stop。</p>
<p>此时main方法主要执行以下步骤</p>
<ol>
<li>初始化bootstrap（参照上一章）</li>
<li><p>停止服务</p>
<p> 通过调用Bootstrap的stopServer方法停止Tomcat，其实质是用反射调用catalinaDaemon（类型是Catalina）的stopServer方法。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Stop the standalone server.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopServer</span><span class="params">()</span></span></div><div class="line">    <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">    Method method =</div><div class="line">        catalinaDaemon.getClass().getMethod(<span class="string">"stopServer"</span>, (Class []) <span class="keyword">null</span>);</div><div class="line">    method.invoke(catalinaDaemon, (Object []) <span class="keyword">null</span>);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> Catalina的stopServer方法（见代码清单13）的执行步骤如下：</p>
<ul>
<li>创建Digester解析server.xml文件（此处只解析标签），以构造出Server容器（此时Server容器的子容器没有被实例化）；</li>
<li><p>从实例化的Server容器获取Server的socket监听端口和地址，然后创建Socket对象连接启动Tomcat时创建的ServerSocket，最后向ServerSocket发送SHUTDOWN命令。根据代码清单9的内容，ServerSocket循环等待接收到SHUTDOWN命令后，最终调用stop方法停止Tomcat。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopServer</span><span class="params">(String[] arguments)</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (arguments != <span class="keyword">null</span>) &#123;</div><div class="line">           arguments(arguments);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       Server s = getServer();</div><div class="line">       <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="comment">// Create and execute our Digester</span></div><div class="line">           Digester digester = createStopDigester();</div><div class="line">           File file = configFile();</div><div class="line">           <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(file)) &#123;</div><div class="line">               InputSource is =</div><div class="line">                   <span class="keyword">new</span> InputSource(file.toURI().toURL().toString());</div><div class="line">               is.setByteStream(fis);</div><div class="line">               digester.push(<span class="keyword">this</span>);</div><div class="line">               digester.parse(is);</div><div class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">               log.error(<span class="string">"Catalina.stop: "</span>, e);</div><div class="line">               System.exit(<span class="number">1</span>);</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="comment">// Server object already present. Must be running as a service</span></div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               s.stop();</div><div class="line">           &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</div><div class="line">               log.error(<span class="string">"Catalina.stop: "</span>, e);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">// Stop the existing server</span></div><div class="line">       s = getServer();</div><div class="line">       <span class="keyword">if</span> (s.getPort()&gt;<span class="number">0</span>) &#123;</div><div class="line">           <span class="keyword">try</span> (Socket socket = <span class="keyword">new</span> Socket(s.getAddress(), s.getPort());</div><div class="line">                   OutputStream stream = socket.getOutputStream()) &#123;</div><div class="line">               String shutdown = s.getShutdown();</div><div class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; shutdown.length(); i++) &#123;</div><div class="line">                   stream.write(shutdown.charAt(i));</div><div class="line">               &#125;</div><div class="line">               stream.flush();</div><div class="line">           &#125; <span class="keyword">catch</span> (ConnectException ce) &#123;</div><div class="line">               log.error(sm.getString(<span class="string">"catalina.stopServer.connectException"</span>,</div><div class="line">                                      s.getAddress(),</div><div class="line">                                      String.valueOf(s.getPort())));</div><div class="line">               log.error(<span class="string">"Catalina.stop: "</span>, ce);</div><div class="line">               System.exit(<span class="number">1</span>);</div><div class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">               log.error(<span class="string">"Catalina.stop: "</span>, e);</div><div class="line">               System.exit(<span class="number">1</span>);</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           log.error(sm.getString(<span class="string">"catalina.stopServer"</span>));</div><div class="line">           System.exit(<span class="number">1</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>最后，我们看看Catalina的stop方法（见代码清单14）的实现，其执行步骤如下：</p>
</li>
<li><p>将启动过程中添加的关闭钩子移除。Tomcat启动过程辛辛苦苦添加的关闭钩子为什么又要去掉呢？因为关闭钩子是为了在JVM异常退出后，进行资源的回收工作。主动停止Tomcat时调用的stop方法里已经包含了资源回收的内容，所以不再需要这个钩子了。<br>-停止Server容器。有关容器的停止内容，请阅读《T生命周期管理》一章。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Stop an existing server instance.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// Remove the ShutdownHook first so that server.stop()</span></div><div class="line">            <span class="comment">// doesn't get invoked twice</span></div><div class="line">            <span class="keyword">if</span> (useShutdownHook) &#123;</div><div class="line">                Runtime.getRuntime().removeShutdownHook(shutdownHook);</div><div class="line"></div><div class="line">                <span class="comment">// If JULI is being used, re-enable JULI's shutdown to ensure</span></div><div class="line">                <span class="comment">// log messages are not lost</span></div><div class="line">                LogManager logManager = LogManager.getLogManager();</div><div class="line">                <span class="keyword">if</span> (logManager <span class="keyword">instanceof</span> ClassLoaderLogManager) &#123;</div><div class="line">                    ((ClassLoaderLogManager) logManager).setUseShutdownHook(</div><div class="line">                            <span class="keyword">true</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">            ExceptionUtils.handleThrowable(t);</div><div class="line">            <span class="comment">// This will fail on JDK 1.2. Ignoring, as Tomcat can run</span></div><div class="line">            <span class="comment">// fine without the shutdown hook.</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Shut down the server</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Server s = getServer();</div><div class="line">            LifecycleState state = s.getState();</div><div class="line">            <span class="keyword">if</span> (LifecycleState.STOPPING_PREP.compareTo(state) &lt;= <span class="number">0</span></div><div class="line">                    &amp;&amp; LifecycleState.DESTROYED.compareTo(state) &gt;= <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">// Nothing to do. stop() was already called</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                s.stop();</div><div class="line">                s.destroy();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</div><div class="line">            log.error(<span class="string">"Catalina.stop"</span>, e);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<p>本章小结</p>
<p>通过对Tomcat源码的分析我们了解到Tomcat的启动和停止都离不开org.apache.catalina.startup.Bootstrap。当停止Tomcat时，已经启动的Tomcat作为socket服务端，停止脚本启动的Bootstrap进程作为socket客户端向服务端发送shutdown命令，两个进程通过共享server.xml里Server标签的端口以及地址信息打通了socket的通信。</p>
<h3 id="第六章-请求原理分析-Tomcat处理请求前作的初始化和准备工作"><a href="#第六章-请求原理分析-Tomcat处理请求前作的初始化和准备工作" class="headerlink" title="第六章 请求原理分析-Tomcat处理请求前作的初始化和准备工作"></a>第六章 请求原理分析-Tomcat处理请求前作的初始化和准备工作</h3><h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h4><p>谈起Tomcat的诞生，最早可以追溯到1995年。近20年来，Tomcat始终是使用最广泛的Web服务器，由于其使用Java语言开发，所以广为Java程序员所熟悉。很多人早期的J2EE项目，由程序员自己实现Jsp页面或者Servlet接受请求，后来借助Struts1、Struts2、spring等中间件后，实际也是利用Filter或者Servlet处理请求，大家肯定要问了，这些Servlet处理的请求来自哪里？Tomcat作为Web服务器是怎样将HTTP请求交给Servlet的呢？</p>
<p>本章就Tomcat对HTTP的请求处理细节进行分析。</p>
<h4 id="2-connector"><a href="#2-connector" class="headerlink" title="2.connector"></a>2.connector</h4><p>根据《生命周期管理》一章的内容，我们知道Tomcat中有很多容器，包括Server、Service、Connector等。其中Connector正是与HTTP请求处理相关的容器。Service是Server的子容器，而Connector又是Service的子容器。那么这三个容器的初始化顺序为：Server-&gt;Service-&gt;Connector。Connector的实现分为以下几种：</p>
<ul>
<li>Http Connector：基于HTTP协议，负责建立HTTP连接。它又分为BIO Http Connector（是Tomcat的默认Connector）与NIO Http Connector两种，后者提供非阻塞IO与长连接Comet支持。</li>
<li>AJP Connector：基于AJP协议，AJP是专门设计用于Tomcat与HTTP服务器通信定制的协议，能提供较高的通信速度和效率。如与Apache服务器集成时，采用这个协议。</li>
<li>APR HTTP Connector：用C实现，通过JNI调用的。主要提升对静态资源（如HTML、图片、CSS、JS等）的访问性能。现在这个库已独立出来可用在任何项目中。由于APR性能较前两类有很大提升。现在我们直接来看Connector的initInternal方法吧。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.initInternal();</div><div class="line"></div><div class="line">        <span class="comment">// Initialize adapter</span></div><div class="line">        adapter = <span class="keyword">new</span> CoyoteAdapter(<span class="keyword">this</span>);</div><div class="line">        protocolHandler.setAdapter(adapter);</div><div class="line"></div><div class="line">        <span class="comment">// Make sure parseBodyMethodsSet has a default</span></div><div class="line">        <span class="keyword">if</span>( <span class="keyword">null</span> == parseBodyMethodsSet ) &#123;</div><div class="line">            setParseBodyMethods(getParseBodyMethods());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (protocolHandler.isAprRequired() &amp;&amp;</div><div class="line">                !AprLifecycleListener.isAprAvailable()) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(</div><div class="line">                    sm.getString(<span class="string">"coyoteConnector.protocolHandlerNoApr"</span>,</div><div class="line">                            getProtocolHandlerClassName()));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            protocolHandler.init();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException</div><div class="line">                (sm.getString</div><div class="line">                 (<span class="string">"coyoteConnector.protocolHandlerInitializationFailed"</span>), e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上述代码说明了Connector的初始化步骤如下：</p>
<ol>
<li><strong>步骤一 构造网络协议处理的CoyoteAdapter</strong></li>
</ol>
<p>代码中构造了CoyoteAdapter对象，并且将其设置为ProtocolHandler的Adapter。ProtocolHandler是做什么的呢？Tomcat处理HTTP请求，需要有一个ServerSocket监听网络端口来完成任务。接口ProtocolHandler被设计成控制网络端口监听组件运行，负责组件的生命周期控制，这个接口实际并没有定义网络端口监听功能的规范，而是用于负责维护组件的生命周期。从ProtocolHandler的名字来看，它应该是网络协议的处理者，但它实际不负责这个功能，而是将其交给org.apache.coyote.Adapter来完成，这么设计估计是为了方便维护和拓展新功能。</p>
<p>Http11Protocol是ProtocolHandler接口的一个实现(是Connector的默认处理协议),被设计用来处理HTTP1.1网络协议的请求,通过该类可以完成在某个网络端口上面的监听,同时以HTTP1.1的协议来解析请求内容，然后将请求传递到Connector所寄居的Container容器pipeline流水工作线上处理。</p>
<p>此处的ProtocolHandler是何时生成的呢？还记得《第三章——SERVER.XML文件的加载与解析》一文中的Digester和Rule吗？Digester在解析到标签的时候，会执行startElement方法，startElement中会调用Rule的begin(String namespace, String name, Attributes attributes)方法，Connector对应的Rule就包括了ConnectorCreateRule。ConnectorCreateRule的begin方法的实现见代码如下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">(String namespace, String name, Attributes attributes)</span>  </span></div><div class="line">        <span class="keyword">throws</span> Exception &#123;  </div><div class="line">    Service svc = (Service)digester.peek();  </div><div class="line">    Executor ex = <span class="keyword">null</span>;  </div><div class="line">    <span class="keyword">if</span> ( attributes.getValue(<span class="string">"executor"</span>)!=<span class="keyword">null</span> ) &#123;  </div><div class="line">        ex = svc.getExecutor(attributes.getValue(<span class="string">"executor"</span>));  </div><div class="line">    &#125;  </div><div class="line">    Connector con = <span class="keyword">new</span> Connector(attributes.getValue(<span class="string">"protocol"</span>));  </div><div class="line">    <span class="keyword">if</span> ( ex != <span class="keyword">null</span> )  _setExecutor(con,ex);  </div><div class="line">      </div><div class="line">    digester.push(con);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码调用了Connector的构造器，传递的参数为属性protocol。我们知道server.xml中默认的Connector有两个：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=<span class="string">"8080"</span> protocol=<span class="string">"HTTP/1.1"</span>   </div><div class="line">           connectionTimeout=<span class="string">"20000"</span>   </div><div class="line">           redirectPort=<span class="string">"8443"</span> /&gt;  </div><div class="line">&lt;!-- Define an AJP <span class="number">1.3</span> Connector on port <span class="number">8009</span> --&gt;  </div><div class="line">&lt;Connector port=<span class="string">"8009"</span> protocol=<span class="string">"AJP/1.3"</span> redirectPort=<span class="string">"8443"</span> /&gt;</div></pre></td></tr></table></figure>
<p>从server.xml可以看到两个Connector都有属性protocol。</p>
<p>connector的构造器如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Connector</span><span class="params">(String protocol)</span> </span>&#123;</div><div class="line">    setProtocol(protocol);</div><div class="line">    <span class="comment">// Instantiate protocol handler</span></div><div class="line">    ProtocolHandler p = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Class&lt;?&gt; clazz = Class.forName(protocolHandlerClassName);</div><div class="line">        p = (ProtocolHandler) clazz.newInstance();</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        log.error(sm.getString(</div><div class="line">                <span class="string">"coyoteConnector.protocolHandlerInstantiationFailed"</span>), e);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">this</span>.protocolHandler = p;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!Globals.STRICT_SERVLET_COMPLIANCE) &#123;</div><div class="line">        URIEncoding = <span class="string">"UTF-8"</span>;</div><div class="line">        URIEncodingLower = URIEncoding.toLowerCase(Locale.ENGLISH);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>setProtocol方法根据protocol参数的不同，调用setProtocolHandlerClassName方法（见代码清单5）设置protocolHandlerClassName属性。以HTTP/1.1为例，由于默认情况下Apr不可用，所以protocolHandlerClassName会被设置为org.apache.coyote.http11.Http11Protocol，那么反射生成的protocolHandler就是Http11Protocol实例。Tomcat默认还会配置协议是AJP/1.3的Connector，那么此Connector的protocolHandler就是org.apache.coyote.ajp.AjpProtocol。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProtocol</span><span class="params">(String protocol)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (AprLifecycleListener.isAprAvailable()) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="string">"HTTP/1.1"</span>.equals(protocol)) &#123;</div><div class="line">                setProtocolHandlerClassName</div><div class="line">                    (<span class="string">"org.apache.coyote.http11.Http11AprProtocol"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"AJP/1.3"</span>.equals(protocol)) &#123;</div><div class="line">                setProtocolHandlerClassName</div><div class="line">                    (<span class="string">"org.apache.coyote.ajp.AjpAprProtocol"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (protocol != <span class="keyword">null</span>) &#123;</div><div class="line">                setProtocolHandlerClassName(protocol);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                setProtocolHandlerClassName</div><div class="line">                    (<span class="string">"org.apache.coyote.http11.Http11AprProtocol"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="string">"HTTP/1.1"</span>.equals(protocol)) &#123;</div><div class="line">                setProtocolHandlerClassName</div><div class="line">                    (<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"AJP/1.3"</span>.equals(protocol)) &#123;</div><div class="line">                setProtocolHandlerClassName</div><div class="line">                    (<span class="string">"org.apache.coyote.ajp.AjpNioProtocol"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (protocol != <span class="keyword">null</span>) &#123;</div><div class="line">                setProtocolHandlerClassName(protocol);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>除此之外，ProtocolHandler还有其它实现，如图1所示。</p>
<p><img src="http://i.imgur.com/xUrR6F8.png" alt=""></p>
<p>图1中有关ProtocolHandler的实现类都在org.apache.coyote包中 。前面所说的BIO Http Connector实际就是Http11Protocol，NIO Http Connector实际就是Http11NioProtocol，AJP Connector包括AjpProtocol和AjpAprProtocol，APR HTTP Connector包括AjpAprProtocol、Http11AprProtocol.</p>
<ol>
<li><strong>Connector的启动</strong></li>
</ol>
<p>根据《生命周期管理》一章的内容，我们知道Tomcat中有很多容器。ProtocolHandler的初始化稍微有些特殊，Server、Service、Connector这三个容器的初始化顺序为：Server-&gt;Service-&gt;Connector。值得注意的是，ProtocolHandler作为Connector的子容器，其初始化过程并不是由Connector的initInternal方法调用的，而是与启动过程一道被Connector的startInternal方法所调用。由于本文的目的是分析请求，所以直接从Connector的startInternal方法（见代码清单6）开始。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Begin processing requests via this Connector.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@exception</span> LifecycleException if a fatal startup error occurs</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// Validate settings before starting</span></div><div class="line">        <span class="keyword">if</span> (getPort() &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(sm.getString(</div><div class="line">                    <span class="string">"coyoteConnector.invalidPort"</span>, Integer.valueOf(getPort())));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setState(LifecycleState.STARTING);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            protocolHandler.start();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            String errPrefix = <span class="string">""</span>;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.service != <span class="keyword">null</span>) &#123;</div><div class="line">                errPrefix += <span class="string">"service.getName(): \""</span> + <span class="keyword">this</span>.service.getName() + <span class="string">"\"; "</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException</div><div class="line">                (errPrefix + <span class="string">" "</span> + sm.getString</div><div class="line">                 (<span class="string">"coyoteConnector.protocolHandlerStartFailed"</span>), e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>代码清单6说明了Connector的startInternal方法的执行顺序如下：</p>
<ol>
<li>将Connector容器的状态更改为启动中（LifecycleState.STARTING）；</li>
<li>初始化ProtocolHandler；</li>
<li>启动ProtocolHandler；</li>
<li>初始化MapperListener。</li>
</ol>
<h6 id="初始化ProtocolHandler"><a href="#初始化ProtocolHandler" class="headerlink" title="初始化ProtocolHandler"></a>初始化ProtocolHandler</h6><p>简单起见，我们以Http11Protocol为例剖析ProtocolHandler的init方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ------------------------------------------------------- Lifecycle methods</span></div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * <span class="doctag">NOTE:</span> There is no maintenance of state or checking for valid transitions</div><div class="line">     * within this class. It is expected that the connector will maintain state</div><div class="line">     * and prevent invalid state transitions.</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">if</span> (getLog().isInfoEnabled())</div><div class="line">            getLog().info(sm.getString(<span class="string">"abstractProtocolHandler.init"</span>,</div><div class="line">                    getName()));</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (oname == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// Component not pre-registered so register it</span></div><div class="line">            oname = createObjectName();</div><div class="line">            <span class="keyword">if</span> (oname != <span class="keyword">null</span>) &#123;</div><div class="line">                Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(<span class="keyword">this</span>, oname,</div><div class="line">                    <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.domain != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                tpOname = <span class="keyword">new</span> ObjectName(domain + <span class="string">":"</span> +</div><div class="line">                        <span class="string">"type=ThreadPool,name="</span> + getName());</div><div class="line">                Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(endpoint,</div><div class="line">                        tpOname, <span class="keyword">null</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                getLog().error(sm.getString(</div><div class="line">                        <span class="string">"abstractProtocolHandler.mbeanRegistrationFailed"</span>,</div><div class="line">                        tpOname, getName()), e);</div><div class="line">            &#125;</div><div class="line">            rgOname=<span class="keyword">new</span> ObjectName(domain +</div><div class="line">                    <span class="string">":type=GlobalRequestProcessor,name="</span> + getName());</div><div class="line">            Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(</div><div class="line">                    getHandler().getGlobal(), rgOname, <span class="keyword">null</span> );</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String endpointName = getName();</div><div class="line">        endpoint.setName(endpointName.substring(<span class="number">1</span>, endpointName.length()-<span class="number">1</span>));</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            endpoint.init();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">            getLog().error(sm.getString(<span class="string">"abstractProtocolHandler.initError"</span>,</div><div class="line">                    getName()), ex);</div><div class="line">            <span class="keyword">throw</span> ex;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// SSL implementation needs to be in place before end point is</span></div><div class="line">        <span class="comment">// initialized</span></div><div class="line">        sslImplementation = SSLImplementation.getInstance(sslImplementationName);</div><div class="line">        <span class="keyword">super</span>.init();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initSsl</span><span class="params">(SocketWrapper&lt;Socket&gt; socket,</span></span></div><div class="line">                Processor&lt;Socket&gt; processor) &#123;</div><div class="line">            <span class="keyword">if</span> (proto.isSSLEnabled() &amp;&amp; (proto.sslImplementation != <span class="keyword">null</span>)) &#123;</div><div class="line">                processor.setSslSupport(</div><div class="line">                        proto.sslImplementation.getSSLSupport(</div><div class="line">                                socket.getSocket()));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                processor.setSslSupport(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>从上述代码可以查看Http11Protocol的初始化步骤如下：</p>
<ol>
<li>设置JIoEndpoint的名称</li>
<li>设置JIoEndpoint的Handler</li>
<li>配置ServerSocketFactory</li>
</ol>
<h6 id="启动ProtocolHandler"><a href="#启动ProtocolHandler" class="headerlink" title="启动ProtocolHandler"></a>启动ProtocolHandler</h6><p>我们继续以Http11Protocol为例，剖析ProtocolHandler的start方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">if</span> (getLog().isInfoEnabled())</div><div class="line">            getLog().info(sm.getString(<span class="string">"abstractProtocolHandler.start"</span>,</div><div class="line">                    getName()));</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            endpoint.start();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">            getLog().error(sm.getString(<span class="string">"abstractProtocolHandler.startError"</span>,</div><div class="line">                    getName()), ex);</div><div class="line">            <span class="keyword">throw</span> ex;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>最后调用JIoEndpoint的start方法（见代码清单11）创建接受请求的线程池并创建一定数量的接收请求线程。 endpoint start方法执行如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">       <span class="keyword">if</span> (bindState == BindState.UNBOUND) &#123;</div><div class="line">           bind();</div><div class="line">           bindState = BindState.BOUND_ON_START;</div><div class="line">       &#125;</div><div class="line">       startInternal();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (!running) &#123;</div><div class="line">           running = <span class="keyword">true</span>;</div><div class="line">           paused = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">           <span class="comment">// Create worker collection</span></div><div class="line">           <span class="keyword">if</span> (getExecutor() == <span class="keyword">null</span>) &#123;</div><div class="line">               createExecutor();</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           initializeConnectionLatch();</div><div class="line"></div><div class="line">           startAcceptorThreads();</div><div class="line"></div><div class="line">           <span class="comment">// Start async timeout thread</span></div><div class="line">           setAsyncTimeout(<span class="keyword">new</span> AsyncTimeout());</div><div class="line">           Thread timeoutThread = <span class="keyword">new</span> Thread(getAsyncTimeout(), getName() + <span class="string">"-AsyncTimeout"</span>);</div><div class="line">           timeoutThread.setPriority(threadPriority);</div><div class="line">           timeoutThread.setDaemon(<span class="keyword">true</span>);</div><div class="line">           timeoutThread.start();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>从代码中可以看出上述代码主要做以下工作：</p>
<ol>
<li>创建线程池与任务队列</li>
</ol>
<p>如果JIoEndpoint尚未处于运行中（即running等于true），才会创建线程池和任务队列。如果尚未创建线程池（即调用getExecutor方法等于null），则需要调用createExecutor方法（见代码清单12）创建线程池和任务队列TaskQueue。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">    internalExecutor = <span class="keyword">true</span>;</div><div class="line">    TaskQueue taskqueue = <span class="keyword">new</span> TaskQueue();</div><div class="line">    TaskThreadFactory tf = <span class="keyword">new</span> TaskThreadFactory(getName() + <span class="string">"-exec-"</span>, daemon, getThreadPriority());</div><div class="line">    executor = <span class="keyword">new</span> ThreadPoolExecutor(getMinSpareThreads(), getMaxThreads(), <span class="number">60</span>, TimeUnit.SECONDS,taskqueue, tf);</div><div class="line">    taskqueue.setParent( (ThreadPoolExecutor) executor);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>创建接收请线程</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">startAcceptorThreads</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count = getAcceptorThreadCount();</div><div class="line">        acceptors = <span class="keyword">new</span> Acceptor[count];</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">            acceptors[i] = createAcceptor();</div><div class="line">            String threadName = getName() + <span class="string">"-Acceptor-"</span> + i;</div><div class="line">            acceptors[i].setThreadName(threadName);</div><div class="line">            Thread t = <span class="keyword">new</span> Thread(acceptors[i], threadName);</div><div class="line">            t.setPriority(getAcceptorThreadPriority());</div><div class="line">            t.setDaemon(getDaemon());</div><div class="line">            t.start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>如果JIoEndpoint尚未处于运行中（即running等于true），才会创建接收请求线程。从代码可以看出接收请求线程的数量主要由acceptorThreadCount控制，代码清单9已经告诉我们acceptorThreadCount的默认值为1，但是我们可以通过给Connector增加acceptorThreadCount属性来修改接收请求线程的数量。这些接收请求线程的主要工作由Acceptor完成，Acceptor的实质是一个Runnable.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Acceptor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">enum</span> AcceptorState &#123;</div><div class="line">            NEW, RUNNING, PAUSED, ENDED</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">protected</span> <span class="keyword">volatile</span> AcceptorState state = AcceptorState.NEW;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AcceptorState <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> state;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> String threadName;</div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setThreadName</span><span class="params">(<span class="keyword">final</span> String threadName)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.threadName = threadName;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> String <span class="title">getThreadName</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> threadName;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="第八章-Tomcat一次完整请求的处理流程"><a href="#第八章-Tomcat一次完整请求的处理流程" class="headerlink" title="第八章 Tomcat一次完整请求的处理流程"></a>第八章 Tomcat一次完整请求的处理流程</h3><h4 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h4><p>上一章介绍了请求前的准备工作，这一章讲解tomact一次完成请求的处理流程。</p>
<p>Tomcat一次完整请求处理的重点功能如下：</p>
<ol>
<li><p>接收Socket请求，把请求转发到线程池，由线程池分配一个线程来处理。</p>
</li>
<li><p>获取Socket数据包之后，解析HTTP协议，翻译成Tomcat内部的Request和Response对象，再映射相应Container。</p>
</li>
<li><p>Request和Response对象进入Tomcat中的Container容器的各级Piepline管道去流式执行，最终会流到StandardWrapperValve这个阀门。</p>
</li>
<li><p>在 StandardWrapperValve这个阀门中，把当前请求的Filter及Servlet封装成FilterChain, 最终执行FilterChain, 回调Web应用，完成响应。</p>
</li>
</ol>
<p>请求处理框架如下所示：</p>
<p><img src="http://i.imgur.com/0uqOq7A.jpg" alt=""></p>
<ul>
<li>Acceptor：负责从ServerSocket中接收新的连接，并将Socket转交给SocketProcessor处理。Acceptor是JIoEndpoint的内部类，Acceptor线程的默认数量为1，我们可以在server.xml的Connector配置中增加acceptorThreadCount的大小。</li>
<li>SocketProcessor：负责对Acceptor转交的Socket进行处理，包括给Socket设置属性、读取请求行和请求头等，最终将处理交给Engine的Pipeline处理。</li>
<li>ThreadPool：执行SocketProcessor的线程池，此线程池默认的最小线程数minSpareThreads等于10，最大线程数maxThreads等于200，我们可以在server.xml的Connector配置中调整它们的大小。</li>
<li>Pipeline：SocketProcessor线程最后会将请求进一步交给Engine容器的Pipeline，管道Pipeline包括一系列的valve，如：StandardEngineValve、AccessLogValve、ErrorReportValve、StandardHostValve、 StandardContextValve、 StandardWrapperValve，它们就像地下水管中的一个个阀门，每一个都会对请求数据做不同的处理。</li>
<li>FilterChain：管道Pipeline的最后一个valve是StandardWrapperValve，它会负责生成Servlet和Filter实例，并将它们组织成对请求处理的链条，这里正是Tomcat与J2EE规范相结合的部分。</li>
</ul>
<h4 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h4><p>JIoEndpoint类结构：<br><img src="http://i.imgur.com/OjxF6fh.png" alt=""></p>
<p>JIoEndpoint的Acceptor线程在接收到用户的请求之后，调用processSocket方法。该方法主要是从Executor请求处理线程池中获取一个线程，然后启用一个新线程执行Socket请求，JIoEndpoint的processSocket()方法的核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Process a new connection from a new client. Wraps the socket so</div><div class="line">    * keep-alive and other attributes can be tracked and then passes the socket</div><div class="line">    * to the executor for processing.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> socket    The socket associated with the client.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@return</span>          &lt;code&gt;true&lt;/code&gt; if the socket is passed to the</div><div class="line">    *                  executor, &lt;code&gt;false&lt;/code&gt; if something went wrong or</div><div class="line">    *                  if the endpoint is shutting down. Returning</div><div class="line">    *                  &lt;code&gt;false&lt;/code&gt; is an indication to close the socket</div><div class="line">    *                  immediately.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">processSocket</span><span class="params">(Socket socket)</span> </span>&#123;</div><div class="line">       <span class="comment">// Process the request from this socket</span></div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           SocketWrapper&lt;Socket&gt; wrapper = <span class="keyword">new</span> SocketWrapper&lt;&gt;(socket);</div><div class="line">           wrapper.setKeepAliveLeft(getMaxKeepAliveRequests());</div><div class="line">           wrapper.setSecure(isSSLEnabled());</div><div class="line">           <span class="comment">// During shutdown, executor may be null - avoid NPE</span></div><div class="line">           <span class="keyword">if</span> (!running) &#123;</div><div class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">           &#125;</div><div class="line">           getExecutor().execute(<span class="keyword">new</span> SocketProcessor(wrapper));</div><div class="line">       &#125; <span class="keyword">catch</span> (RejectedExecutionException x) &#123;</div><div class="line">           log.warn(<span class="string">"Socket processing request was rejected for:"</span>+socket,x);</div><div class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">           ExceptionUtils.handleThrowable(t);</div><div class="line">           <span class="comment">// This means we got an OOM or similar creating a thread, or that</span></div><div class="line">           <span class="comment">// the pool and its queue are full</span></div><div class="line">           log.error(sm.getString(<span class="string">"endpoint.process.fail"</span>), t);</div><div class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>上述代码主要做以下工作：</p>
<ol>
<li>把Socket包装成SocketWrapper</li>
<li>把SocketWrapper包装成SocketProcessor交给线程池处理,当前Acceptor线程不处理,以便接收下一个到达的请求</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;h4 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1.背景&quot;&gt;&lt;/a&gt;1.背景&lt;/h
    
    </summary>
    
    
      <category term="tomact" scheme="http://yoursite.com/tags/tomact/"/>
    
  </entry>
  
  <entry>
    <title>tomact1</title>
    <link href="http://yoursite.com/2016/12/31/tomact1/"/>
    <id>http://yoursite.com/2016/12/31/tomact1/</id>
    <published>2016-12-31T04:08:12.000Z</published>
    <updated>2017-01-03T04:01:51.175Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文内容只要参考深入剖析tomact。由于这本书是基于tomcat4的，所以我的文章也是基于tomcat4的，但是tomcat的核心思想应该是没有变的，最主要的两个组件还是连接器和容器。本文内容主要为了学习。</p>
<h3 id="第一章：tomact服务启动"><a href="#第一章：tomact服务启动" class="headerlink" title="第一章：tomact服务启动"></a>第一章：tomact服务启动</h3><p>为了后面的理解，先大致说一下Tomcat的整体架构，Tomcat主要有两个组件，连接器和容器，所谓连接器就是一个http请求过来了，连接器负责接收这个请求，然后转发给容器。容器即servlet容器，容器有很多层，分别是Engine，Host，Context，Wrapper。最大的容器Engine，代表一个servlet 引擎，接下来是Host，代表一个虚拟机，然后是Context，代表一个应用，Wrapper对应一个servlet。从连接器传过来连接后，容器便会顺序经过上面的容器，最后到达特定的servlet。要说明的是Engine，Host两种容器在不是必须的。实际上一个简单的tomcat只要连接器和容器就可以了，但tomcat的实现为了统一管理连接器和容器等组件，额外添加了服务器组件（server）和服务组件（service）。</p>
<p>一个server可以有多个service，一个service包含多个连接器和一个容器，当然还有一些其他的东西，看下面的图就很容易理解Tomcat的架构了：</p>
<p><img src="http://i.imgur.com/irZpmOV.png" alt=""></p>
<p>一个父组件又可以包含多个子组件，这些被统一管理的组件都实现了Lifecycle接口。只要一个组件启动了，那么他的所有子组件也会跟着启动，比如一个server启动了，它的所有子service都会跟着启动，service启动了，它的所有连接器和容器等子组件也跟着启动了，这样，tomcat要启动，只要启动server就行了，其他的组件都会跟随着启动。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本文内容只要参考深入剖析tomact。由于这本书是基于tomcat4的，所以我的文章也是基于tomcat4的，但是tomcat的核心思想应该
    
    </summary>
    
    
      <category term="tomact" scheme="http://yoursite.com/tags/tomact/"/>
    
  </entry>
  
  <entry>
    <title>tomact源码分析1</title>
    <link href="http://yoursite.com/2016/12/27/tomact%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901/"/>
    <id>http://yoursite.com/2016/12/27/tomact源码分析1/</id>
    <published>2016-12-27T05:33:17.000Z</published>
    <updated>2016-12-27T14:45:45.501Z</updated>
    
    <content type="html"><![CDATA[<h3 id="tomact源码分析1-简单的server实现"><a href="#tomact源码分析1-简单的server实现" class="headerlink" title="tomact源码分析1-简单的server实现"></a>tomact源码分析1-简单的server实现</h3><h4 id="1-HTTP-请求"><a href="#1-HTTP-请求" class="headerlink" title="1.HTTP 请求"></a>1.HTTP 请求</h4><p>一个 HTTP 请求包括三个组成部分：</p>
<ul>
<li>方法—统一资源标识符(URI)—协议/版本</li>
<li>请求的头部</li>
<li>主体内容</li>
</ul>
<p>ps:方法（7种）：GET, POST,HEAD, OPTIONS, PUT, DELETE 和 TRACE。头部结束和内容之间有一个空行</p>
<p>examples</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">POST /examples/default.jsp HTTP/1.1</div><div class="line">Accept: text/plain; text/html</div><div class="line">Accept-Language: en-gb</div><div class="line">Connection: Keep-Alive</div><div class="line">Host: localhost</div><div class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 4.01; Windows 98)</div><div class="line">Content-Length: 33</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line"></div><div class="line">lastName=Franks&amp;firstName=Michael</div></pre></td></tr></table></figure>
<h4 id="2-HTTP-响应"><a href="#2-HTTP-响应" class="headerlink" title="2.HTTP 响应"></a>2.HTTP 响应</h4><p>examples：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Server: Microsoft-IIS/4.0</div><div class="line">Date: Mon, 5 Jan 2004 13:13:33 GMT</div><div class="line">Content-Type: text/html</div><div class="line">Last-Modified: Mon, 5 Jan 2004 13:13:12 GMT</div><div class="line">Content-Length: 112</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>HTTP Response Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">Welcome to Brainy Software</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="3-socket-amp-amp-ServerSocket"><a href="#3-socket-amp-amp-ServerSocket" class="headerlink" title="3.socket&amp;&amp;ServerSocket"></a>3.socket&amp;&amp;ServerSocket</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Socket</span> <span class="params">(java.lang.String host, <span class="keyword">int</span> port)</span></span></div></pre></td></tr></table></figure>
<p>socket类代表一个客户端套接字</p>
<p>serversocket是一个服务器套接字。用来等待来自客户端的连接请求。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServerSocket</span><span class="params">(<span class="keyword">int</span> port, <span class="keyword">int</span> backLog, InetAddress bindingAddress)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="4-server例子"><a href="#4-server例子" class="headerlink" title="4.server例子"></a>4.server例子</h4><p>该部分主要分为3个类。是一个最最基础的server实现。</p>
<p>server：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> ex01;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">import</span> java.net.InetAddress;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServer</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/** WEB_ROOT is the directory where our HTML and other files reside.</span></div><div class="line">   *  For this package, WEB_ROOT is the "webroot" directory under the working</div><div class="line">   *  directory.</div><div class="line">   *  The working directory is the location in the file system</div><div class="line">   *  from where the java command was invoked.</div><div class="line">   */</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String WEB_ROOT =</div><div class="line">    System.getProperty(<span class="string">"user.dir"</span>) + File.separator  + <span class="string">"webroot"</span>;</div><div class="line"></div><div class="line">  <span class="comment">// shutdown command</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SHUTDOWN_COMMAND = <span class="string">"/SHUTDOWN"</span>;</div><div class="line"></div><div class="line">  <span class="comment">// the shutdown command received</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> shutdown = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    HttpServer server = <span class="keyword">new</span> HttpServer();</div><div class="line">    System.out.println(WEB_ROOT);</div><div class="line">    server.await();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> </span>&#123;</div><div class="line">    ServerSocket serverSocket = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">int</span> port = <span class="number">8080</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      serverSocket =  <span class="keyword">new</span> ServerSocket(port, <span class="number">1</span>, InetAddress.getByName(<span class="string">"127.0.0.1"</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">      e.printStackTrace();</div><div class="line">      System.exit(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Loop waiting for a request</span></div><div class="line">    <span class="keyword">while</span> (!shutdown) &#123;</div><div class="line">      Socket socket = <span class="keyword">null</span>;</div><div class="line">      InputStream input = <span class="keyword">null</span>;</div><div class="line">      OutputStream output = <span class="keyword">null</span>;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        socket = serverSocket.accept();</div><div class="line">        input = socket.getInputStream();</div><div class="line">        output = socket.getOutputStream();</div><div class="line"></div><div class="line">        <span class="comment">// create Request object and parse</span></div><div class="line">        Request request = <span class="keyword">new</span> Request(input);</div><div class="line">        request.parse();</div><div class="line"></div><div class="line">        <span class="comment">// create Response object</span></div><div class="line">        Response response = <span class="keyword">new</span> Response(output);</div><div class="line">        response.setRequest(request);</div><div class="line">        response.sendStaticResource();</div><div class="line"></div><div class="line">        <span class="comment">// Close the socket</span></div><div class="line">        socket.close();</div><div class="line"></div><div class="line">        <span class="comment">//check if the previous URI is a shutdown command</span></div><div class="line">        shutdown = request.getUri().equals(SHUTDOWN_COMMAND);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>request:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> ex01;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> InputStream input;</div><div class="line">  <span class="keyword">private</span> String uri;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Request</span><span class="params">(InputStream input)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.input = input;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// Read a set of characters from the socket</span></div><div class="line">    StringBuffer request = <span class="keyword">new</span> StringBuffer(<span class="number">2048</span>);</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      i = input.read(buffer);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">      e.printStackTrace();</div><div class="line">      i = -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++) &#123;</div><div class="line">      request.append((<span class="keyword">char</span>) buffer[j]);</div><div class="line">    &#125;</div><div class="line">    System.out.print(request.toString());</div><div class="line">    uri = parseUri(request.toString());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">parseUri</span><span class="params">(String requestString)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> index1, index2;</div><div class="line">    index1 = requestString.indexOf(<span class="string">' '</span>);</div><div class="line">    <span class="keyword">if</span> (index1 != -<span class="number">1</span>) &#123;</div><div class="line">      index2 = requestString.indexOf(<span class="string">' '</span>, index1 + <span class="number">1</span>);</div><div class="line">      <span class="keyword">if</span> (index2 &gt; index1)</div><div class="line">        <span class="keyword">return</span> requestString.substring(index1 + <span class="number">1</span>, index2);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getUri</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> uri;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>response:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> ex01;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">  HTTP Response = Status-Line</div><div class="line">    *(( general-header | response-header | entity-header ) CRLF)</div><div class="line">    CRLF</div><div class="line">    [ message-body ]</div><div class="line">    Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER_SIZE = <span class="number">1024</span>;</div><div class="line">  Request request;</div><div class="line">  OutputStream output;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Response</span><span class="params">(OutputStream output)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.output = output;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequest</span><span class="params">(Request request)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.request = request;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendStaticResource</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_SIZE];</div><div class="line">    FileInputStream fis = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      File file = <span class="keyword">new</span> File(HttpServer.WEB_ROOT, request.getUri());</div><div class="line">      <span class="keyword">if</span> (file.exists()) &#123;</div><div class="line">        fis = <span class="keyword">new</span> FileInputStream(file);</div><div class="line">        <span class="keyword">int</span> ch = fis.read(bytes, <span class="number">0</span>, BUFFER_SIZE);</div><div class="line">        <span class="keyword">while</span> (ch!=-<span class="number">1</span>) &#123;</div><div class="line">          output.write(bytes, <span class="number">0</span>, ch);</div><div class="line">          ch = fis.read(bytes, <span class="number">0</span>, BUFFER_SIZE);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// file not found</span></div><div class="line">        String errorMessage = <span class="string">"HTTP/1.1 404 File Not Found\r\n"</span> +</div><div class="line">          <span class="string">"Content-Type: text/html\r\n"</span> +</div><div class="line">          <span class="string">"Content-Length: 23\r\n"</span> +</div><div class="line">          <span class="string">"\r\n"</span> +</div><div class="line">          <span class="string">"&lt;h1&gt;File Not Found&lt;/h1&gt;"</span>;</div><div class="line">        output.write(errorMessage.getBytes());</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">      <span class="comment">// thrown if cannot instantiate a File object</span></div><div class="line">      System.out.println(e.toString() );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">finally</span> &#123;</div><div class="line">      <span class="keyword">if</span> (fis!=<span class="keyword">null</span>)</div><div class="line">        fis.close();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;tomact源码分析1-简单的server实现&quot;&gt;&lt;a href=&quot;#tomact源码分析1-简单的server实现&quot; class=&quot;headerlink&quot; title=&quot;tomact源码分析1-简单的server实现&quot;&gt;&lt;/a&gt;tomact源码分析1-简单的se
    
    </summary>
    
      <category term="tomact" scheme="http://yoursite.com/categories/tomact/"/>
    
    
      <category term="tomact" scheme="http://yoursite.com/tags/tomact/"/>
    
  </entry>
  
  <entry>
    <title>pat1011</title>
    <link href="http://yoursite.com/2016/12/26/pat1011/"/>
    <id>http://yoursite.com/2016/12/26/pat1011/</id>
    <published>2016-12-26T12:50:35.000Z</published>
    <updated>2016-12-26T12:55:00.701Z</updated>
    
    <content type="html"><![CDATA[<p>1011.World Cup Betting (20)</p>
<p>With the 2010 FIFA World Cup running, football fans the world over were becoming increasingly excited as the best players from the best teams doing battles for the World Cup trophy in South Africa. Similarly, football betting fans were putting their money where their mouths were, by laying all manner of World Cup bets.</p>
<p>Chinese Football Lottery provided a “Triple Winning” game. The rule of winning was simple: first select any three of the games. Then for each selected game, bet on one of the three possible results – namely W for win, T for tie, and L for lose. There was an odd assigned to each result. The winner’s odd would be the product of the three odds times 65%.</p>
<p>For example, 3 games’ odds are given as the following:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> W    T    L</div><div class="line">1.1  2.5  1.7</div><div class="line">1.2  3.0  1.6</div><div class="line">4.1  1.2  1.1</div></pre></td></tr></table></figure>
<p>To obtain the maximum profit, one must buy W for the 3rd game, T for the 2nd game, and T for the 1st game. If each bet takes 2 yuans, then the maximum profit would be <code>(4.1*3.0*2.5*65%-1)*2 = 37.98</code> yuans (accurate up to 2 decimal places).</p>
<p>Input</p>
<p>Each input file contains one test case. Each case contains the betting information of 3 games. Each game occupies a line with three distinct odds corresponding to W, T and L.</p>
<p>Output</p>
<p>For each test case, print in one line the best bet of each game, and the maximum profit accurate up to 2 decimal places. The characters and the number must be separated by one space.</p>
<p>Sample Input</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.1 2.5 1.7</div><div class="line">1.2 3.0 1.6</div><div class="line">4.1 1.2 1.1</div></pre></td></tr></table></figure>
<p>Sample Output</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">T T W 37.98</div></pre></td></tr></table></figure>
<p>思路：属于简单送分题。按照思路，直接写程序就好。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pat;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t11</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		String[] s=&#123;<span class="string">"W"</span>,<span class="string">"T"</span>,<span class="string">"L"</span>&#125;;</div><div class="line">		String[] ss=<span class="keyword">new</span> String[<span class="number">3</span>];</div><div class="line">		Scanner sc= <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="keyword">double</span> sum=<span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</div><div class="line">			<span class="keyword">double</span> x=<span class="number">0</span>;</div><div class="line">			<span class="keyword">int</span> index=<span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</div><div class="line">				<span class="keyword">double</span> t=sc.nextDouble();</div><div class="line">				<span class="keyword">if</span>(x&lt;t)&#123;</div><div class="line">					x=t;</div><div class="line">					index=j;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			ss[i]=s[index];</div><div class="line">			sum*=x;	</div><div class="line">		&#125;</div><div class="line">		sc.close();</div><div class="line">		<span class="keyword">for</span>(String str:ss)</div><div class="line">			System.out.print(str+<span class="string">" "</span>);</div><div class="line">		System.out.printf(<span class="string">"%.2f"</span>,(sum*<span class="number">0.65</span>-<span class="number">1</span>)*<span class="number">2</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1011.World Cup Betting (20)&lt;/p&gt;
&lt;p&gt;With the 2010 FIFA World Cup running, football fans the world over were becoming increasingly excited 
    
    </summary>
    
    
      <category term="pat" scheme="http://yoursite.com/tags/pat/"/>
    
  </entry>
  
  <entry>
    <title>pat1010</title>
    <link href="http://yoursite.com/2016/12/26/pat1010/"/>
    <id>http://yoursite.com/2016/12/26/pat1010/</id>
    <published>2016-12-26T12:43:07.000Z</published>
    <updated>2016-12-26T12:50:14.406Z</updated>
    
    <content type="html"><![CDATA[<p>1010.Radix (25)</p>
<p>Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is “yes”, if 6 is a decimal number and 110 is a binary number.</p>
<p>Now for any pair of positive integers N1 and N2, your task is to find the radix of one number while that of the other is given.</p>
<p>Input Specification:</p>
<p>Each input file contains one test case. Each case occupies a line which contains 4 positive integers:<br>N1 N2 tag radix<br>Here N1 and N2 each has no more than 10 digits. A digit is less than its radix and is chosen from the set {0-9, a-z} where 0-9 represent the decimal numbers 0-9, and a-z represent the decimal numbers 10-35. The last number “radix” is the radix of N1 if “tag” is 1, or of N2 if “tag” is 2.</p>
<p>Output Specification:</p>
<p>For each test case, print in one line the radix of the other number so that the equation N1 = N2 is true. If the equation is impossible, print “Impossible”. If the solution is not unique, output the smallest possible radix.</p>
<p>Sample Input 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">6 110 1 10</div></pre></td></tr></table></figure></p>
<p>Sample Output 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2</div></pre></td></tr></table></figure></p>
<p>Sample Input 2:<br><figure class="highlight plain"><figcaption><span>ab 1 2```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Sample Output 2:</div><div class="line">```Impossible</div></pre></td></tr></table></figure></p>
<p>思路：如果a等于b，第二个进制数应该大于b中最大的数字，小于等于a的值+1。并且基数有可能很大，所以要声明long。</p>
<p>解答：<br>C++版本</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> uLL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1</span>&lt;&lt;<span class="number">30</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">50</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">toint</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> ans;</div><div class="line">	<span class="keyword">if</span>(c &gt; <span class="string">'9'</span>) ans = c-<span class="string">'a'</span>+<span class="number">10</span>;</div><div class="line">	<span class="keyword">else</span> ans = c-<span class="string">'0'</span>;</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">uLL <span class="title">change</span><span class="params">(<span class="built_in">string</span> s, uLL r)</span></span>&#123;</div><div class="line">	uLL ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; s[i]; i++)  ans = ans*r + toint(s[i]);</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findmax</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; s[i]; i++) <span class="keyword">if</span>(ans &lt; toint(s[i])) ans = toint(s[i]);</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> tag,r;</div><div class="line">	uLL x,y;</div><div class="line">	<span class="built_in">string</span> a,b;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;tag&gt;&gt;r;</div><div class="line">	<span class="keyword">if</span>(tag==<span class="number">2</span>) swap(a,b);</div><div class="line">	x = change(a,r);</div><div class="line">	<span class="keyword">for</span>(uLL l=findmax(b)+<span class="number">1</span>, r = x+<span class="number">1</span>; l &lt;= r; )&#123;</div><div class="line">		uLL m = l+r &gt;&gt; <span class="number">1</span>;</div><div class="line">		y = change(b,m);</div><div class="line">		<span class="keyword">if</span>(y==x) &#123; <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,m); <span class="keyword">return</span> <span class="number">0</span>; &#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(y&gt;x) r = m<span class="number">-1</span>;</div><div class="line">		<span class="keyword">else</span> l = m+<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div></pre></td></tr></table></figure>
<p>java测试用例没有全部通过。我不知道什么原因。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pat;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t10_2</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">toint</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> c&gt;<span class="string">'9'</span>?c-<span class="string">'a'</span>+<span class="number">10</span>:c-<span class="string">'0'</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">change</span><span class="params">(String s,<span class="keyword">long</span> radix)</span></span>&#123;</div><div class="line">		<span class="keyword">long</span> ans=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</div><div class="line">			ans=ans*radix+toint(s.charAt(i));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> ans;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findmax</span><span class="params">(String s)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</div><div class="line">			<span class="keyword">if</span>(ans&lt;toint(s.charAt(i))) ans=toint(s.charAt(i));</div><div class="line">		<span class="keyword">return</span> ans;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> <span class="keyword">long</span> tag,r;</div><div class="line">	<span class="keyword">static</span> String a,b;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">long</span> x,y;</div><div class="line">		Scanner sc=<span class="keyword">new</span> Scanner(System.in);</div><div class="line">		a=sc.next();</div><div class="line">		b=sc.next();</div><div class="line">		tag=sc.nextInt();</div><div class="line">		r=sc.nextLong();</div><div class="line">		sc.close();</div><div class="line">		<span class="keyword">if</span>(tag==<span class="number">2</span>)&#123;</div><div class="line">			String tmp=a;a=b;b=tmp;</div><div class="line">		&#125;</div><div class="line">		x=change(a, r);		</div><div class="line">		<span class="keyword">long</span> left=findmax(b)+<span class="number">1</span>,right=x+<span class="number">1</span>;</div><div class="line">		<span class="keyword">while</span>(left&lt;=right)&#123;</div><div class="line">			<span class="keyword">long</span> middle=(left+right)&gt;&gt;<span class="number">1</span>;</div><div class="line">			y=change(b, middle);</div><div class="line">			<span class="keyword">if</span>(x==y)&#123;System.out.println(middle);  <span class="keyword">return</span>;&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(y&gt;x) right=middle-<span class="number">1</span>;</div><div class="line">			<span class="keyword">else</span> left=middle+<span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"Impossible"</span>);</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1010.Radix (25)&lt;/p&gt;
&lt;p&gt;Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is “yes”,
    
    </summary>
    
    
      <category term="pat" scheme="http://yoursite.com/tags/pat/"/>
    
  </entry>
  
  <entry>
    <title>memcached</title>
    <link href="http://yoursite.com/2016/12/24/memcached/"/>
    <id>http://yoursite.com/2016/12/24/memcached/</id>
    <published>2016-12-24T05:21:48.000Z</published>
    <updated>2016-12-24T05:23:03.860Z</updated>
    
    <content type="html"><![CDATA[<p>原理：</p>
<ol>
<li>Memcached是danga的一个项目，最早是为LiveJournal服务的，后来被很多大型网站采用。www.danga.com</li>
<li>一种缓存技术，可以把你的数据放入内存，从而通过内存访问，提速。维护了一张大的hashtable表，该表是在内存中的，表结构：key    value。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Memcached是danga的一个项目，最早是为LiveJournal服务的，后来被很多大型网站采用。www.danga.com&lt;/li&gt;
&lt;li&gt;一种缓存技术，可以把你的数据放入内存，从而通过内存访问，提速。维护了一张大的hashtab
    
    </summary>
    
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="http://yoursite.com/2016/12/24/redis/"/>
    <id>http://yoursite.com/2016/12/24/redis/</id>
    <published>2016-12-24T04:35:12.000Z</published>
    <updated>2016-12-24T05:18:18.984Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.yiibai.com/redis/redis_quick_guide.html" target="_blank" rel="external">http://www.yiibai.com/redis/redis_quick_guide.html</a></p>
<p>Redis是一个速度非常快的非关系数据库，它可以存储键与5种不同类型的值之间的映射，可以将存储在内存的键值对数据持久化到硬盘，可以使用复制特性来扩展读性能，还可以使用客户端分片来扩展写性能。</p>
<p>安装：<br><a href="http://www.cnblogs.com/sandea/p/5782192.html" target="_blank" rel="external">http://www.cnblogs.com/sandea/p/5782192.html</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">wget http://download.redis.io/releases/redis-3.2.3.tar.gz</div><div class="line"></div><div class="line">tar -zxvf redis-3.2.3.tar.gz</div><div class="line"></div><div class="line">mv redis-3.2.3 redis</div><div class="line">cd redis</div><div class="line">make MALLOC=libc</div><div class="line">make install</div></pre></td></tr></table></figure>
<h3 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h3><p><img src="http://i.imgur.com/7VRR2Xz.png" alt=""></p>
<p>Redis 有三个主要使其有别于其它很多竞争对手的特点：</p>
<ul>
<li>Redis是完全在内存中保存数据的数据库，使用磁盘只是为了持久性目的； </li>
<li>Redis相比许多键值数据存储系统有相对丰富的数据类型； </li>
<li>Redis可以将数据复制到任意数量的从服务器中； </li>
</ul>
<p>Redis优点</p>
<ul>
<li>异常快速 : Redis是非常快的，每秒可以执行大约110000设置操作，81000个/每秒的读取操作。</li>
<li>支持丰富的数据类型 : Redis支持最大多数开发人员已经知道如列表，集合，可排序集合，哈希等数据类型。这使得在应用中很容易解决的各种问题，因为我们知道哪些问题处理使用哪种数据类型更好解决。</li>
<li>操作都是原子的 : 所有 Redis 的操作都是原子，从而确保当两个客户同时访问 Redis 服务器得到的是更新后的值（最新值）。</li>
<li>MultiUtility工具：Redis是一个多功能实用工具，可以在很多如：缓存，消息传递队列中使用（Redis原生支持发布/订阅），在应用程序中，如：Web应用程序会话，网站页面点击数等任何短暂的数据；</li>
</ul>
<h3 id="2-redis中数据结构"><a href="#2-redis中数据结构" class="headerlink" title="2.redis中数据结构"></a>2.redis中数据结构</h3><p>5种:string list set hash zset</p>
<h3 id="3-事务"><a href="#3-事务" class="headerlink" title="3.事务"></a>3.事务</h3><p>Redis事务允许一组命令在单一步骤中执行。事务有两个属性，说明如下：</p>
<ul>
<li>在一个事务中的所有命令作为单个独立的操作顺序执行。在Redis事务中的执行过程中而另一客户机发出的请求，这是不可以的；</li>
<li>Redis事务是原子的。原子意味着要么所有的命令都执行，要么都不执行；</li>
</ul>
<p>Redis 事务由指令 MULTI 发起的，之后传递需要在事务中和整个事务中，最后由 EXEC 命令执行所有命令的列表。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">redis 127.0.0.1:6379&gt; MULTI</div><div class="line">OK</div><div class="line">redis 127.0.0.1:6379&gt; SET tutorial redis</div><div class="line">QUEUED</div><div class="line">redis 127.0.0.1:6379&gt; GET tutorial</div><div class="line">QUEUED</div><div class="line">redis 127.0.0.1:6379&gt; INCR visitors</div><div class="line">QUEUED</div><div class="line">redis 127.0.0.1:6379&gt; EXEC</div><div class="line"></div><div class="line">1) OK</div><div class="line">2) &quot;redis&quot;</div><div class="line">3) (integer) 1</div></pre></td></tr></table></figure>
<h3 id="4-持久化"><a href="#4-持久化" class="headerlink" title="4.持久化"></a>4.持久化</h3><p>Redis提供两种不同的持久化方法来将数据存储到硬盘里面。一种方法叫快照，它可以将存在于某一时刻的所有数据都写入硬盘里面。另一种方法叫只追加文件（AOF)，它会在执行写命令时，将被执行的写命令复制到硬盘里面。这两种持久化方法既可以同时使用，又可以单独使用，在某些情况下甚至两种方法都不是用，具体选择哪种持久化方法需要根据用户的数据以及应用来决定。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.yiibai.com/redis/redis_quick_guide.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.yiibai.com/redis/redis_quick_guide
    
    </summary>
    
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper</title>
    <link href="http://yoursite.com/2016/12/24/zookeeper/"/>
    <id>http://yoursite.com/2016/12/24/zookeeper/</id>
    <published>2016-12-24T02:37:01.000Z</published>
    <updated>2016-12-24T04:35:29.629Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://cailin.iteye.com/blog/2014486/" target="_blank" rel="external">http://cailin.iteye.com/blog/2014486/</a></p>
<p>ps：未完待续</p>
<p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，它包含一个简单的原语集，分布式应用程序可以基于它<strong>实现同步服务，配置维护和命名服务</strong>等。Zookeeper是hadoop的一个子项目，其发展历程无需赘述。在分布式应用中，由于工程师不能很好地使用锁机制，以及基于消息的协调机制不适合在某些应用中使用，因此需要有一种可靠的、可扩展的、分布式的、可配置的协调机制来统一系统的状态。Zookeeper的目的就在于此。本文简单分析zookeeper的工作原理，对于如何使用zookeeper不是本文讨论的重点。</p>
<p>Zookeeper 从设计模式角度来看，是一个基于观察者模式设计的分布式服务管理框。</p>
<p>功能：</p>
<ul>
<li>统一命名服务（Name Service）：<br>分布式应用中，通常需要有一套完整的命名规则，既能够产生唯一的名称又便于人识别和记住。<br>Name Service 已经是 Zookeeper 内置的功能，你只要调用 Zookeeper 的 API 就能实现。如调用 create 接口就可以很容易创建一个目录节点。</li>
<li>配置管理</li>
<li>集群管理</li>
</ul>
<h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h4><p>Zookeeper中的角色主要有以下三类，如下表所示：<br><img src="http://i.imgur.com/NxWbDV8.jpg" alt=""></p>
<h4 id="设计目的"><a href="#设计目的" class="headerlink" title="设计目的"></a>设计目的</h4><p>1.最终一致性：client不论连接到哪个Server，展示给它都是同一个视图，这是zookeeper最重要的性能。</p>
<p>2 .可靠性：具有简单、健壮、良好的性能，如果消息m被到一台服务器接受，那么它将被所有的服务器接受。</p>
<p>3 .实时性：Zookeeper保证客户端将在一个时间间隔范围内获得服务器的更新信息，或者服务器失效的信息。但由于网络延时等原因，Zookeeper不能保证两个客户端能同时得到刚更新的数据，如果需要最新数据，应该在读数据之前调用sync()接口。</p>
<p>4 .等待无关（wait-free）：慢的或者失效的client不得干预快速的client的请求，使得每个client都能有效的等待。</p>
<p>5.原子性：更新只能成功或者失败，没有中间状态。</p>
<p>6 .顺序性：包括全局有序和偏序两种：全局有序是指如果在一台服务器上消息a在消息b前发布，则在所有Server上消息a都将在消息b前被发布；偏序是指如果一个消息b在消息a后被同一个发送者发布，a必将排在b前面。</p>
<h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>Zookeeper的核心是原子广播，这个机制保证了各个Server之间的同步。实现这个机制的协议叫做Zab协议。Zab协议有两种模式，它们分别是恢复模式（选主）和广播模式（同步）。当服务启动或者在领导者崩溃后，Zab就进入了恢复模式，当领导者被选举出来，且大多数Server完成了和leader的状态同步以后，恢复模式就结束了。状态同步保证了leader和Server具有相同的系统状态。</p>
<p>为了保证事务的顺序一致性，zookeeper采用了递增的事务id号（zxid）来标识事务。所有的提议（proposal）都在被提出的时候加上了zxid。实现中zxid是一个64位的数字，它高32位是epoch用来标识leader关系是否改变，每次一个leader被选出来，它都会有一个新的epoch，标识当前属于那个leader的统治时期。低32位用于递增计数。</p>
<p>每个Server在工作过程中有三种状态：</p>
<ul>
<li>LOOKING：当前Server不知道leader是谁，正在搜寻</li>
<li>LEADING：当前Server即为选举出来的leader</li>
<li>FOLLOWING：leader已经选举出来，当前Server与之同步</li>
</ul>
<h4 id="选主流程"><a href="#选主流程" class="headerlink" title="选主流程"></a>选主流程</h4><p>当leader崩溃或者leader失去大多数的follower，这时候zk进入恢复模式，恢复模式需要重新选举出一个新的leader，让所有的Server都恢复到一个正确的状态。Zk的选举算法有两种：一种是基于basic paxos实现的，另外一种是基于fast paxos算法实现的。系统默认的选举算法为fast paxos。先介绍basic paxos流程：</p>
<ol>
<li><p>选举线程由当前Server发起选举的线程担任，其主要功能是对投票结果进行统计，并选出推荐的Server；</p>
</li>
<li><p>选举线程首先向所有Server发起一次询问(包括自己)；</p>
</li>
<li><p>选举线程收到回复后，验证是否是自己发起的询问(验证zxid是否一致)，然后获取对方的id(myid)，并存储到当前询问对象列表中，最后获取对方提议的leader相关信息(id,zxid)，并将这些信息存储到当次选举的投票记录表中；</p>
</li>
<li><p>收到所有Server回复以后，就计算出zxid最大的那个Server，并将这个Server相关信息设置成下一次要投票的Server；</p>
</li>
<li><p>线程将当前zxid最大的Server设置为当前Server要推荐的Leader，如果此时获胜的Server获得n/2 + 1的Server票数， 设置当前推荐的leader为获胜的Server，将根据获胜的Server相关信息设置自己的状态，否则，继续这个过程，直到leader被选举出来。</p>
</li>
</ol>
<p>通过流程分析我们可以得出：要使Leader获得多数Server的支持，则Server总数必须是奇数2n+1，且<strong>存活的Server的数目不得少于n+1</strong>.</p>
<p>每个Server启动后都会重复以上流程。在恢复模式下，如果是刚从崩溃状态恢复的或者刚启动的server还会从磁盘快照中恢复数据和会话信息，zk会记录事务日志并定期进行快照，方便在恢复时进行状态恢复。选主的具体流程图如下所示：<br><img src="http://i.imgur.com/Vbcg5ge.jpg" alt=""></p>
<p>fast paxos流程是在选举过程中，某Server首先向所有Server提议自己要成为leader，当其它Server收到提议以后，解决epoch和zxid的冲突，并接受对方的提议，然后向对方发送接受提议完成的消息，重复这个流程，最后一定能选举出Leader。其流程图如下所示：</p>
<p><img src="http://i.imgur.com/6faX072.jpg" alt=""></p>
<h4 id="同步过程"><a href="#同步过程" class="headerlink" title="同步过程"></a>同步过程</h4><p>选完leader以后，zk就进入状态同步过程。</p>
<ol>
<li><p>leader等待server连接；</p>
</li>
<li><p>Follower连接leader，将最大的zxid发送给leader；</p>
</li>
<li><p>Leader根据follower的zxid确定同步点；</p>
</li>
<li><p>完成同步后通知follower 已经成为uptodate状态；</p>
</li>
<li><p>Follower收到uptodate消息后，又可以重新接受client的请求进行服务了</p>
</li>
</ol>
<p><img src="http://i.imgur.com/uOAy55a.jpg" alt=""></p>
<h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><p>leader工作流程：</p>
<p>Leader主要有三个功能：</p>
<ol>
<li>恢复数据；</li>
<li>维持与Learner的心跳，接收Learner请求并判断Learner的请求消息类型；</li>
<li>Learner的消息类型主要有PING消息、REQUEST消息、ACK消息、REVALIDATE消息，根据不同的消息类型，进行不同的处理。</li>
</ol>
<p>PING消息是指Learner的心跳信息；REQUEST消息是Follower发送的提议信息，包括写请求及同步请求；ACK消息是Follower的对提议的回复，超过半数的Follower通过，则commit该提议；REVALIDATE消息是用来延长SESSION有效时间。</p>
<p>follower工作流程<br>Follower主要有四个功能：</p>
<ol>
<li>向Leader发送请求（PING消息、REQUEST消息、ACK消息、REVALIDATE消息）；</li>
<li>接收Leader消息并进行处理；</li>
<li>接收Client的请求，如果为写请求，发送给Leader进行投票；</li>
<li>返回Client结果。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://cailin.iteye.com/blog/2014486/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cailin.iteye.com/blog/2014486/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ps：未完待续&lt;/
    
    </summary>
    
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>pat1009</title>
    <link href="http://yoursite.com/2016/12/23/pat1009/"/>
    <id>http://yoursite.com/2016/12/23/pat1009/</id>
    <published>2016-12-23T04:06:37.000Z</published>
    <updated>2016-12-23T04:11:46.149Z</updated>
    
    <content type="html"><![CDATA[<p>1009.Product of Polynomials (25)</p>
<p>This time, you are supposed to find A*B where A and B are two polynomials.</p>
<p>Input Specification:</p>
<p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial: K N1 aN1 N2 aN2 … NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, …, K) are the exponents and coefficients, respectively. It is given that 1 &lt;= K &lt;= 10, 0 &lt;= NK &lt; … &lt; N2 &lt; N1 &lt;=1000.</p>
<p>Output Specification:</p>
<p>For each test case you should output the product of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate up to 1 decimal place.</p>
<p>Sample Input</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2 1 2.4 0 3.2</div><div class="line">2 2 1.5 1 0.5</div></pre></td></tr></table></figure>
<p>Sample Output</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">3 3 3.6 2 6.0 1 1.6</div></pre></td></tr></table></figure>
<p>思路：正常按照多项式乘法计算就行，注意如果系数是0，那么这一项就是0.运算的时候要过滤到该项。</p>
<p>解答：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pat;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t9_2</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">double</span>[] a= <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">1004</span>];</div><div class="line">	<span class="keyword">static</span> <span class="keyword">double</span>[] b= <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">1004</span>];</div><div class="line">	<span class="keyword">static</span> <span class="keyword">double</span>[] c= <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">1004</span>*<span class="number">1004</span>];</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> n1,n2;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Scanner sc= <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		n1=sc.nextInt();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n1;i++)&#123;</div><div class="line">			<span class="keyword">int</span> e=sc.nextInt();</div><div class="line">			<span class="keyword">double</span> c=sc.nextDouble();</div><div class="line">			a[e]=c;</div><div class="line">		</div><div class="line">		&#125;</div><div class="line">		n2=sc.nextInt();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n2;i++)&#123;</div><div class="line">			<span class="keyword">int</span> e=sc.nextInt();</div><div class="line">			<span class="keyword">double</span> c=sc.nextDouble();</div><div class="line">			b[e]=c;</div><div class="line">		&#125;</div><div class="line">		sc.close();</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</div><div class="line">			<span class="keyword">if</span>(a[i]!=<span class="number">0</span>)&#123;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;b.length;j++)&#123;</div><div class="line">					<span class="keyword">if</span>(b[j]!=<span class="number">0</span>)&#123;</div><div class="line">						c[i+j]+=a[i]*b[j];</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;			</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c.length;i++) <span class="keyword">if</span>(c[i]!=<span class="number">0</span>) count++;</div><div class="line">		System.out.print(count);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=c.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--) </div><div class="line">			<span class="keyword">if</span>(c[i]!=<span class="number">0</span>) &#123;</div><div class="line">				System.out.print(<span class="string">" "</span>+i+<span class="string">" "</span>);</div><div class="line">				System.out.printf(<span class="string">"%.1f"</span>,c[i]);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1009.Product of Polynomials (25)&lt;/p&gt;
&lt;p&gt;This time, you are supposed to find A*B where A and B are two polynomials.&lt;/p&gt;
&lt;p&gt;Input Specifica
    
    </summary>
    
    
      <category term="pat" scheme="http://yoursite.com/tags/pat/"/>
    
  </entry>
  
  <entry>
    <title>pat1008</title>
    <link href="http://yoursite.com/2016/12/22/pat1008/"/>
    <id>http://yoursite.com/2016/12/22/pat1008/</id>
    <published>2016-12-22T05:17:29.000Z</published>
    <updated>2016-12-22T05:21:56.569Z</updated>
    
    <content type="html"><![CDATA[<p>1008.Elevator (20)</p>
<p>The highest building in our city has only one elevator. A request list is made up with N positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop.</p>
<p>For a given request list, you are to compute the total time spent to fulfill the requests on the list. The elevator is on the 0th floor at the beginning and does not have to return to the ground floor when the requests are fulfilled.</p>
<p>Input Specification:</p>
<p>Each input file contains one test case. Each case contains a positive integer N, followed by N positive numbers. All the numbers in the input are less than 100.</p>
<p>Output Specification:</p>
<p>For each test case, print the total time on a single line.</p>
<p>Sample Input:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">3 2 3 1</div></pre></td></tr></table></figure></p>
<p>Sample Output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">41</div></pre></td></tr></table></figure></p>
<p>解答：直接计算就可以。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pat;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t8</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> n=<span class="number">0</span>,sum=<span class="number">0</span>;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span>[] a;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Scanner sc= <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		n=sc.nextInt();</div><div class="line">		a=<span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">			a[i]=sc.nextInt();</div><div class="line">			<span class="keyword">if</span>(i==<span class="number">0</span>)</div><div class="line">				sum+=<span class="number">6</span>*a[i];</div><div class="line">			<span class="keyword">else</span></div><div class="line">				sum=a[i]&gt;a[i-<span class="number">1</span>]?sum+(a[i]-a[i-<span class="number">1</span>])*<span class="number">6</span>:sum+(a[i-<span class="number">1</span>]-a[i])*<span class="number">4</span>;			</div><div class="line">		&#125;</div><div class="line">		sc.close();</div><div class="line">		sum+=n*<span class="number">5</span>;</div><div class="line">		System.out.println(sum);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1008.Elevator (20)&lt;/p&gt;
&lt;p&gt;The highest building in our city has only one elevator. A request list is made up with N positive numbers. The 
    
    </summary>
    
    
      <category term="pat" scheme="http://yoursite.com/tags/pat/"/>
    
  </entry>
  
  <entry>
    <title>mapReduce工作原理</title>
    <link href="http://yoursite.com/2016/12/21/mapReduce%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2016/12/21/mapReduce工作原理/</id>
    <published>2016-12-21T13:44:43.000Z</published>
    <updated>2016-12-22T14:00:12.613Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-mapreduce框架结构"><a href="#1-mapreduce框架结构" class="headerlink" title="1.mapreduce框架结构"></a>1.mapreduce框架结构</h3><p>mapreduce是一个用于大规模数据处理的分布式计算模型。</p>
<p>mapper：主要负责对数据进行分析处理，最终转化为key-value的数据结构。<br>reducer：主要是获取mapper出来的结果，对结果进行统计。</p>
<p><img src="http://i.imgur.com/p3Tu8Wr.png" alt=""></p>
<ol>
<li>mapper和reducer</li>
<li>jobtracker：jobtracker是一个master服务，软件启动后，tracker接受job，负责调度job的每一个子任务运行于tasktracker上，并监控。如果发现失败的task，就重启他们。</li>
<li>tasktracker：运行在多个节点的slaver服务，tasktracker主动与jobtracker通信（通过心跳实现）来接收作业。并负责直接执行每个任务。</li>
<li>jobclient</li>
<li>每一个job都会在用户端通过jobclient类将应用程序级configuration打包成jar存储在hdfs上，并把路径提交给jobtracker的master服务，然后由master创建每一个task将他们分给各个tasktracker服务中心去执行。</li>
<li>jobinprogress：jobclient提交job后，jobtracker创建一个jobinprogress来跟踪和调度这个job，并把它添加到job队列中。</li>
<li>jontracker启动任务task对象序列化写入相应的tasktracker中。tasktracker收到创建taskinprogress，用来监控和调度task。</li>
<li>maptask和reducetask，一个完整的job会自动执行mapper combine reducer。</li>
</ol>
<h3 id="2-mapreduce运行原理"><a href="#2-mapreduce运行原理" class="headerlink" title="2.mapreduce运行原理"></a>2.mapreduce运行原理</h3><p><img src="http://i.imgur.com/UllRps9.png" alt=""></p>
<ul>
<li>jobtracker调用getnewjobid（）请求一个新作业id</li>
<li>检查作业输出说明，没有指定或者已经存在，返回到mr程序</li>
<li>计算作业的输出划分，失败返回mr程序</li>
<li>将运行资源（jar configuration文件 输入划分）复制到jobtracker文件系统中一个以作业id命名的目录中。</li>
<li>调用jobtracker的submitjob方法</li>
<li>将任务放在调度器中，并初始化任务。</li>
<li>创建运行任务列表，首先根据输入划分来确定map任务个数，再根据jobconf中mapred。reduce.tasks确定reduce个数。</li>
<li>tasktracker执行循环，定期发送心跳告诉jobtracker，是否存活。同时充当消息通道。</li>
</ul>
<ul>
<li>作业的提交 </li>
<li>作业的初始化<img src="http://i.imgur.com/etHGgpb.png" alt=""></li>
<li>任务分配</li>
<li>任务的执行</li>
<li>进度和状态的更新</li>
<li>mapreduce的进度组成</li>
<li>任务完成</li>
</ul>
<h3 id="3-mapreduce容错"><a href="#3-mapreduce容错" class="headerlink" title="3.mapreduce容错"></a>3.mapreduce容错</h3><p>mapreduce容错主要考虑以下几点：</p>
<ul>
<li>任务失败</li>
<li>tasktracker失败</li>
<li>jobtracker失败</li>
<li>子任务失败</li>
<li>任务失败反复次数的处理</li>
</ul>
<p>1.任务失败：</p>
<ul>
<li>mapreduce代码有问题—&gt;子任务jvm在推出前向上一级tasktracker提交错误报告，记录在用户错误日志中，并将本次task attemp 标记failed。释放任务槽slot</li>
<li>jvm错误—&gt;jvm的bug导致，将本次标记为failed。</li>
<li>不设置超时—&gt;不释放slot。降低性能</li>
</ul>
<p>2.tasktracker失败</p>
<p>tasktracker发送心跳包到jobtracker。tasktracker故障，心跳包停止或者很少发送，jobtracker将tasktracker从等待任务调度的tasktracker池中溢出。jobtracker会安排此tasktracker上一个成功运行的map任务返回。</p>
<ul>
<li>没有完成的作业，map任务失败。重新执行</li>
<li>reduce未完成， 执行reduce任务。</li>
</ul>
<p>3.jobtracker失败</p>
<p>jobtracker是存在单点故障的，失败就gg。 可以通过启动多个jobtracker，只运行一个主jobtracker。可以采用zookeeper作为jobtracker的协调机制。</p>
<p>4.子任务失败</p>
<p>一个mapreduce任务包含很多map和reduce任务。</p>
<ul>
<li>map或者reduce子任务代码异常—&gt;jvm进程向tasktracker发送错误报告，标记failed，释放slot，执行另一个。</li>
<li>对于刘任务，流进程以非零退出代码，标记failed</li>
<li>jvm退出，标记failed</li>
</ul>
<p>5.任务失败反复次数的处理方法</p>
<p>当map task执行失败后会重试，超过重试次数，整个job会失败。<br>重试次数可以配置在mapred-site.xml <code>mapred.max.failures.percent</code></p>
<h3 id="4-shuffle阶段-和sort阶段（未看完）"><a href="#4-shuffle阶段-和sort阶段（未看完）" class="headerlink" title="4.shuffle阶段 和sort阶段（未看完）"></a>4.shuffle阶段 和sort阶段（未看完）</h3><p>shuffle:指从map的输出开始，包括系统执行排序以及传送map输出到reduce的过程。</p>
<p>sort阶段：指map端输出的key进行排序。</p>
<h3 id="6-任务的执行"><a href="#6-任务的执行" class="headerlink" title="6.任务的执行"></a>6.任务的执行</h3><p>1.推测执行</p>
<p>问题：hadoop把任务分配给很多歌节点，可能有一些节点会限制程序的执行速度。别的任务都执行完了，却要等待这个节点慢慢的执行。怎么办？</p>
<p>方案：通过强迫任务独立运行于其他的任务，使得单个任务之间不会知道他们的输入数据来自哪里。对于相同的输入数据，我们可以并行多次处理来利用不同机器的负载能力，因为大部分任务都完成了，hadoop平台会在几个空闲的节点上调度执行剩余任务的赋值，这个过程叫做推测执行。任务完成时，向jobtracker报告。第一个完成的是权威赋值，其他没完成的就会被终止并且丢弃他们的输出。</p>
<p>2.任务jvm调用</p>
<p>mapred.job.reuse.jvm.num.tasks默认值为1，即每个task都新启动一个jvm来运行任务，当值是-1的时候，表示jvm可以无限重用。</p>
<p>针对数目巨大的task时，可以用jvm重用。</p>
<p>3.跳过坏的记录</p>
<p>数据的一些记录不符合怪烦，处理时跑出异常。mapreduce可以将这次记录标记为坏记录，重启任务时会跳过该记录。</p>
<p>默认是关闭的，通过<code>mapred.map.max.attemps</code>和<code>mapred.reduce.max.attemps</code>设置</p>
<p>4.任务执行的环境</p>
<p>通过某些环境属性得知作业和任务的信息。<br><img src="http://i.imgur.com/27YtRlh.png" alt=""></p>
<h3 id="7-作业调度器"><a href="#7-作业调度器" class="headerlink" title="7.作业调度器"></a>7.作业调度器</h3><ul>
<li>先进先出调度器</li>
<li>容量调度器</li>
<li>公平调度器</li>
<li>自定义hadoop调度器</li>
</ul>
<p>细节略，参考hadoop应用开发技术详解</p>
<h3 id="8-yarn"><a href="#8-yarn" class="headerlink" title="8.yarn"></a>8.yarn</h3><p>略</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本文主要介绍了mapreduce的工作原理，主要讲解了jobtracker tasktracker 任务调度 任务工作原理 级shuffle和sort机制。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-mapreduce框架结构&quot;&gt;&lt;a href=&quot;#1-mapreduce框架结构&quot; class=&quot;headerlink&quot; title=&quot;1.mapreduce框架结构&quot;&gt;&lt;/a&gt;1.mapreduce框架结构&lt;/h3&gt;&lt;p&gt;mapreduce是一个用于大规模数
    
    </summary>
    
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>pat1007</title>
    <link href="http://yoursite.com/2016/12/21/pat1007/"/>
    <id>http://yoursite.com/2016/12/21/pat1007/</id>
    <published>2016-12-21T11:19:17.000Z</published>
    <updated>2016-12-21T11:23:22.453Z</updated>
    
    <content type="html"><![CDATA[<p>Given a sequence of K integers { N1, N2, …, NK }. A continuous subsequence is defined to be { Ni, Ni+1, …, Nj } where 1 &lt;= i &lt;= j &lt;= K. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20.</p>
<p>Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence.</p>
<p>Input Specification:</p>
<p>Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer K (&lt;= 10000). The second line contains K numbers, separated by a space.</p>
<p>Output Specification:</p>
<p>For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices i and j (as shown by the sample case). If all the K numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.</p>
<p>Sample Input:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">10</div><div class="line">-10 1 2 3 4 -5 -23 3 7 -21</div></pre></td></tr></table></figure>
<p>Sample Output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">10 1 4</div></pre></td></tr></table></figure>
<p>思路：问一段连续子序列的最大和是多少，顺便记录下左端和右端。<br>注意<strong>the first and the last numbers of the maximum subsequence</strong>是值不是下标index！ 最开始看错了。。。</p>
<p>解法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pat;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t7</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> n;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span>[] arr;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Scanner sc= <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		n=sc.nextInt();</div><div class="line">		arr=<span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">		<span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">			arr[i]=sc.nextInt();</div><div class="line">			<span class="keyword">if</span>(arr[i]&gt;=<span class="number">0</span>) flag=<span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">		sc.close();</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> sum=<span class="number">0</span>,max=-<span class="number">1</span>,l=<span class="number">0</span>,maxL=<span class="number">0</span>,maxR=<span class="number">0</span>;</div><div class="line">		<span class="keyword">if</span>(!flag) </div><div class="line">			System.out.println(<span class="string">"0"</span>+<span class="string">" "</span>+arr[<span class="number">0</span>]+<span class="string">" "</span>+arr[n-<span class="number">1</span>]);</div><div class="line">		<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">				<span class="keyword">if</span>(arr[i]&gt;=<span class="number">0</span>) l=arr[i];</div><div class="line">				<span class="keyword">while</span>(i&lt;n&amp;&amp;sum+arr[i]&gt;=<span class="number">0</span>)&#123;</div><div class="line">					sum+=arr[i];</div><div class="line">					<span class="keyword">if</span>(sum&gt;max) &#123;max=sum;maxL=l;maxR=arr[i];&#125;</div><div class="line">					i++;</div><div class="line">				&#125;</div><div class="line">				sum=<span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line">			System.out.print(max+<span class="string">" "</span>+maxL+<span class="string">" "</span>+maxR);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">			</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a sequence of K integers { N1, N2, …, NK }. A continuous subsequence is defined to be { Ni, Ni+1, …, Nj } where 1 &amp;lt;= i &amp;lt;= j &amp;
    
    </summary>
    
    
      <category term="pat" scheme="http://yoursite.com/tags/pat/"/>
    
  </entry>
  
  <entry>
    <title>pat1006</title>
    <link href="http://yoursite.com/2016/12/21/pat1006/"/>
    <id>http://yoursite.com/2016/12/21/pat1006/</id>
    <published>2016-12-21T06:11:10.000Z</published>
    <updated>2016-12-21T06:13:17.811Z</updated>
    
    <content type="html"><![CDATA[<p>1006.Sign In and Sign Out (25)</p>
<p>At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door. Given the records of signing in’s and out’s, you are supposed to find the ones who have unlocked and locked the door on that day.</p>
<p>Input Specification:</p>
<p>Each input file contains one test case. Each case contains the records for one day. The case starts with a positive integer M, which is the total number of records, followed by M lines, each in the format:</p>
<p>ID_number Sign_in_time Sign_out_time<br>where times are given in the format HH:MM:SS, and ID number is a string with no more than 15 characters.</p>
<p>Output Specification:</p>
<p>For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day. The two ID numbers must be separated by one space.</p>
<p>Note: It is guaranteed that the records are consistent. That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.</p>
<p>Sample Input:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">3</div><div class="line">CS301111 15:30:28 17:00:10</div><div class="line">SC3021234 08:00:00 11:25:25</div><div class="line">CS301133 21:45:00 21:58:40</div></pre></td></tr></table></figure>
<p>Sample Output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SC3021234 CS301133</div></pre></td></tr></table></figure>
<p>直接查找最大最小值就行。</p>
<p>解答：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pat;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t6</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">da</span><span class="params">(String x,String y)</span></span>&#123;</div><div class="line">		String[] xx=x.split(<span class="string">":"</span>);</div><div class="line">		String[] yy=y.split(<span class="string">":"</span>);</div><div class="line">		<span class="keyword">return</span> Integer.valueOf(xx[<span class="number">0</span>])&gt;Integer.valueOf(yy[<span class="number">0</span>])? <span class="keyword">true</span>:(Integer.valueOf(xx[<span class="number">1</span>])&gt;Integer.valueOf(yy[<span class="number">1</span>])?<span class="keyword">true</span>:(Integer.valueOf(xx[<span class="number">2</span>])&gt;Integer.valueOf(yy[<span class="number">2</span>])?<span class="keyword">true</span>:<span class="keyword">false</span>));</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">xiao</span><span class="params">(String x,String y)</span></span>&#123;</div><div class="line">		String[] xx=x.split(<span class="string">":"</span>);</div><div class="line">		String[] yy=y.split(<span class="string">":"</span>);</div><div class="line">		<span class="keyword">return</span> Integer.valueOf(xx[<span class="number">0</span>])&lt;Integer.valueOf(yy[<span class="number">0</span>])? <span class="keyword">true</span>:(Integer.valueOf(xx[<span class="number">1</span>])&lt;Integer.valueOf(yy[<span class="number">1</span>])?<span class="keyword">true</span>:(Integer.valueOf(xx[<span class="number">2</span>])&lt;Integer.valueOf(yy[<span class="number">2</span>])?<span class="keyword">true</span>:<span class="keyword">false</span>));</div><div class="line">	&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	</div><div class="line">	Scanner sc= <span class="keyword">new</span> Scanner(System.in);</div><div class="line">	<span class="keyword">int</span> n=sc.nextInt();</div><div class="line">	String[] ids = <span class="keyword">new</span> String[n];</div><div class="line">	String[] ins=<span class="keyword">new</span> String[n];</div><div class="line">	String[] outs=<span class="keyword">new</span> String[n];</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">		ids[i]=sc.next();</div><div class="line">		ins[i]=sc.next();</div><div class="line">		outs[i]=sc.next();</div><div class="line">	&#125;</div><div class="line">	sc.close();</div><div class="line">	<span class="keyword">int</span> t1=<span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> t2=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">		<span class="keyword">if</span>(xiao(ins[i],ins[t1]))&#123;</div><div class="line">			t1=i;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(da(outs[i],outs[t2]))&#123;</div><div class="line">			t2=i;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	System.out.print(ids[t1]+<span class="string">" "</span>+ids[t2]);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1006.Sign In and Sign Out (25)&lt;/p&gt;
&lt;p&gt;At the beginning of every day, the first person who signs in the computer room will unlock the door
    
    </summary>
    
    
      <category term="pat" scheme="http://yoursite.com/tags/pat/"/>
    
  </entry>
  
  <entry>
    <title>pat1005</title>
    <link href="http://yoursite.com/2016/12/21/pat1005/"/>
    <id>http://yoursite.com/2016/12/21/pat1005/</id>
    <published>2016-12-21T06:04:21.000Z</published>
    <updated>2016-12-21T06:10:52.114Z</updated>
    
    <content type="html"><![CDATA[<p>1005.Spell It Right (20)</p>
<p>Given a non-negative integer N, your task is to compute the sum of all the digits of N, and output every digit of the sum in English.</p>
<p>Input Specification:</p>
<p>Each input file contains one test case. Each case occupies one line which contains an N (&lt;= 10100).</p>
<p>Output Specification:</p>
<p>For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.</p>
<p>Sample Input:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">12345</div></pre></td></tr></table></figure>
<p>Sample Output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">one five</div></pre></td></tr></table></figure>
<p>思路：读入一串数字，然后相加打印。注意读入采用string，入股直接读入一个int，会越界，超过int最大值。</p>
<p>编程;</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pat;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t5</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	String[] s=&#123;</div><div class="line">				<span class="string">"zero"</span>,<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>,<span class="string">"four"</span>,<span class="string">"five"</span>,<span class="string">"six"</span>,<span class="string">"seven"</span>,<span class="string">"eight"</span>,<span class="string">"nine"</span></div><div class="line">	&#125;;</div><div class="line">	 Scanner sc= <span class="keyword">new</span> Scanner(System.in);</div><div class="line">	 String a=sc.next();</div><div class="line">	 <span class="keyword">if</span>(a.equals(<span class="string">"0"</span>))&#123;</div><div class="line">		 System.out.println(<span class="string">"zero"</span>);</div><div class="line">		 <span class="keyword">return</span> ;</div><div class="line">	 &#125;</div><div class="line">	 sc.close();</div><div class="line">	 <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">	 <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length();i++)&#123;</div><div class="line">		sum+=a.charAt(i)-<span class="string">'0'</span>;</div><div class="line">	 &#125;</div><div class="line">	 List&lt;String&gt; ss=<span class="keyword">new</span> ArrayList&lt;String&gt;(); </div><div class="line">	 <span class="keyword">while</span>(sum!=<span class="number">0</span>)&#123;</div><div class="line">		 ss.add(s[sum%<span class="number">10</span>]);</div><div class="line">		 sum=sum/<span class="number">10</span>;</div><div class="line">	 &#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=ss.size()-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</div><div class="line">		<span class="keyword">if</span>(j==ss.size()-<span class="number">1</span>) System.out.print(ss.get(j));</div><div class="line">		<span class="keyword">else</span> System.out.print(<span class="string">" "</span>+ss.get(j));</div><div class="line">	&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1005.Spell It Right (20)&lt;/p&gt;
&lt;p&gt;Given a non-negative integer N, your task is to compute the sum of all the digits of N, and output every 
    
    </summary>
    
    
      <category term="pat" scheme="http://yoursite.com/tags/pat/"/>
    
  </entry>
  
  <entry>
    <title>pat1004</title>
    <link href="http://yoursite.com/2016/12/21/pat1004/"/>
    <id>http://yoursite.com/2016/12/21/pat1004/</id>
    <published>2016-12-21T05:53:50.000Z</published>
    <updated>2016-12-21T06:01:13.219Z</updated>
    
    <content type="html"><![CDATA[<p>1004.Counting Leaves (30)</p>
<p>A family hierarchy is usually presented by a pedigree tree. Your job is to count those family members who have no child.<br>Input</p>
<p>Each input file contains one test case. Each case starts with a line containing 0 &lt; N &lt; 100, the number of nodes in a tree, and M (&lt; N), the number of non-leaf nodes. Then M lines follow, each in the format:</p>
<p>ID K ID[1] ID[2] … ID[K]</p>
<p>where ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID’s of its children. For the sake of simplicity, let us fix the root ID to be 01.<br>Output</p>
<p>For each test case, you are supposed to count those family members who have no child for every seniority level starting from the root. The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.</p>
<p>The sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child. Hence on the root 01 level, there is 0 leaf node; and on the next level, there is 1 leaf node. Then we should output “0 1” in a line.</p>
<p>Sample Input</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2 1</div><div class="line">01 1 02</div></pre></td></tr></table></figure>
<p>Sample Output</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 1</div></pre></td></tr></table></figure>
<p>题意解读：求出每一层叶子节点的个数。可以利用广搜（用queue）来遍历，然后每一层高度上统计叶子节点个数。</p>
<p>节点连接关系采用一个邻接矩阵来存储。<br>采用一个数组记录节点列表。<br>visited数组记录该几点是否被访问过（如果图是单向的话，本题中好像不需要其实）<br>heights数组记录每个节点在树的高度。counts记录每一层高度叶子节点的个数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pat;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayDeque;</div><div class="line"><span class="keyword">import</span> java.util.Queue;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t4</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> n,m;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span>[][] mtx=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>][<span class="number">100</span>];</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span>[] vertexs= <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</div><div class="line">	<span class="keyword">static</span> <span class="keyword">boolean</span>[] visited=<span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">100</span>];</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span>[] heights=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span>[] counts=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;		</div><div class="line">		Scanner sc= <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		n=sc.nextInt();</div><div class="line">		m=sc.nextInt();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</div><div class="line">			String id= sc.next();</div><div class="line">			vertexs[Integer.valueOf(id)]=Integer.valueOf(id);</div><div class="line">			<span class="keyword">int</span> k=sc.nextInt();</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</div><div class="line">				String kid=sc.next();</div><div class="line">				vertexs[Integer.valueOf(kid)]=Integer.valueOf(kid);</div><div class="line">				mtx[Integer.valueOf(id)][Integer.valueOf(kid)]=<span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		sc.close();</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vertexs.length;i++)&#123;</div><div class="line">			<span class="keyword">if</span>(vertexs[i]==<span class="number">0</span>)&#123;</div><div class="line">				visited[i]=<span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		visited[<span class="number">1</span>]=<span class="keyword">true</span>;</div><div class="line">		bfs(<span class="number">1</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=height;i++)&#123;</div><div class="line">			<span class="keyword">if</span>(i==height)&#123;</div><div class="line">				System.out.print(counts[i]);</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				System.out.print(counts[i]+<span class="string">" "</span>);	</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> height;</div><div class="line">	<span class="keyword">static</span> Queue&lt;Integer&gt; queue= <span class="keyword">new</span> ArrayDeque&lt;Integer&gt;();</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</div><div class="line">		height=heights[index];</div><div class="line">		<span class="keyword">boolean</span> tmp=<span class="keyword">false</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</div><div class="line">			<span class="keyword">if</span>(!visited[i]&amp;&amp;mtx[index][i]==<span class="number">1</span>)&#123;</div><div class="line">				tmp=<span class="keyword">true</span>;</div><div class="line">				queue.offer(vertexs[i]);</div><div class="line">				heights[i]=heights[index]+<span class="number">1</span>;</div><div class="line">				visited[i]=<span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(!tmp) counts[heights[index]]++;</div><div class="line">		</div><div class="line">		<span class="keyword">while</span>(!queue.isEmpty())&#123;</div><div class="line">			<span class="keyword">int</span> v=queue.remove();</div><div class="line">			bfs(v);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1004.Counting Leaves (30)&lt;/p&gt;
&lt;p&gt;A family hierarchy is usually presented by a pedigree tree. Your job is to count those family members wh
    
    </summary>
    
    
      <category term="pat" scheme="http://yoursite.com/tags/pat/"/>
    
  </entry>
  
  <entry>
    <title>pat1002</title>
    <link href="http://yoursite.com/2016/12/20/pat1002/"/>
    <id>http://yoursite.com/2016/12/20/pat1002/</id>
    <published>2016-12-20T06:04:04.000Z</published>
    <updated>2016-12-20T06:08:28.398Z</updated>
    
    <content type="html"><![CDATA[<p>1002.A+B for Polynomials (25)</p>
<p>This time, you are supposed to find A+B where A and B are two polynomials.</p>
<p>Input</p>
<p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial: K N1 aN1 N2 aN2 … NK aNK, where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1, 2, …, K) are the exponents and coefficients, respectively. It is given that 1 &lt;= K &lt;= 10，0 &lt;= NK &lt; … &lt; N2 &lt; N1 &lt;=1000.</p>
<p>Output</p>
<p>For each test case you should output the sum of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.</p>
<p>Sample Input</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2 1 2.4 0 3.2</div><div class="line">2 2 1.5 1 0.5</div></pre></td></tr></table></figure>
<p>Sample Output</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">3 2 1.5 1 2.9 0 3.2</div></pre></td></tr></table></figure>
<p>解答：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pat;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t2_2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> max=<span class="number">1000</span>+<span class="number">10</span>;</div><div class="line">		<span class="keyword">double</span>[] arr=<span class="keyword">new</span> <span class="keyword">double</span>[max];</div><div class="line">		<span class="keyword">int</span> n;</div><div class="line">		Scanner sc= <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</div><div class="line">			n=sc.nextInt();</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=n-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</div><div class="line">				<span class="keyword">int</span> e=sc.nextInt();</div><div class="line">				<span class="keyword">double</span> c=sc.nextDouble();</div><div class="line">				arr[e]+=c;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		sc.close();</div><div class="line">		<span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;max;i++) <span class="keyword">if</span>(arr[i]!=<span class="number">0</span>) cnt++;</div><div class="line">		System.out.print(cnt);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=max-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">			<span class="keyword">if</span>(arr[i]!=<span class="number">0</span>)&#123;</div><div class="line">				System.out.print(<span class="string">" "</span>+i);</div><div class="line">				System.out.print(<span class="string">" "</span>);</div><div class="line">				System.out.printf(<span class="string">"%.1f"</span>,arr[i]);				</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		System.out.println();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解答二：（估计有点小问题）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pat;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Scanner sc =<span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="keyword">int</span> n1=sc.nextInt();</div><div class="line">		<span class="keyword">int</span>[] e1=<span class="keyword">new</span> <span class="keyword">int</span>[n1];</div><div class="line">		<span class="keyword">double</span>[] c1=<span class="keyword">new</span> <span class="keyword">double</span>[n1];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n1;i++)&#123;</div><div class="line">			e1[i]=sc.nextInt();</div><div class="line">			c1[i]=sc.nextDouble();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> n2=sc.nextInt();</div><div class="line">		<span class="keyword">int</span>[] e2=<span class="keyword">new</span> <span class="keyword">int</span>[n2];</div><div class="line">		<span class="keyword">double</span>[] c2=<span class="keyword">new</span> <span class="keyword">double</span>[n2];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n2;i++)&#123;</div><div class="line">			e2[i]=sc.nextInt();</div><div class="line">			c2[i]=sc.nextDouble();</div><div class="line">		&#125;</div><div class="line">		sc.close();</div><div class="line">		<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</div><div class="line">		List&lt;Integer&gt; e=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">		List&lt;Double&gt; c=<span class="keyword">new</span> ArrayList&lt;Double&gt;();</div><div class="line">		<span class="keyword">while</span>(i&lt;n1||j&lt;n2)&#123;</div><div class="line">			<span class="keyword">if</span>(i&gt;=n1&amp;&amp;j&lt;n2)&#123;</div><div class="line">				e.add(e2[j]);</div><div class="line">				c.add(c2[j]);</div><div class="line">				j++;</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(i&lt;n1&amp;&amp;j&gt;=n2)&#123;</div><div class="line">				e.add(e1[i]);</div><div class="line">				c.add(c1[i]);</div><div class="line">				i++;</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(e1[i]&gt;e2[j])&#123;</div><div class="line">				e.add(e1[i]);</div><div class="line">				c.add(c1[i]);</div><div class="line">				i++;</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(e1[i]==e2[j])&#123;</div><div class="line">				e.add(e1[i]);</div><div class="line">				c.add(c1[i]+c2[j]);</div><div class="line">				i++;</div><div class="line">				j++;</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(e1[i]&lt;e2[j])&#123;</div><div class="line">				e.add(e2[j]);</div><div class="line">				c.add(c2[j]);</div><div class="line">				j++;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		System.out.print(e.size());</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;e.size();k++)&#123;</div><div class="line">			System.out.print(<span class="string">" "</span>+e.get(k));</div><div class="line">			System.out.print(<span class="string">" "</span>+c.get(k));</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1002.A+B for Polynomials (25)&lt;/p&gt;
&lt;p&gt;This time, you are supposed to find A+B where A and B are two polynomials.&lt;/p&gt;
&lt;p&gt;Input&lt;/p&gt;
&lt;p&gt;Each 
    
    </summary>
    
    
      <category term="pat" scheme="http://yoursite.com/tags/pat/"/>
    
  </entry>
  
  <entry>
    <title>pat1001</title>
    <link href="http://yoursite.com/2016/12/20/pat1001/"/>
    <id>http://yoursite.com/2016/12/20/pat1001/</id>
    <published>2016-12-20T06:03:53.000Z</published>
    <updated>2016-12-20T06:05:49.648Z</updated>
    
    <content type="html"><![CDATA[<p>1001.A+B Format (20)</p>
<p>Calculate a + b and output the sum in standard format – that is, the digits must be separated into groups of three by commas (unless there are less than four digits).</p>
<p>Input</p>
<p>Each input file contains one test case. Each case contains a pair of integers a and b where -1000000 &lt;= a, b &lt;= 1000000. The numbers are separated by a space.</p>
<p>Output</p>
<p>For each test case, you should output the sum of a and b in one line. The sum must be written in the standard format.</p>
<p>Sample Input</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-1000000 9</div></pre></td></tr></table></figure>
<p>Sample Output</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-999,991</div></pre></td></tr></table></figure>
<p>解答</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pat;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t1</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Scanner sc=<span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="keyword">int</span> a=sc.nextInt();</div><div class="line">		<span class="keyword">int</span> b=sc.nextInt();</div><div class="line">		sc.close();</div><div class="line">		<span class="keyword">int</span> c=a+b;</div><div class="line">		<span class="keyword">if</span>(c&lt;<span class="number">0</span>)&#123;</div><div class="line">			c=-c;</div><div class="line">			System.out.printf(<span class="string">"-"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(c&gt;=<span class="number">1000000</span>)</div><div class="line">			System.out.printf(<span class="string">"%d,%03d,%03d\n"</span>,c/<span class="number">1000000</span>,(c/<span class="number">1000</span>)%<span class="number">1000</span>,c%<span class="number">1000</span>);</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(c&gt;=<span class="number">1000</span>)</div><div class="line">			System.out.printf(<span class="string">"%d,%03d\n"</span>,c/<span class="number">1000</span>,c%<span class="number">1000</span>);</div><div class="line">		<span class="keyword">else</span></div><div class="line">			System.out.printf(<span class="string">"%d\n"</span>,c);	</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1001.A+B Format (20)&lt;/p&gt;
&lt;p&gt;Calculate a + b and output the sum in standard format – that is, the digits must be separated into groups of 
    
    </summary>
    
    
      <category term="pat" scheme="http://yoursite.com/tags/pat/"/>
    
  </entry>
  
  <entry>
    <title>pat1003</title>
    <link href="http://yoursite.com/2016/12/20/pat1003/"/>
    <id>http://yoursite.com/2016/12/20/pat1003/</id>
    <published>2016-12-20T05:31:09.000Z</published>
    <updated>2016-12-20T05:34:59.030Z</updated>
    
    <content type="html"><![CDATA[<p>As an emergency rescue team leader of a city, you are given a special map of your country. The map shows several scattered cities connected by some roads. Amount of rescue teams in each city and the length of each road between any pair of cities are marked on the map. When there is an emergency call to you from some other city, your job is to lead your men to the place as quickly as possible, and at the mean time, call up as many hands on the way as possible.</p>
<p>Input</p>
<p>Each input file contains one test case. For each test case, the first line contains 4 positive integers: N (&lt;= 500) - the number of cities (and the cities are numbered from 0 to N-1), M - the number of roads, C1 and C2 - the cities that you are currently in and that you must save, respectively. The next line contains N integers, where the i-th integer is the number of rescue teams in the i-th city. Then M lines follow, each describes a road with three integers c1, c2 and L, which are the pair of cities connected by a road and the length of that road, respectively. It is guaranteed that there exists at least one path from C1 to C2.</p>
<p>Output</p>
<p>For each test case, print in one line two numbers: the number of different shortest paths between C1 and C2, and the maximum amount of rescue teams you can possibly gather.<br>All the numbers in a line must be separated by exactly one space, and there is no extra space allowed at the end of a line.</p>
<p>Sample Input<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">5 6 0 2</div><div class="line">1 2 1 5 3</div><div class="line">0 1 1</div><div class="line">0 2 2</div><div class="line">0 3 1</div><div class="line">1 2 1</div><div class="line">2 4 1</div><div class="line">3 4 1</div></pre></td></tr></table></figure></p>
<p>Sample Output</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2 4</div></pre></td></tr></table></figure>
<p>解答：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pat;</div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t3_2</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> n,m,c1,c2;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span>[] teams;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span>[][] mtx;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> inf=Integer.MAX_VALUE;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Scanner sc= <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		n=sc.nextInt();</div><div class="line">		m=sc.nextInt();</div><div class="line">		c1=sc.nextInt();</div><div class="line">		c2=sc.nextInt();</div><div class="line">		teams=<span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">		mtx=<span class="keyword">new</span> <span class="keyword">int</span>[n][n];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">			teams[i]=sc.nextInt();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) Arrays.fill(mtx[i], -<span class="number">1</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</div><div class="line">			<span class="keyword">int</span> c1=sc.nextInt(),c2=sc.nextInt(),l=sc.nextInt();</div><div class="line">			mtx[c1][c2]=mtx[c2][c1]=l;</div><div class="line">		&#125;</div><div class="line">		sc.close();</div><div class="line">		djk(c1,c2);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">djk</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</div><div class="line">		<span class="keyword">boolean</span>[] visted=<span class="keyword">new</span> <span class="keyword">boolean</span>[n]; </div><div class="line">		Arrays.fill(visted, <span class="keyword">false</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">int</span>[] currentDist=<span class="keyword">new</span> <span class="keyword">int</span>[n]; </div><div class="line">		Arrays.fill(currentDist, inf);</div><div class="line">		currentDist[start]=<span class="number">0</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span>[] currentTeam=<span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">		currentTeam=teams.clone();</div><div class="line">		</div><div class="line">		<span class="keyword">int</span>[] path= <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">		Arrays.fill(path, <span class="number">0</span>);</div><div class="line">		path[start]=<span class="number">1</span>;</div><div class="line">		</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> min=<span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(min!=end)&#123;</div><div class="line">			min=-<span class="number">1</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">				<span class="keyword">if</span>(!visted[i])&#123;</div><div class="line">					<span class="keyword">if</span>(min==-<span class="number">1</span>) min=i;</div><div class="line">					<span class="keyword">if</span>(currentDist[i]&lt;currentDist[min]) min=i;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			visted[min]=<span class="keyword">true</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</div><div class="line">				<span class="keyword">if</span>(!visted[j]&amp;&amp; mtx[min][j]!=-<span class="number">1</span>)&#123;</div><div class="line">					<span class="keyword">if</span>(currentDist[min]+mtx[min][j]&lt;currentDist[j])&#123;</div><div class="line">						currentDist[j]=currentDist[min]+mtx[min][j];</div><div class="line">						currentTeam[j]=currentTeam[min]+teams[j];</div><div class="line">						path[j]=path[min];</div><div class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(currentDist[min]+mtx[min][j]==currentDist[j])&#123;</div><div class="line">						path[j]+=path[min];</div><div class="line">						<span class="keyword">if</span>(currentTeam[min]+teams[j]&gt;currentTeam[j])&#123;</div><div class="line">							currentTeam[j]=currentTeam[min]+teams[j];</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;	</div><div class="line">		&#125;</div><div class="line">		System.out.println(path[end]+<span class="string">" "</span>+currentTeam[end]);	</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As an emergency rescue team leader of a city, you are given a special map of your country. The map shows several scattered cities connect
    
    </summary>
    
    
      <category term="pat" scheme="http://yoursite.com/tags/pat/"/>
    
  </entry>
  
  <entry>
    <title>hadoop笔记-备考</title>
    <link href="http://yoursite.com/2016/12/18/hadoop%E7%AC%94%E8%AE%B0-%E5%A4%87%E8%80%83/"/>
    <id>http://yoursite.com/2016/12/18/hadoop笔记-备考/</id>
    <published>2016-12-18T13:10:31.000Z</published>
    <updated>2016-12-20T07:41:20.088Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h3><p>hadoop安装模式:</p>
<ul>
<li>单机模式</li>
<li>伪分布式</li>
<li>完全分布式</li>
</ul>
<p>namenode datanode jobtracker tasktracker secondaryNamenode</p>
<h3 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h3><p>1.命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hadoop namenode -format</div><div class="line">sbin/start-all.sh</div><div class="line">sbin/stop-all.sh</div></pre></td></tr></table></figure></p>
<p>2.配置文件（考点）</p>
<p><img src="http://i.imgur.com/xm8ivA9.png" alt=""></p>
<h3 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h3><p>编写mapreduce函数：</p>
<ul>
<li>mapper类 </li>
<li>reducer类</li>
<li>main类</li>
</ul>
<p>详情见wordcount例子</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> wordcount;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.StringTokenizer;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.TextInputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountMap</span> <span class="keyword">extends</span></span></div><div class="line">			<span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; &#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> IntWritable one = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</div><div class="line">		<span class="keyword">private</span> Text word = <span class="keyword">new</span> Text();</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span></span></div><div class="line">				<span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">			String line = value.toString();</div><div class="line">			StringTokenizer token = <span class="keyword">new</span> StringTokenizer(line);</div><div class="line">			<span class="keyword">while</span> (token.hasMoreTokens()) &#123;</div><div class="line">				word.set(token.nextToken());</div><div class="line">				context.write(word, one);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountReduce</span> <span class="keyword">extends</span></span></div><div class="line">			<span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; &#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values,</span></span></div><div class="line">				Context context) <span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">			<span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span> (IntWritable val : values) &#123;</div><div class="line">				sum += val.get();</div><div class="line">			&#125;</div><div class="line">			context.write(key, <span class="keyword">new</span> IntWritable(sum));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">		Job job = <span class="keyword">new</span> Job(conf);</div><div class="line">		job.setJarByClass(WordCount.class);</div><div class="line">		job.setJobName(<span class="string">"wordcount"</span>);</div><div class="line">		job.setOutputKeyClass(Text.class);</div><div class="line">		job.setOutputValueClass(IntWritable.class);</div><div class="line">		job.setMapperClass(WordCountMap.class);</div><div class="line">		job.setReducerClass(WordCountReduce.class);</div><div class="line">		job.setInputFormatClass(TextInputFormat.class);</div><div class="line">		job.setOutputFormatClass(TextOutputFormat.class);</div><div class="line">		FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</div><div class="line">		FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</div><div class="line">		job.waitForCompletion(<span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>configuration类：怼佢hadoop的配置文件</li>
<li>job类： 表示一个mapreduce任务</li>
</ul>
<h3 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h3><ul>
<li>打包：<code>wordcount -&gt;export-&gt;jar file</code> 把jar放在$hadoop_home 下</li>
<li>部署和运行： <code>hadoop fs -put /file1 /input/</code></li>
<li>运行： <code>hadoop jar wordcount.jar wordcount.WordMain /file1 /output</code></li>
<li>测试结果：_success _logs part-r-00000</li>
</ul>
<h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>hdfs的特点？</p>
<p>hdfs架构？（主从结构，一个namenode节点，多个datanode节点）</p>
<p>hadoop的rpc机制？</p>
<p>hadoop文件系统的访问/</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">hadoop fs -ls /</div><div class="line">hadoop fs -mkdir /input</div><div class="line">hadoop fs -put file1 /input</div><div class="line">hadoop fs -text /input/file1</div><div class="line">hadoop fs -get /input/file1 //复制到本地</div><div class="line">hadoop fs -rm /input/file1</div><div class="line">hadoop namenode -format</div><div class="line">hadoop secondarynamenode</div><div class="line">hadoop dfsadmin</div><div class="line">hadoop job</div><div class="line">hadoop version</div></pre></td></tr></table></figure>
<h3 id="5-1"><a href="#5-1" class="headerlink" title="5.1"></a>5.1</h3><p>hadoop文件的数据结构</p>
<p>hdfs提供两种类型的容器：</p>
<ul>
<li>sequencefile:记录可序列化的数组</li>
</ul>
<p>sequencefile主要由一个header和多个record组成。<br>header:记录key calssname, value classname，存储压缩算法，用户自定义信息等。<br>record：以键值对的方式进行存储。用来表示他的字符数组可以一次解析为：记录的长度，key的长度，key的值，value值。</p>
<ul>
<li>mapfile</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2-2&quot;&gt;&lt;a href=&quot;#2-2&quot; class=&quot;headerlink&quot; title=&quot;2.2&quot;&gt;&lt;/a&gt;2.2&lt;/h3&gt;&lt;p&gt;hadoop安装模式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单机模式&lt;/li&gt;
&lt;li&gt;伪分布式&lt;/li&gt;
&lt;li&gt;完全分布式&lt;/li&gt;
&lt;/
    
    </summary>
    
      <category term="hadoop" scheme="http://yoursite.com/categories/hadoop/"/>
    
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
  </entry>
  
</feed>
