<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lyp&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-09-22T16:04:02.358Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java杂记</title>
    <link href="http://yoursite.com/2016/09/23/java%E6%9D%82%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/09/23/java杂记/</id>
    <published>2016-09-23T12:52:12.000Z</published>
    <updated>2016-09-22T16:04:02.358Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>1.ArrayList和LinkedList有什么区别？<br>ArrayList是基于索引的数据接口，它的底层是数组。它可以以O(1)时间复杂度对元素进行随机访问。与此对应，LinkedList是以元素列表的形式存储它的数据，每一个元素都和它的前一个和后一个元素链接在一起，在这种情况下，查找某个元素的时间复杂度是O(n)。</p>
<p>相对于ArrayList，LinkedList的插入，添加，删除操作速度更快，因为当元素被添加到集合任意位置的时候，不需要像数组那样重新计算大小或者是更新索引。</p>
<p>LinkedList比ArrayList更占内存，因为LinkedList为每一个节点存储了两个引用，一个指向前一个元素，一个指向下一个元素。</p>
<p>2.Comparable和Comparator接口是干什么的？列出它们的区别。</p>
<p>Java提供了只包含一个compareTo()方法的Comparable接口。这个方法可以个给两个对象排序。具体来说，它返回负数，0，正数来表明输入对象小于，等于，大于已经存在的对象。</p>
<p>Java提供了包含compare()和equals()两个方法的Comparator接口。compare()方法用来给两个输入参数排序，返回负数，0，正数表明第一个参数是小于，等于，大于第二个参数。equals()方法需要一个对象作为参数，它用来决定输入参数是否和comparator相等。只有当输入参数也是一个comparator并且输入参数和当前comparator的排序结果是相同的时候，这个方法才返回true。</p>
<p>3.Enumeration接口和Iterator接口的区别有哪些？</p>
<p>Enumeration速度是Iterator的2倍，同时占用更少的内存。但是，Iterator远远比Enumeration安全，因为其他线程不能够修改正在被iterator遍历的集合里面的对象。同时，Iterator允许调用者删除底层集合里面的元素，这对Enumeration来说是不可能的。</p>
<p>4.HashSet和TreeSet有什么区别？</p>
<p>HashSet是由一个hash表来实现的，因此，它的元素是无序的。add()，remove()，contains()方法的时间复杂度是O(1)。</p>
<p>另一方面，TreeSet是由一个树形的结构来实现的，它里面的元素是有序的。因此，add()，remove()，contains()方法的时间复杂度是O(logn)</p>
<p>###JDBC</p>
<p>8.什么是JDBC？</p>
<p>JDBC是允许用户在不同数据库之间做选择的一个抽象层。JDBC允许开发者用JAVA写数据库应用程序，而不需要关心底层特定数据库的细节。</p>
<p>9.PreparedStatement比Statement有什么优势？</p>
<p>PreparedStatements是预编译的，因此，性能会更好。同时，不同的查询参数值，PreparedStatement可以重用。</p>
<p>10.什么时候使用CallableStatement？用来准备CallableStatement的方法是什么？</p>
<p>CallableStatement用来执行存储过程。存储过程是由数据库存储和提供的。存储过程可以接受输入参数，也可以有返回结果。非常鼓励使用存储过程，因为它提供了安全性和模块化。准备一个CallableStatement的方法是：</p>
<pre><code>CallableStament.prepareCall();
</code></pre><hr>
<p>##一.GC<br>Java中的垃圾回收机制</p>
<p>####GC针对什么对象？<br>了解GC机制的第一步就是理解什么样的对象会被回收。当一个对象通过一系列根对象(比如：静态属性引用的常量)都不可达时就会被回收。简而言之，当一个对象的所有引用都为null。循环依赖不算做引用，如果对象A有一个指向对象B的引用，对象B也有一个指向对象A的引用，除此之外，它们没有其他引用，那么对象A和对象B都、需要被回收(如下图,ObjA和ObjB需要被回收)。</p>
<p>####堆内存是如何划分的？</p>
<p>Java中对象都在堆上创建。为了GC，堆内存分为三个部分，也可以说三代，分别称为新生代，老年代和永久代。其中新生代又进一步分为Eden区，Survivor 1区和Survivor 2区(如下图)。新创建的对象会分配在Eden区,在经历一次Minor GC后会被移到Survivor 1区，再经历一次Minor GC后会被移到Survivor 2区，直到升至老年代,需要注意的是，一些大对象(长字符串或数组)可能会直接存放到老年代。</p>
<p><img src="http://i.imgur.com/KU1IyMG.png" alt=""></p>
<p>####GC算法<br>1.标记清除算法</p>
<p>分为标记和清除两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。该算法的缺点是效率不高并且会产生不连续的内存碎片。<br><img src="http://i.imgur.com/PTYTd1h.jpg" alt=""></p>
<p>2.复制算法</p>
<p>把内存空间划为两个区域，每次只使用其中一个区域。垃圾回收时，遍历当前使用区域，把正在使用中的对象复制到另外一个区域中。次算法每次只处理正在使用中的对象，因此复制成本比较小，同时复制过去以后还能进行相应的内存整理，不会出现“碎片”问题。优点：实现简单，运行高效。缺点：会浪费一定的内存。一般新生代采用这种算法<br><img src="http://i.imgur.com/wXBBEyQ.jpg" alt=""></p>
<p>3.标记整理算法</p>
<p>标记阶段与标记清除算法一样。但后续并不是直接对可回收的对象进行清理，而是让所有存活对象都想一端移动，然后清理。优点是不会造成内存碎片<br><img src="http://i.imgur.com/1H8E9sw.jpg" alt=""></p>
<p>####Java中垃圾回收器的类型<br>Java提供多种类型的垃圾回收器。JVM中的垃圾收集一般都采用“分代收集”，不同的堆内存区域采用不同的收集算法，主要目的就是为了增加吞吐量或降低停顿时间。</p>
<ul>
<li>Serial收集器：新生代收集器，使用复制算法，使用一个线程进行GC，串行，其它工作线程暂停。</li>
<li>ParNew收集器：新生代收集器，使用复制算法，Serial收集器的多线程版，用多个线程进行GC，并行，其它工作线程暂停。使用-XX:+UseParNewGC开关来控制使用ParNew+Serial Old收集器组合收集内存；使用-XX:ParallelGCThreads来设置执行内存回收的线程数。</li>
<li>Parallel Scavenge 收集器：吞吐量优先的垃圾回收器，作用在新生代，使用复制算法，关注CPU吞吐量，即运行用户代码的时间/总时间。使用-XX:+UseParallelGC开关控制使用Parallel Scavenge+Serial Old收集器组合回收垃圾。</li>
<li>Serial Old收集器：老年代收集器，单线程收集器，串行，使用标记整理算法，使用单线程进行GC，其它工作线程暂停。</li>
<li>Parallel Old收集器：吞吐量优先的垃圾回收器，作用在老年代，多线程，并行，多线程机制与Parallel Scavenge差不错，使用标记整理算法，在Parallel Old执行时，仍然需要暂停其它线程。</li>
<li>CMS（Concurrent Mark Sweep）收集器：老年代收集器，致力于获取最短回收停顿时间（即缩短垃圾回收的时间），使用标记清除算法，多线程，优点是并发收集（用户线程可以和GC线程同时工作），停顿小。使用-XX:+UseConcMarkSweepGC进行ParNew+CMS+Serial Old进行内存回收，优先使用ParNew+CMS（原因见Full GC和并发垃圾回收一节），当用户线程内存不足时，采用备用方案Serial Old收集。</li>
</ul>
<p>####与GC有关的JVM参数<br>做GC调优需要大量的实践，耐心和对项目的分析。我曾经参与过高容量，低延迟的电商系统，在开发中我们需要通过分析造成Full GC的原因来提高系统性能，在这个过程中我发现做GC的调优很大程度上依赖于对系统的分析，系统拥有怎样的对象以及他们的平均生命周期。</p>
<p>举个例子，如果一个应用大多是短生命周期的对象，那么应该确保Eden区足够大，这样可以减少Minor GC的次数。可以通过-XX:NewRatio来控制新生代和老年代的比例，比如-XX:NewRatio=3代表新生代和老年代的比例为1：3。需要注意的是，扩大新生代的大小会减少老年代的大小，这会导致Major GC执行的更频繁，而Major GC可能会造成用户线程的停顿从而降低系统吞吐量。JVM中可以用NewSize和MaxNewSize参数来指定新生代内存最小和最大值，如果两个参数值一样，那么就相当于固定了新生代的大小。<br>个人建议，在做GC调优之前最好深入理解Java中GC机制，推荐阅读Sun Microsystems提供的有关GC的文档。这个链接可能会对理解GC机制提供一些帮助。下面的图列出了各个区可用的一些JVM参数。<br><img src="http://i.imgur.com/bwvkDEn.png" alt=""></p>
<p>####总结</p>
<ul>
<li>为了分代垃圾回收，Java堆内存分为3代：新生代，老年代和永久代。</li>
<li>新的对象实例会优先分配在新生代，在经历几次Minor GC后(默认15次)，还存活的会被移至老年代(某些大对象会直接在老年代分配)。</li>
<li>永久代是否执行GC，取决于采用的JVM。</li>
<li>Minor GC发生在新生代，当Eden区没有足够空间时，会发起一次Minor GC，将Eden区中的存活对象移至Survivor区。Major GC发生在老年代，当升到老年代的对象大于老年代剩余空间时会发生Major GC。</li>
<li>发生Major GC时用户线程会暂停，会降低系统性能和吞吐量。</li>
<li>JVM的参数-Xmx和-Xms用来设置Java堆内存的初始大小和最大值。依据个人经验这个值的比例最好是1:1或者1:1.5。比如，你可以将-Xmx和-Xms都设为1GB，或者-Xmx和-Xms设为1.2GB和1.8GB。</li>
<li>Java中不能手动触发GC，但可以用不同的引用类来辅助垃圾回收器工作(比如：弱引用或软引用)。</li>
</ul>
<hr>
<p>##二.hashmap</p>
<p>原文链接：<a href="http://yemengying.com/2016/05/07/threadsafe-hashmap/" target="_blank" rel="external">http://yemengying.com/2016/05/07/threadsafe-hashmap/</a></p>
<p>####hashmap的自动扩容机制<br>HashMap 内部的 Node 数组默认的大小是16，假设有100万个元素，那么最好的情况下每个 hash 桶里都有62500个元素😱，这时get(),put(),remove()等方法效率都会降低。为了解决这个问题，HashMap 提供了自动扩容机制，当元素个数达到数组大小 loadFactor 后会扩大数组的大小，在默认情况下，数组大小为16，loadFactor 为0.75，也就是说当 HashMap 中的元素超过16\0.75=12时，会把数组大小扩展为2*16=32，并且重新计算每个元素在新数组中的位置。</p>
<p>####为什么线程不安全<br>个人觉得 HashMap 在并发时可能出现的问题主要是两方面,首先如果多个线程同时使用put方法添加元素，而且假设正好存在两个 put 的 key 发生了碰撞(根据 hash 值计算的 bucket 一样)，那么根据 HashMap 的实现，这两个 key 会添加到数组的同一个位置，这样最终就会发生其中一个线程的 put 的数据被覆盖。第二就是如果多个线程同时检测到元素个数超过数组大小* loadFactor ，这样就会发生多个线程同时对 Node 数组进行扩容，都在重新计算元素位置以及复制数据，但是最终只有一个线程扩容后的数组会赋给 table，也就是说其他线程的都会丢失，并且各自线程 put 的数据也丢失。</p>
<p>关于 HashMap 线程不安全这一点，《Java并发编程的艺术》一书中是这样说的：</p>
<blockquote>
<p>HashMap 在并发执行 put 操作时会引起死循环，导致 CPU 利用率接近100%。因为多线程会导致 HashMap 的 Node 链表形成环形数据结构，一旦形成环形数据结构，Node 的 next 节点永远不为空，就会在获取 Node 时产生死循环。死循环并不是发生在 put 操作时，而是发生在扩容时。</p>
</blockquote>
<p>####如何安全的使用hashmap</p>
<ul>
<li>Hashtable</li>
<li>ConcurrentHashMap</li>
<li>Synchronized Map</li>
</ul>
<pre><code>//Hashtable
Map&lt;String, String&gt; hashtable = new Hashtable&lt;&gt;();

//synchronizedMap
Map&lt;String, String&gt; synchronizedHashMap = Collections.synchronizedMap(new HashMap&lt;String, String&gt;());

//ConcurrentHashMap
Map&lt;String, String&gt; concurrentHashMap = new ConcurrentHashMap&lt;&gt;();
</code></pre><p>hashtable通过使用 <em>synchronized</em>来保证线程安全。</p>
<p>concurrenthashmap：</p>
<ul>
<li>CHM允许并发的读和线程安全的更新操作</li>
<li>在执行写操作时，CHM只锁住部分的Map</li>
<li>并发的更新是通过内部根据并发级别将Map分割成小部分实现的</li>
<li>高的并发级别会造成时间和空间的浪费，低的并发级别在写线程多时会引起线程间的竞争</li>
<li>CHM的所有操作都是线程安全</li>
<li>CHM返回的迭代器是弱一致性，fail-safe并且不会抛出ConcurrentModificationException异常</li>
<li>CHM不允许null的键值</li>
<li>可以使用CHM代替HashTable，但要记住CHM不会锁住整个Map</li>
</ul>
<p>Synchronized Map：<br>从源码中可以看出调用 synchronizedMap() 方法后会返回一个 SynchronizedMap 类的对象，而在 SynchronizedMap 类中使用了 synchronized 同步关键字来保证对 Map 的操作是线程安全的。</p>
<p>####hashmap如何解决冲突<br>其实就是链接法，将索引值相同的元素存放到一个单链表里。但为了解决在频繁冲突时HashMap性能降低的问题，Java 8中做了一个小优化，在冲突的元素个数超过设定的值(默认为8)时，会使用平衡树来替代链表存储冲突的元素。</p>
<hr>
<p>##三.java创建对象有哪几种</p>
<ul>
<li>new</li>
<li>工厂模式</li>
<li>反射</li>
<li>克隆</li>
</ul>
<p>#四.java反射详解<br>原文链接：<a href="http://www.jianshu.com/p/53eb4e16d00e" target="_blank" rel="external">http://www.jianshu.com/p/53eb4e16d00e</a></p>
<p>####什么是反射</p>
<p> 主要是指程序可以访问，检测和修改它本身状态或行为的一种能力，并能根据自身行为的状态和结果，调整或修改应用所描述行为的状态和相关的语义。<br> 反射是java中一种强大的工具，能够使我们很方便的创建灵活的代码，这些代码可以再运行时装配，无需在组件之间进行源代码链接。但是反射使用不当会成本很高！<br>反射（Reflection）能够让运行于 JVM 中的程序检测和修改运行时的行为</p>
<p>反射机制的作用：</p>
<ol>
<li>反编译：.class–&gt;.java</li>
<li><p>通过反射机制访问java对象的属性，方法，构造方法等；</p>
<pre><code>String s = &quot;java.util.Date&quot;;
   Object m = Class.forName(s).newInstance();
</code></pre><p>####为什么需要反射<br>通过反射，我们能够</p>
</li>
</ol>
<ul>
<li>在运行时检测对象的类型；</li>
<li>动态构造某个类的对象；</li>
<li>检测类的属性和方法；</li>
<li>任意调用对象的方法；</li>
<li>修改构造函数、方法、属性的可见性。</li>
</ul>
<p>JUnit通过反射来遍历包含 @Test 注解的方法，并在运行单元测试时调用它们。</p>
<p>Web框架<br>开发人员可以在配置文件中定义对各种接口和类的实现。通过反射机制，框架能够快速地动态初始化所需要的类。</p>
<p>Spring框架使用如下的配置文件：</p>
<pre><code>&lt;bean id=&quot;someID&quot; class=&quot;com.programcreek.Foo&quot;&gt;
    &lt;property name=&quot;someField&quot; value=&quot;someValue&quot; /&gt;
&lt;/bean&gt;
</code></pre><p>当Spring容器处理 bean 元素时，会使用Class.forName(“com.programcreek.Foo”)来初始化这个类，并再次使用反射获取 property 元素对应的setter方法，为对象的属性赋值。</p>
<hr>
<p>##五.异常<br>5.throw和throws有什么区别？</p>
<p>throw关键字用来在程序中明确的抛出异常，相反，throws语句用来表明方法不能处理的异常。每一个方法都必须要指定哪些异常不能处理，所以方法的调用者才能够确保处理可能发生的异常，多个异常是用逗号分隔的。</p>
<p>6.Java中Exception和Error有什么区别？</p>
<p>Exception和Error都是Throwable的子类。Exception用于用户程序可以捕获的异常情况。Error定义了不期望被用户程序捕获的异常。</p>
<p>7.Java中的两种异常类型是什么？他们有什么区别？</p>
<p>Java中有两种异常：受检查的(checked)异常和不受检查的(unchecked)异常。不受检查的异常不需要在方法或者是构造函数上声明，就算方法或者是构造函数的执行可能会抛出这样的异常，并且不受检查的异常可以传播到方法或者是构造函数的外面。相反，受检查的异常必须要用throws语句在方法或者是构造函数上声明。<br><img src="http://i.imgur.com/hUwjIXa.jpg" alt=""></p>
<p>##六.spring相关</p>
<p>spring的核心 ioc和aop</p>
<p>Spring Bean的生命周期（非常详细）<a href="http://www.cnblogs.com/zrtqsk/p/3735273.html" target="_blank" rel="external">http://www.cnblogs.com/zrtqsk/p/3735273.html</a></p>
<p>####spring中用到的设计模式<br>工厂模式:IOC容器<br>代理模式:AOP<br>策略模式:在spring采取动态代理时，根据代理的类有无实现接口有JDK和CGLIB两种代理方式，就是采用策略模式实现的<br>单例模式:默认情况下spring中的bean只存在一个实例<br>只知道这四个。。。。</p>
<p>####讲一讲Spring IoC和AOP<br>IoC的核心是依赖反转，将创建对象和对象之间的依赖管理交给IoC容器来做，完成对象之间的解耦。<br>AOP主要是利用代理模式，把许多接口都要用的又和接口本身主要的业务逻辑无关的部分抽出来，写成一个切面，单独维护，比如权限验证。这样可以使接口符合“单一职责原则”，只关注主要的业务逻辑，也提高了代码的重用性。</p>
<p>权限，日志，处理异常，事务等等，个人理解就是把许多接口都要用的又和接口本身主要的业务逻辑无关的部分抽出来，写成一个切面，单独维护，比如权限验证。这样可以使接口符合“单一职责原则”，只关注主要的业务逻辑，也提高了代码的重用性。</p>
<p>####Spring中编码统一要如何做<br>配置一个拦截器</p>
<pre><code>&lt;filter&gt;  
       &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;  
       &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;  
       &lt;init-param&gt;  
           &lt;param-name&gt;encoding&lt;/param-name&gt;  
           &lt;param-value&gt;UTF-8&lt;/param-value&gt;  
       &lt;/init-param&gt;  
       &lt;init-param&gt;  
           &lt;param-name&gt;forceEncoding&lt;/param-name&gt;  
           &lt;param-value&gt;true&lt;/param-value&gt;  
       &lt;/init-param&gt;  
   &lt;/filter&gt;  
   &lt;filter-mapping&gt;  
       &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;  
       &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  
   &lt;/filter-mapping&gt;
</code></pre><hr>
<p>##七.数据库相关</p>
<p>###mysql索引原理</p>
<p>来源：美团点评技术团队<a href="http://tech.meituan.com/mysql-index.html" target="_blank" rel="external">http://tech.meituan.com/mysql-index.html</a></p>
<p>####详解b+树</p>
<p><img src="http://i.imgur.com/iFzh0Ub.jpg" alt=""></p>
<p>如上图，是一颗b+树，关于b+树的定义可以参见B+树，这里只说一些重点，浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含几个数据项（深蓝色所示）和指针（黄色所示），如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。真实的数据存在于叶子节点即3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点只不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中。</p>
<p>####b+树的查找过程<br>如图所示，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高。</p>
<p>####b+树性质<br>1.通过上面的分析，我们知道IO次数取决于b+数的高度h，假设当前数据表的数据为N，每个磁盘块的数据项的数量是m，则有h=㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；而m = 磁盘块的大小 / 数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的，如果数据项占的空间越小，数据项的数量越多，树的高度越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。这也是为什么b+树要求把真实的数据放到叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于1时将会退化成线性表。</p>
<p>2.当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即索引的最左匹配特性。</p>
<p>####建索引的几大原则</p>
<ol>
<li>最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</li>
<li>=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</li>
<li>尽量选择区分度高的列作为索引,区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录</li>
<li>索引列不能参与计算，保持列“干净”，比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’);</li>
<li>尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可</li>
</ol>
<p>####mysql分页优化<br>ps：吐槽下，饿了么面试问我，但是呢。我压根没优化过…<br>参考另一个。</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;1.ArrayList和LinkedList有什么区别？&lt;br&gt;ArrayList是基于索引的数据接口，它的底层是数组。它可以以O(1)时间复杂度对元素进行随机访问。与此对应，LinkedList是以元素列表的形式存储它的数据，每一个元素
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>java泛型</title>
    <link href="http://yoursite.com/2016/09/23/java%E6%B3%9B%E5%9E%8B/"/>
    <id>http://yoursite.com/2016/09/23/java泛型/</id>
    <published>2016-09-23T12:52:12.000Z</published>
    <updated>2016-09-22T16:03:40.193Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>###一、泛型的由来<br>在1.5之后，Java引入了泛型(Generic)的概念，提供了一套抽象的类型表示方法。<br>利用泛型，我们可以；</p>
<p>1、表示多个可变类型之间的相互关系：HashMap<t,s>表示类型T与S的映射，HashMap<t, s="" extends="" t="">表示T的子类与T的映射关系</t,></t,s></p>
<p>2、细化类的能力：ArrayList<t> 可以容纳任何指定类型T的数据，当T代指人，则是人的有序列表，当T代指杯子，则是杯子的有序列表，所有对象个体可以共用相同的操作行为</t></p>
<p>3、简化代码实现：假设有一个执行过程，对不同类型的数据，进行某些流程一致的处理.</p>
<pre><code>public &lt;T&gt; void addToArray(T data, T array[], int pos) {  
    array[pos] = data;  
} 
</code></pre><p>###二、泛型用法<br>1.泛型类</p>
<p>2.泛型方法</p>
<p>###三、通配符<br>我们还可以赋予泛型参数不确定值，也就是通配符?。使用通配符?表示一个未知的类型。类似如下：</p>
<pre><code>List&lt;?&gt; list;存放任意的对象
List&lt;? extends AClass&gt; listSubAClass; //存放AClass的子类
List&lt;? extends BClass&gt; listSuperBClass; //存放BClass的父类
</code></pre><p>通配符不能用在泛型类和泛型方法声明中</p>
<p>###四、泛型关键字<br>1、泛型关键字有二个 extends和super，分别表示类型上界和类型下界<br><code>T extends AClass</code> 表示T继承自AClass类<br><code>? super AClass</code> 表示?是AClass的父类，注意：super只能与通配符?搭配使用，我们不能写：</p>
<pre><code>public class GenericClass&lt;T super AClass&gt; { //错误
}
</code></pre><p>此例子中super换成extends是正确的，表示泛型T继承自AClass，T换成通配符?也是可以的，表示未知类型的下界是AClass。</p>
<p>###五、泛型的应用<br>java泛型的最深入人心的应用就是容器（Collections）了。容器不需要考虑它要装什么东西，它的职责就是表达它装的东西的集合所具有的功能。因此是天然的泛型支持者。</p>
<p>JAVA的容器—List,Map,Set<br>Collection </p>
<p>├List<br>│├LinkedList<br>│├ArrayList<br>│└Vector<br>│　└Stack<br>└Set </p>
<p>Map<br>├Hashtable<br>├HashMap<br>└WeakHashMap</p>
<p><img src="http://i.imgur.com/QIEylMe.jpg" alt=""></p>
<p>LinkedList ：其数据结构采用的是链表，此种结构的优势是删除和添加的效率很高，但随机访问元素时效率较ArrayList类低。</p>
<p>ArrayList：其数据结构采用的是线性表，此种结构的优势是访问和查询十分方便，但添加和删除的时候效率很低。</p>
<p>HashSet: Set类不允许其中存在重复的元素（集），无法添加一个重复的元素（Set中已经存在）。HashSet利用Hash函数进行了查询效率上的优化，其contain（）方法经常被使用，以用于判断相关元素是否已经被添加过。</p>
<p>HashMap: 提供了key-value的键值对数据存储机制，可以十分方便的通过键值查找相应的元素，而且通过Hash散列机制，查找十分的方便。</p>
<p>1.ArrayList和LinkedList有什么区别？<br>ArrayList是基于索引的数据接口，它的底层是数组。它可以以O(1)时间复杂度对元素进行随机访问。与此对应，LinkedList是以元素列表的形式存储它的数据，每一个元素都和它的前一个和后一个元素链接在一起，在这种情况下，查找某个元素的时间复杂度是O(n)。</p>
<p>相对于ArrayList，LinkedList的插入，添加，删除操作速度更快，因为当元素被添加到集合任意位置的时候，不需要像数组那样重新计算大小或者是更新索引。</p>
<p>LinkedList比ArrayList更占内存，因为LinkedList为每一个节点存储了两个引用，一个指向前一个元素，一个指向下一个元素。</p>
<p>2.HashSet和TreeSet有什么区别？</p>
<p>HashSet是由一个hash表来实现的，因此，它的元素是无序的。add()，remove()，contains()方法的时间复杂度是O(1)。</p>
<p>另一方面，TreeSet是由一个树形的结构来实现的，它里面的元素是有序的。因此，add()，remove()，contains()方法的时间复杂度是O(logn)</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;###一、泛型的由来&lt;br&gt;在1.5之后，Java引入了泛型(Generic)的概念，提供了一套抽象的类型表示方法。&lt;br&gt;利用泛型，我们可以；&lt;/p&gt;
&lt;p&gt;1、表示多个可变类型之间的相互关系：HashMap&lt;t,s&gt;表示类型T与S的映
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql分页优化</title>
    <link href="http://yoursite.com/2016/09/22/mysql%E5%88%86%E9%A1%B5%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2016/09/22/mysql分页优化/</id>
    <published>2016-09-22T12:52:12.000Z</published>
    <updated>2016-09-22T08:58:07.172Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL的limit工作原理就是先读取n条记录，然后抛弃前n条，读m条想要的，所以n越大，性能会越差。<br><a id="more"></a></p>
<p>1.基本分页</p>
<pre><code>select * from Member limit 10, 100;  
#m表示要显示的页数，n表示显示的记录行数
</code></pre><p>2.子查询优化</p>
<pre><code>select * from Member where MemberID &gt;= (select MemberID from Member limit 100000,1) limit 100; 
</code></pre><p>3.反向查找</p>
<p>当偏移量大大于一半</p>
<pre><code>SELECT * FROM `abc` WHERE `BatchID` = 123 LIMIT 1199960, 40  
#时间：2.6493s
SELECT * FROM `abc` WHERE `BatchID` = 123 ORDER BY InputDate DESC LIMIT 428775, 40
#1.0035
</code></pre><p>4.limit限制优化法 </p>
<p>把limit偏移量限制低于某个数。。超过这个数等于没数据.<br>ps:…..</p>
<p>5.优化limit和offset </p>
<p>MySQL的limit工作原理就是先读取n条记录，然后抛弃前n条，读m条想要的，所以n越大，性能会越差。<br>优化前SQL: <code>SELECT * FROM member ORDER BY last_active LIMIT 50,5</code><br>优化后SQL:<code>SELECT * FROM member INNER JOIN (SELECT member_id FROM member ORDER BY last_active LIMIT 50, 5) USING (member_id)</code><br>分别在于，优化前的SQL需要更多I/O浪费，因为先读索引，再读数据，然后抛弃无需的行。而优化后的SQL(子查询那条)只读索引(Cover index)就可以了，然后通过member_id读取需要的列。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL的limit工作原理就是先读取n条记录，然后抛弃前n条，读m条想要的，所以n越大，性能会越差。&lt;br&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
  </entry>
  
  <entry>
    <title>Java集合</title>
    <link href="http://yoursite.com/2016/09/22/java%E9%9B%86%E5%90%88/"/>
    <id>http://yoursite.com/2016/09/22/java集合/</id>
    <published>2016-09-22T12:52:12.000Z</published>
    <updated>2016-09-22T16:13:47.709Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>1.Java集合框架是什么？说出一些集合框架的优点？</p>
<p>每种编程语言中都有集合，最初的Java版本包含几种集合类：Vector、Stack、HashTable和Array。随着集合的广泛使用，Java1.2提出了囊括所有集合接口、实现和算法的集合框架。在保证线程安全的情况下使用泛型和并发集合类，Java已经经历了很久。它还包括在Java并发包中，阻塞接口以及它们的实现。集合框架的部分优点如下：</p>
<p>（1）使用核心集合类降低开发成本，而非实现我们自己的集合类。</p>
<p>（2）随着使用经过严格测试的集合框架类，代码质量会得到提高。</p>
<p>（3）通过使用JDK附带的集合类，可以降低代码维护成本。</p>
<p>（4）复用性和可操作性。</p>
<p>2.集合框架中的泛型有什么优点？</p>
<p>Java1.5引入了泛型，所有的集合接口和实现都大量地使用它。泛型允许我们为集合提供一个可以容纳的对象类型，因此，如果你添加其它类型的任何元素，它会在编译时报错。这避免了在运行时出现ClassCastException，因为你将会在编译时得到报错信息。泛型也使得代码整洁，我们不需要使用显式转换和instanceOf操作符。它也给运行时带来好处，因为不会产生类型检查的字节码指令。</p>
<p>3.Java集合框架的基础接口有哪些？</p>
<p>Collection为集合层级的根接口。一个集合代表一组对象，这些对象即为它的元素。Java平台不提供这个接口任何直接的实现。</p>
<p>Set是一个不能包含重复元素的集合。这个接口对数学集合抽象进行建模，被用来代表集合，就如一副牌。</p>
<p>List是一个有序集合，可以包含重复元素。你可以通过它的索引来访问任何元素。List更像长度动态变换的数组。</p>
<p>Map是一个将key映射到value的对象.一个Map不能包含重复的key：每个key最多只能映射一个value。</p>
<p>一些其它的接口有Queue、Dequeue、SortedSet、SortedMap和ListIterator。</p>
<p>4.为何Collection不从Cloneable和Serializable接口继承？</p>
<p>Collection接口指定一组对象，对象即为它的元素。如何维护这些元素由Collection的具体实现决定。例如，一些如List的Collection实现允许重复的元素，而其它的如Set就不允许。很多Collection实现有一个公有的clone方法。然而，把它放到集合的所有实现中也是没有意义的。这是因为Collection是一个抽象表现。重要的是实现。</p>
<p>当与具体实现打交道的时候，克隆或序列化的语义和含义才发挥作用。所以，具体实现应该决定如何对它进行克隆或序列化，或它是否可以被克隆或序列化。</p>
<p>在所有的实现中授权克隆和序列化，最终导致更少的灵活性和更多的限制。特定的实现应该决定它是否可以被克隆和序列化。</p>
<p>5.为何Map接口不继承Collection接口？</p>
<p>尽管Map接口和它的实现也是集合框架的一部分，但Map不是集合，集合也不是Map。因此，Map继承Collection毫无意义，反之亦然。</p>
<p>如果Map继承Collection接口，那么元素去哪儿？Map包含key-value对，它提供抽取key或value列表集合的方法，但是它不适合“一组对象”规范。</p>
<p>6.Iterator是什么？</p>
<p>Iterator接口提供遍历任何Collection的接口。我们可以从一个Collection中使用迭代器方法来获取迭代器实例。迭代器取代了Java集合框架中的Enumeration。迭代器允许调用者在迭代过程中移除元素。</p>
<p>7.Enumeration和Iterator接口的区别？</p>
<p>Enumeration的速度是Iterator的两倍，也使用更少的内存。Enumeration是非常基础的，也满足了基础的需要。但是，与Enumeration相比，Iterator更加安全，因为当一个集合正在被遍历的时候，它会阻止其它线程去修改集合。</p>
<p>迭代器取代了Java集合框架中的Enumeration。迭代器允许调用者从集合中移除元素，而Enumeration不能做到。为了使它的功能更加清晰，迭代器方法名已经经过改善。</p>
<p>8.为何没有像Iterator.add()这样的方法，向集合中添加元素？</p>
<p>语义不明，已知的是，Iterator的协议不能确保迭代的次序。然而要注意，ListIterator没有提供一个add操作，它要确保迭代的顺序。</p>
<p>9.为何迭代器没有一个方法可以直接获取下一个元素，而不需要移动游标？</p>
<p>它可以在当前Iterator的顶层实现，但是它用得很少，如果将它加到接口中，每个继承都要去实现它，这没有意义。</p>
<p>10.Iterater和ListIterator之间有什么区别？</p>
<p>（1）我们可以使用Iterator来遍历Set和List集合，而ListIterator只能遍历List。</p>
<p>（2）Iterator只可以向前遍历，而LIstIterator可以双向遍历。</p>
<p>（3）ListIterator从Iterator接口继承，然后添加了一些额外的功能，比如添加一个元素、替换一个元素、获取前面或后面元素的索引位置。</p>
<p>11.遍历一个List有哪些不同的方式？</p>
<pre><code>List&lt;String&gt; strList = new ArrayList&lt;&gt;();
//使用for-each循环
for(String obj : strList){
  System.out.println(obj);
}
//using iterator
Iterator&lt;String&gt; it = strList.iterator();
while(it.hasNext()){
  String obj = it.next();
  System.out.println(obj);
}
</code></pre><p>使用迭代器更加线程安全，因为它可以确保，在当前遍历的集合元素被更改的时候，它会抛出ConcurrentModificationException。</p>
<p>12.通过迭代器fail-fast属性，你明白了什么？</p>
<p>每次我们尝试获取下一个元素的时候，Iterator fail-fast属性检查当前集合结构里的任何改动。如果发现任何改动，它抛出ConcurrentModificationException。Collection中所有Iterator的实现都是按fail-fast来设计的（ConcurrentHashMap和CopyOnWriteArrayList这类并发集合类除外）。</p>
<p>13.fail-fast与fail-safe有什么区别？</p>
<p>Iterator的fail-fast属性与当前的集合共同起作用，因此它不会受到集合中任何改动的影响。Java.util包中的所有集合类都被设计为fail-fast的，而java.util.concurrent中的集合类都为fail-safe的。Fail-fast迭代器抛出ConcurrentModificationException，而fail-safe迭代器从不抛出ConcurrentModificationException。</p>
<p>14.在迭代一个集合的时候，如何避免ConcurrentModificationException？</p>
<p>在遍历一个集合的时候，我们可以使用并发集合类来避免ConcurrentModificationException，比如使用CopyOnWriteArrayList，而不是ArrayList。</p>
<p>15.为何Iterator接口没有具体的实现？</p>
<p>Iterator接口定义了遍历集合的方法，但它的实现则是集合实现类的责任。每个能够返回用于遍历的Iterator的集合类都有它自己的Iterator实现内部类。</p>
<p>这就允许集合类去选择迭代器是fail-fast还是fail-safe的。比如，ArrayList迭代器是fail-fast的，而CopyOnWriteArrayList迭代器是fail-safe的。</p>
<p>16.UnsupportedOperationException是什么？</p>
<p>UnsupportedOperationException是用于表明操作不支持的异常。在JDK类中已被大量运用，在集合框架java.util.Collections.UnmodifiableCollection将会在所有add和remove操作中抛出这个异常。</p>
<p>17.在Java中，HashMap是如何工作的？</p>
<p>HashMap在Map.Entry静态内部类实现中存储key-value对。HashMap使用哈希算法，在put和get方法中，它使用hashCode()和equals()方法。当我们通过传递key-value对调用put方法的时候，HashMap使用Key hashCode()和哈希算法来找出存储key-value对的索引。Entry存储在LinkedList中，所以如果存在entry，它使用equals()方法来检查传递的key是否已经存在，如果存在，它会覆盖value，如果不存在，它会创建一个新的entry然后保存。当我们通过传递key调用get方法时，它再次使用hashCode()来找到数组中的索引，然后使用equals()方法找出正确的Entry，然后返回它的值。下面的图片解释了详细内容。</p>
<p>其它关于HashMap比较重要的问题是容量、负荷系数和阀值调整。HashMap默认的初始容量是32，负荷系数是0.75。阀值是为负荷系数乘以容量，无论何时我们尝试添加一个entry，如果map的大小比阀值大的时候，HashMap会对map的内容进行重新哈希，且使用更大的容量。容量总是2的幂，所以如果你知道你需要存储大量的key-value对，比如缓存从数据库里面拉取的数据，使用正确的容量和负荷系数对HashMap进行初始化是个不错的做法。</p>
<p>18.hashCode()和equals()方法有何重要性？</p>
<p>HashMap使用Key对象的hashCode()和equals()方法去决定key-value对的索引。当我们试着从HashMap中获取值的时候，这些方法也会被用到。如果这些方法没有被正确地实现，在这种情况下，两个不同Key也许会产生相同的hashCode()和equals()输出，HashMap将会认为它们是相同的，然后覆盖它们，而非把它们存储到不同的地方。同样的，所有不允许存储重复数据的集合类都使用hashCode()和equals()去查找重复，所以正确实现它们非常重要。equals()和hashCode()的实现应该遵循以下规则：</p>
<p>（1）如果o1.equals(o2)，那么o1.hashCode() == o2.hashCode()总是为true的。</p>
<p>（2）如果o1.hashCode() == o2.hashCode()，并不意味着o1.equals(o2)会为true。</p>
<p>19.我们能否使用任何类作为Map的key？</p>
<p>我们可以使用任何类作为Map的key，然而在使用它们之前，需要考虑以下几点：</p>
<p>（1）如果类重写了equals()方法，它也应该重写hashCode()方法。</p>
<p>（2）类的所有实例需要遵循与equals()和hashCode()相关的规则。请参考之前提到的这些规则。</p>
<p>（3）如果一个类没有使用equals()，你不应该在hashCode()中使用它。</p>
<p>（4）用户自定义key类的最佳实践是使之为不可变的，这样，hashCode()值可以被缓存起来，拥有更好的性能。不可变的类也可以确保hashCode()和equals()在未来不会改变，这样就会解决与可变相关的问题了。</p>
<p>比如，我有一个类MyKey，在HashMap中使用它。</p>
<pre><code>//传递给MyKey的name参数被用于equals()和hashCode()中
MyKey key = new MyKey(&apos;Pankaj&apos;); //assume hashCode=1234
myHashMap.put(key, &apos;Value&apos;);
// 以下的代码会改变key的hashCode()和equals()值
key.setName(&apos;Amit&apos;); //assume new hashCode=7890
//下面会返回null，因为HashMap会尝试查找存储同样索引的key，而key已被改变了，匹配失败，返回null
myHashMap.get(new MyKey(&apos;Pankaj&apos;));
</code></pre><p>那就是为何String和Integer被作为HashMap的key大量使用。</p>
<p>20.Map接口提供了哪些不同的集合视图？</p>
<p>Map接口提供三个集合视图：</p>
<p>（1）Set keyset()：返回map中包含的所有key的一个Set视图。集合是受map支持的，map的变化会在集合中反映出来，反之亦然。当一个迭代器正在遍历一个集合时，若map被修改了（除迭代器自身的移除操作以外），迭代器的结果会变为未定义。集合支持通过Iterator的Remove、Set.remove、removeAll、retainAll和clear操作进行元素移除，从map中移除对应的映射。它不支持add和addAll操作。</p>
<p>（2）Collection values()：返回一个map中包含的所有value的一个Collection视图。这个collection受map支持的，map的变化会在collection中反映出来，反之亦然。当一个迭代器正在遍历一个collection时，若map被修改了（除迭代器自身的移除操作以外），迭代器的结果会变为未定义。集合支持通过Iterator的Remove、Set.remove、removeAll、retainAll和clear操作进行元素移除，从map中移除对应的映射。它不支持add和addAll操作。</p>
<p>（3）Set<map.entry<k,v>&gt; entrySet()：返回一个map钟包含的所有映射的一个集合视图。这个集合受map支持的，map的变化会在collection中反映出来，反之亦然。当一个迭代器正在遍历一个集合时，若map被修改了（除迭代器自身的移除操作，以及对迭代器返回的entry进行setValue外），迭代器的结果会变为未定义。集合支持通过Iterator的Remove、Set.remove、removeAll、retainAll和clear操作进行元素移除，从map中移除对应的映射。它不支持add和addAll操作。</map.entry<k,v></p>
<p>21.HashMap和HashTable有何不同？</p>
<p>（1）HashMap允许key和value为null，而HashTable不允许。</p>
<p>（2）HashTable是同步的，而HashMap不是。所以HashMap适合单线程环境，HashTable适合多线程环境。</p>
<p>（3）在Java1.4中引入了LinkedHashMap，HashMap的一个子类，假如你想要遍历顺序，你很容易从HashMap转向LinkedHashMap，但是HashTable不是这样的，它的顺序是不可预知的。</p>
<p>（4）HashMap提供对key的Set进行遍历，因此它是fail-fast的，但HashTable提供对key的Enumeration进行遍历，它不支持fail-fast。</p>
<p>（5）HashTable被认为是个遗留的类，如果你寻求在迭代的时候修改Map，你应该使用CocurrentHashMap。</p>
<p>22.如何决定选用HashMap还是TreeMap？</p>
<p>对于在Map中插入、删除和定位元素这类操作，HashMap是最好的选择。然而，假如你需要对一个有序的key集合进行遍历，TreeMap是更好的选择。基于你的collection的大小，也许向HashMap中添加元素会更快，将map换为TreeMap进行有序key的遍历。</p>
<p>23.ArrayList和Vector有何异同点？</p>
<p>ArrayList和Vector在很多时候都很类似。</p>
<p>（1）两者都是基于索引的，内部由一个数组支持。</p>
<p>（2）两者维护插入的顺序，我们可以根据插入顺序来获取元素。</p>
<p>（3）ArrayList和Vector的迭代器实现都是fail-fast的。</p>
<p>（4）ArrayList和Vector两者允许null值，也可以使用索引值对元素进行随机访问。</p>
<p>以下是ArrayList和Vector的不同点。</p>
<p>（1）Vector是同步的，而ArrayList不是。然而，如果你寻求在迭代的时候对列表进行改变，你应该使用CopyOnWriteArrayList。</p>
<p>（2）ArrayList比Vector快，它因为有同步，不会过载。</p>
<p>（3）ArrayList更加通用，因为我们可以使用Collections工具类轻易地获取同步列表和只读列表。</p>
<p>24.Array和ArrayList有何区别？什么时候更适合用Array？</p>
<p>Array可以容纳基本类型和对象，而ArrayList只能容纳对象。</p>
<p>Array是指定大小的，而ArrayList大小是固定的。</p>
<p>Array没有提供ArrayList那么多功能，比如addAll、removeAll和iterator等。尽管ArrayList明显是更好的选择，但也有些时候Array比较好用。</p>
<p>（1）如果列表的大小已经指定，大部分情况下是存储和遍历它们。</p>
<p>（2）对于遍历基本数据类型，尽管Collections使用自动装箱来减轻编码任务，在指定大小的基本类型的列表上工作也会变得很慢。</p>
<p>（3）如果你要使用多维数组，使用[][]比List<list<>&gt;更容易。</list<></p>
<p>25.ArrayList和LinkedList有何区别？</p>
<p>ArrayList和LinkedList两者都实现了List接口，但是它们之间有些不同。</p>
<p>（1）ArrayList是由Array所支持的基于一个索引的数据结构，所以它提供对元素的随机访问，复杂度为O(1)，但LinkedList存储一系列的节点数据，每个节点都与前一个和下一个节点相连接。所以，尽管有使用索引获取元素的方法，内部实现是从起始点开始遍历，遍历到索引的节点然后返回元素，时间复杂度为O(n)，比ArrayList要慢。</p>
<p>（2）与ArrayList相比，在LinkedList中插入、添加和删除一个元素会更快，因为在一个元素被插入到中间的时候，不会涉及改变数组的大小，或更新索引。</p>
<p>（3）LinkedList比ArrayList消耗更多的内存，因为LinkedList中的每个节点存储了前后节点的引用。</p>
<p>26.哪些集合类提供对元素的随机访问？</p>
<p>ArrayList、HashMap、TreeMap和HashTable类提供对元素的随机访问。</p>
<p>27.EnumSet是什么？</p>
<p>java.util.EnumSet是使用枚举类型的集合实现。当集合创建时，枚举集合中的所有元素必须来自单个指定的枚举类型，可以是显示的或隐示的。EnumSet是不同步的，不允许值为null的元素。它也提供了一些有用的方法，比如copyOf(Collection c)、of(E first,E…rest)和complementOf(EnumSet s)。</p>
<p>28.哪些集合类是线程安全的？</p>
<p>Vector、HashTable、Properties和Stack是同步类，所以它们是线程安全的，可以在多线程环境下使用。Java1.5并发API包括一些集合类，允许迭代时修改，因为它们都工作在集合的克隆上，所以它们在多线程环境中是安全的。</p>
<p>29.并发集合类是什么？</p>
<p>Java1.5并发包（java.util.concurrent）包含线程安全集合类，允许在迭代时修改集合。迭代器被设计为fail-fast的，会抛出ConcurrentModificationException。一部分类为：CopyOnWriteArrayList、 ConcurrentHashMap、CopyOnWriteArraySet。</p>
<p>30.BlockingQueue是什么？</p>
<p>Java.util.concurrent.BlockingQueue是一个队列，在进行检索或移除一个元素的时候，它会等待队列变为非空；当在添加一个元素时，它会等待队列中的可用空间。BlockingQueue接口是Java集合框架的一部分，主要用于实现生产者-消费者模式。我们不需要担心等待生产者有可用的空间，或消费者有可用的对象，因为它都在BlockingQueue的实现类中被处理了。Java提供了集中BlockingQueue的实现，比如ArrayBlockingQueue、LinkedBlockingQueue、PriorityBlockingQueue,、SynchronousQueue等。</p>
<p>31.队列和栈是什么，列出它们的区别？</p>
<p>栈和队列两者都被用来预存储数据。java.util.Queue是一个接口，它的实现类在Java并发包中。队列允许先进先出（FIFO）检索元素，但并非总是这样。Deque接口允许从两端检索元素。</p>
<p>栈与队列很相似，但它允许对元素进行后进先出（LIFO）进行检索。</p>
<p>Stack是一个扩展自Vector的类，而Queue是一个接口。</p>
<p>32.Collections类是什么？</p>
<p>Java.util.Collections是一个工具类仅包含静态方法，它们操作或返回集合。它包含操作集合的多态算法，返回一个由指定集合支持的新集合和其它一些内容。这个类包含集合框架算法的方法，比如折半搜索、排序、混编和逆序等。</p>
<p>33.Comparable和Comparator接口是什么？</p>
<p>如果我们想使用Array或Collection的排序方法时，需要在自定义类里实现Java提供Comparable接口。Comparable接口有compareTo(T OBJ)方法，它被排序方法所使用。我们应该重写这个方法，如果“this”对象比传递的对象参数更小、相等或更大时，它返回一个负整数、0或正整数。但是，在大多数实际情况下，我们想根据不同参数进行排序。比如，作为一个CEO，我想对雇员基于薪资进行排序，一个HR想基于年龄对他们进行排序。这就是我们需要使用Comparator接口的情景，因为Comparable.compareTo(Object o)方法实现只能基于一个字段进行排序，我们不能根据对象排序的需要选择字段。Comparator接口的compare(Object o1, Object o2)方法的实现需要传递两个对象参数，若第一个参数比第二个小，返回负整数；若第一个等于第二个，返回0；若第一个比第二个大，返回正整数。</p>
<p>34.Comparable和Comparator接口有何区别？</p>
<p>Comparable和Comparator接口被用来对对象集合或者数组进行排序。Comparable接口被用来提供对象的自然排序，我们可以使用它来提供基于单个逻辑的排序。</p>
<p>Comparator接口被用来提供不同的排序算法，我们可以选择需要使用的Comparator来对给定的对象集合进行排序。</p>
<p>35.我们如何对一组对象进行排序？</p>
<p>如果我们需要对一个对象数组进行排序，我们可以使用Arrays.sort()方法。如果我们需要排序一个对象列表，我们可以使用Collection.sort()方法。两个类都有用于自然排序（使用Comparable）或基于标准的排序（使用Comparator）的重载方法sort()。Collections内部使用数组排序方法，所有它们两者都有相同的性能，只是Collections需要花时间将列表转换为数组。</p>
<p>36.当一个集合被作为参数传递给一个函数时，如何才可以确保函数不能修改它？</p>
<p>在作为参数传递之前，我们可以使用Collections.unmodifiableCollection(Collection c)方法创建一个只读集合，这将确保改变集合的任何操作都会抛出UnsupportedOperationException。</p>
<p>37.我们如何从给定集合那里创建一个synchronized的集合？</p>
<p>我们可以使用Collections.synchronizedCollection(Collection c)根据指定集合来获取一个synchronized（线程安全的）集合。</p>
<p>38.集合框架里实现的通用算法有哪些？</p>
<p>Java集合框架提供常用的算法实现，比如排序和搜索。Collections类包含这些方法实现。大部分算法是操作List的，但一部分对所有类型的集合都是可用的。部分算法有排序、搜索、混编、最大最小值。</p>
<p>39.大写的O是什么？举几个例子？</p>
<p>大写的O描述的是，就数据结构中的一系列元素而言，一个算法的性能。Collection类就是实际的数据结构，我们通常基于时间、内存和性能，使用大写的O来选择集合实现。比如：例子1：ArrayList的get(index i)是一个常量时间操作，它不依赖list中元素的数量。所以它的性能是O(1)。例子2：一个对于数组或列表的线性搜索的性能是O(n)，因为我们需要遍历所有的元素来查找需要的元素。</p>
<p>40.与Java集合框架相关的有哪些最好的实践？</p>
<p>（1）根据需要选择正确的集合类型。比如，如果指定了大小，我们会选用Array而非ArrayList。如果我们想根据插入顺序遍历一个Map，我们需要使用TreeMap。如果我们不想重复，我们应该使用Set。</p>
<p>（2）一些集合类允许指定初始容量，所以如果我们能够估计到存储元素的数量，我们可以使用它，就避免了重新哈希或大小调整。</p>
<p>（3）基于接口编程，而非基于实现编程，它允许我们后来轻易地改变实现。</p>
<p>（4）总是使用类型安全的泛型，避免在运行时出现ClassCastException。</p>
<p>（5）使用JDK提供的不可变类作为Map的key，可以避免自己实现hashCode()和equals()。</p>
<p>（6）尽可能使用Collections工具类，或者获取只读、同步或空的集合，而非编写自己的实现。它将会提供代码重用性，它有着更好的稳定性和可维护性。</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;1.Java集合框架是什么？说出一些集合框架的优点？&lt;/p&gt;
&lt;p&gt;每种编程语言中都有集合，最初的Java版本包含几种集合类：Vector、Stack、HashTable和Array。随着集合的广泛使用，Java1.2提出了囊括所有集合接
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java类的连接与初始化</title>
    <link href="http://yoursite.com/2016/09/22/java%E7%B1%BB%E7%9A%84%E8%BF%9E%E6%8E%A5%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://yoursite.com/2016/09/22/java类的连接和初始化/</id>
    <published>2016-09-22T12:52:12.000Z</published>
    <updated>2016-09-22T12:41:54.573Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>Java虚拟机通过装载、连接、初始化来使得一个Java类型可以被Java程序所使用，如下图所示，其中连接过程又分为验证、准备、解析三个部分。其中部分类的解析过程可以推迟到程序真正使用其某个符号引用时再去解析。</p>
<p><img src="http://i.imgur.com/kQuMdeK.png" alt=""></p>
<p>解析过程可以推迟到累的初始化之后进行，但这是有条件的，java虚拟机必须在每个类或借口主动使用时进行初始化。<br>以下为主动使用的情况：</p>
<ul>
<li>(1).(无论直接通过new创建出来的，还是通过反射、克隆、序列化创建的)创建某个类新的实例</li>
<li>(2).使用某个类的静态方法</li>
<li>(3).访问某个类或接口的静态字段</li>
<li>(4).调用JavaAPI中的某些反射方法</li>
<li>(5).初始化某个类的子类(要求其祖先类都要被初始化，否则无法正确访问其继承的成员)</li>
<li>(6).启动某个标明为启动类的类(含有main()方法)</li>
</ul>
<p>主动使用会导致类的初始化，其超类均将在该类的初始化之前被初始化，但通过子类访问父类的静态字段或方法时，对于子类(或子接口、接口的实现类)来说，这种访问就是被动访问，或者说访问了该类(接口)中的不在该类(接口)中声明的静态成员。</p>
<p>如：<br>Grandpa的定义如下：<br>    package com.ice.passiveaccess;</p>
<pre><code>public class Grandpa {
    static{
        System.out.println(&quot;Grandpa was initialized.&quot;);
    }
}
</code></pre><p>Parent的定义如下：<br>    package com.ice.passiveaccess;</p>
<pre><code>public class Parent extends Grandpa{
    static String language = &quot;Chinese&quot;;
    static{
        System.out.println(&quot;Parent was initialized.&quot;);
    }
}
</code></pre><p>Cindy的定义如下：<br>    package com.ice.passiveaccess;</p>
<pre><code>public class Cindy extends Parent{
    static{
        System.out.println(&quot;Child was initialized.&quot;);
    }
}
</code></pre><p>现在通过Cindy访问父类的language成员</p>
<pre><code>package com.ice.passiveaccess;

public class PassiveAccessTest {
    public static void main(String args[]){
        System.out.println(Cindy.language);
    }
}
</code></pre><p>结果如下：</p>
<pre><code>Grandpa was initialized.
Parent was initialized.
Chinese
</code></pre><p>可见这是被动访问，Cindy自身并没有初始化</p>
<p>下面简要介绍装载、验证与初始化过程：<br>1.装载：</p>
<ul>
<li>(1).找到该类型的class文件，产生一个该类型的class文件二进制数据流(ClassLoader需要实现的loadClassData()方法)</li>
<li>(2).解析该二进制数据流为方法区内的数据结构</li>
<li>(3).创建一个该类型的java.lang.Class实例</li>
<li>在加载器的相关代码中可以看到，最终通过defineClass()创建一个Java类型对象(Class对象)。</li>
</ul>
<p>2.验证：<br>class文件校验器需要四趟独立的扫描来完成验证工作，其中：</p>
<p>第一趟扫描在装载时进行，会对class文件进行结构检查，如</p>
<blockquote>
<p>(1).对魔数进行检查，以判断该文件是否是一个正常的class文件<br>(2).对主次版本号进行检查，以判断class文件是否与java虚拟机兼容。<br>(3).对class文件的长度和类型进行检查，避免class文件部分缺失或被附加内容。</p>
</blockquote>
<p>第二趟扫描在连接过程中进行，会对类型数据进行语义检查，主要检查各个类的二进制兼容性(主要是查看超类和子类的关系)和类本身是否符合特定的语义条件</p>
<blockquote>
<p>(1).final类不能拥有子类<br>(2).final方法不能被重写(覆盖)<br>(3).子类和超类之间没有不兼容的方法声明<br>(4).检查常量池入口类型是否一致(如CONSTANT_Class常量池的内容是否指向一个CONSTANT_Utf8字符串常量池)<br>(5).检查常量池的所有特殊字符串，以确定它们是否是其所属类型的实例，以及是否符合特定的上下文无关语法、格式</p>
</blockquote>
<p>第三趟扫描为字节码验证，其验证内容和实现较为复杂，主要检验字节码是否可以被java虚拟机安全地执行。</p>
<p>第四趟扫描在解析过程中进行，为对符号引用的验证。在动态连接过程中，通过保存在常量池的符号引用查找被引用的类、接口、字段、方法时，在把符号引用替换成直接引用时，首先需要确认查找的元素真正存在，然后需要检查访问权限、查找的元素是否是静态类成员而非实例成员。</p>
<p>3.准备：</p>
<p>为类变量分配内存、设置默认初始值(内存设置初始值，而非对类变量真正地进行初始化，即类中声明int i = 5，但实际上这里是分配内存并设置初始值为0)</p>
<p>4.解析：</p>
<p>在类的常量池中寻找类、接口、字段、方法的符号引用，将这些符号引用替换成直接引用</p>
<p>5.初始化</p>
<p>对类变量赋予指定的初始值(这个时候int i = 5就必须赋予i以初值5)。这个初始值的给定方式有两种，一种是通过类变量的初始化语句，一种是静态初始化语句。而这些初始化语句都将被Java编译器一起放在方法中。<br>如前面所述，一个类的初始化需要初始化其直接超类，并递归初始化其祖先类，初始化是通过调用类的初始化方法完成的。此外，对于接口，并不需要初始化其父接口，而只需要执行该接口的接口初始化方法就可以了。</p>
<p>注意：</p>
<p>(1). 在初始化阶段，只会为类变量(静态全局变量)进行初始化工作，并且当类变量声明为final类型切初始化语句采用了常量表达式方式进行初始化赋值，那么， 也不会对其进行初始化，它将会直接被编译器计算并保存在常量池中，并且对这些变量的使用也将直接将其变量值嵌入到字节码中。</p>
<p>(2).接口的初始化与类有所不同，在初始化阶段，会为在接口中声明的所有public、static和final类型的、无法被编译为常量的字段进行初始化</p>
<p>6.类实例化</p>
<p>这里需要明白什么是类初始化，什么是类实例化，以及类的实例对象的初始化<br>如前面所述，类初始化时对类(静态)变量赋予指定的初始值，类初始化之后就可以访问类的静态字段和方法，而访问类的非静态(实例)字段和方法，就需要创建类的对象实例，故类的实例化是在类的初始化之后，是在堆上创建一个该类的对象。</p>
<p>类的静态方法和字段属于类，作为类型数据保存在方法区，其生命周期取决于类，而实例方法和字段位于Java堆，其生命周期取决于对象的生命周期。
　　</p>
<p>类的初始化会从祖先类到子类、按出现顺序，对类变量的初始化语句、静态初始化语句块依次进行初始化。而对类实例的初始化也类似，会从祖先类到子类、按出现顺序，对类成员的初始化语句、实例初始化块、构造方法依次进行初始化。</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Java虚拟机通过装载、连接、初始化来使得一个Java类型可以被Java程序所使用，如下图所示，其中连接过程又分为验证、准备、解析三个部分。其中部分类的解析过程可以推迟到程序真正使用其某个符号引用时再去解析。&lt;/p&gt;
&lt;p&gt;&lt;img sr
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/09/21/hello-world/"/>
    <id>http://yoursite.com/2016/09/21/hello-world/</id>
    <published>2016-09-21T02:07:00.764Z</published>
    <updated>2016-09-21T02:07:00.769Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>eclipse（4.5.2）hadoop2.7.2开发环境配置</title>
    <link href="http://yoursite.com/2016/07/22/eclipse%E4%B8%ADhadoop2-7-2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2016/07/22/eclipse中hadoop2-7-2开发环境配置/</id>
    <published>2016-07-22T12:52:12.000Z</published>
    <updated>2016-07-22T12:53:42.531Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>eclipse（4.5.2） hadoop2.7.2 开发环境配置</p>
<p>##一.需要的资源列表<br>    hadoop2.7.2<br>    Eclipse Version: Mars.2 Release (4.5.2)<br>    Java jdk 1.7<br>    winutils #2.7.2<br>    hadoop.dll #2.7.2<br>    hadoop-eclipse-plugin-2.7.2 #插件</p>
<p>##二.hadoop-eclipse-plugin-2.7.2插件制作<br>问题保留：插件制作步骤暂时没有研究。所用的插件直接用现成下载的。<br>链接地址为：<br><a href="http://download.csdn.net/detail/tondayong1981/9432425#comment" target="_blank" rel="external">http://download.csdn.net/detail/tondayong1981/9432425#comment</a></p>
<p>hadoop.dll和winutills链接地址为（ps：该版本为下载的是2.7.1，但是在2.7.2下面也可以运行）：<br><a href="http://download.csdn.net/detail/qq_16899785/9292533#comment" target="_blank" rel="external">http://download.csdn.net/detail/qq_16899785/9292533#comment</a></p>
<p>##三.eclipse配置过程</p>
<p>第一步：将hadoop解压缩到某个目录下面。</p>
<p>第二步：将下载的hadoop.dll和winutills执行以下步骤：</p>
<ul>
<li>将文件解压到hadoop的bin目录下</li>
<li>将hadoop.dll复制到C:\Window\System32下</li>
<li>添加环境变量HADOOP_HOME，指向hadoop目录</li>
<li>将%HADOOP_HOME%\bin加入到path里面</li>
<li>重启myeclipse或者eclipse</li>
</ul>
<p>第三步：将hadoop-eclipse-plugin-2.7.2放在eclipse的pligins目录下，重启eclipse。</p>
<pre><code>windows-&gt;perference-&gt;Hadoop Map/Reduce #配置hadoop安装目录。完成退出。
windows-&gt;open perspective-&gt;other-&gt;map/reduce.
</code></pre><p>新建一个map/reduce locations.具体设置如下：</p>
<pre><code>Location Name ： 此处为参数设置名称，可以任意填写
Map/Reduce Master (此处为Hadoop集群的Map/Reduce地址，应该和mapred-site.xml中的mapred.job.tracker设置相同)
DFS Master (此处为Hadoop的master服务器地址，应该和core-site.xml中的 fs.default.name 设置相同)
</code></pre><p>执行以下步骤：</p>
<pre><code>dfs locations reconnected
</code></pre><p>可以看到连接到hdfs上了已经。</p>
<p>如果tmp目录下面出现permission denied 的问题。可以尝试两种解决方案。第一种修改用户与hadoop上的用户名一直。第二种，修改hdfs-site.xml文件，将dfs.permissions 设置为false。内容如下：</p>
<pre><code>&lt;property&gt;
    &lt;name&gt;dfs.permissions&lt;/name&gt;
    &lt;value&gt;false&lt;/value&gt;
&lt;/property&gt;
</code></pre><p>##四.eclipse编写wordcount程序</p>
<pre><code>new-&gt;other-&gt;map/reduce project
new-&gt;class-&gt;org.apache.hadoop.examples.WordCount
new-&gt;log4j.properties
####
log4j.rootLogger=debug,stdout,R 
log4j.appender.stdout=org.apache.log4j.ConsoleAppender 
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout 
log4j.appender.stdout.layout.ConversionPattern=%5p - %m%n 
log4j.appender.R=org.apache.log4j.RollingFileAppender 
log4j.appender.R.File=mapreduce_test.log 
log4j.appender.R.MaxFileSize=1MB 
log4j.appender.R.MaxBackupIndex=1 
log4j.appender.R.layout=org.apache.log4j.PatternLayout 
log4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n 
log4j.logger.com.codefutures=DEBUG 
####
</code></pre><p>WorldCount代码如下：<br>    package org.apache.hadoop.examples;</p>
<pre><code>import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;

public class WordCount {

  public static class TokenizerMapper 
   extends Mapper&lt;Object, Text, Text, IntWritable&gt;{

private final static IntWritable one = new IntWritable(1);
private Text word = new Text();

public void map(Object key, Text value, Context context
) throws IOException, InterruptedException {
  StringTokenizer itr = new StringTokenizer(value.toString());
  while (itr.hasMoreTokens()) {
word.set(itr.nextToken());
context.write(word, one);
  }
}
  }

  public static class IntSumReducer 
   extends Reducer&lt;Text,IntWritable,Text,IntWritable&gt; {
private IntWritable result = new IntWritable();

public void reduce(Text key, Iterable&lt;IntWritable&gt; values, 
   Context context
   ) throws IOException, InterruptedException {
  int sum = 0;
  for (IntWritable val : values) {
sum += val.get();
  }
  result.set(sum);
  context.write(key, result);
}
  }

  public static void main(String[] args) throws Exception {
Configuration conf = new Configuration();

String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();
if (otherArgs.length != 2) {
  System.err.println(&quot;Usage: wordcount &lt;in&gt; &lt;out&gt;&quot;);
  System.exit(2);
}
Job job = new Job(conf, &quot;word count&quot;);
job.setJarByClass(WordCount.class);
job.setMapperClass(TokenizerMapper.class);
job.setCombinerClass(IntSumReducer.class);
job.setReducerClass(IntSumReducer.class);
job.setOutputKeyClass(Text.class);
job.setOutputValueClass(IntWritable.class);
FileInputFormat.addInputPath(job, new Path(otherArgs[0]));
FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));
System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}
</code></pre><p>运行步骤：<br>run as-&gt; run conf -&gt;arguments<br>    hdfs://192.168.186.101:9000/input/w3<br>    hdfs://192.168.186.101:9000/input/out3<br>该路径为hdfs上输入文件的木和输出文件目录。输出文件目录会自动创建。（如果已经存在该目录，需要重新输入一个输出目录）</p>
<p>运行成功</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;eclipse（4.5.2） hadoop2.7.2 开发环境配置&lt;/p&gt;
&lt;p&gt;##一.需要的资源列表&lt;br&gt;    hadoop2.7.2&lt;br&gt;    Eclipse Version: Mars.2 Release (4.5.2)&lt;
    
    </summary>
    
      <category term="hadoop" scheme="http://yoursite.com/categories/hadoop/"/>
    
    
  </entry>
  
  <entry>
    <title>hadoop配置</title>
    <link href="http://yoursite.com/2016/07/13/hadoop%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2016/07/13/hadoop配置/</id>
    <published>2016-07-13T14:40:58.000Z</published>
    <updated>2016-07-13T14:43:49.279Z</updated>
    
    <content type="html"><![CDATA[<p>在centos7环境下部署hadoop2.7.2<br><a id="more"></a></p>
<p>##hadoop2.7.2 虚拟机分布式配置 ##</p>
<h3 id="一、配置环境"><a href="#一、配置环境" class="headerlink" title="一、配置环境"></a>一、配置环境</h3><ul>
<li>centos7 </li>
<li>hadoop2.7.2</li>
<li>java jdk1.7</li>
</ul>
<h3 id="二、修改hostname和ip"><a href="#二、修改hostname和ip" class="headerlink" title="二、修改hostname和ip"></a>二、修改hostname和ip</h3><p>配置ip地址和hostname如下所示：</p>
<ul>
<li>192.168.186.1 master</li>
<li>192.168.186.2 slave1</li>
<li>192.168.186.3 slave2</li>
</ul>
<p>其中配置hostname命令如下：</p>
<pre><code>hostnamectl set -hostname master
Hostnamectl status
</code></pre><p>设置ip地址命令如下：</p>
<pre><code>cd /etc/sysconfig/network-scripts
vi ifcfg-eno16777736
service network restart #让配置生效
</code></pre><p>其中虚拟机选择的网络建立方式为NAT。中间出现自己定义一个静态ip，NAT又动态分配一个ip的问题。</p>
<p>解决办法为更改虚拟机有线连接配置中，为自定义，设置为自己定义的静态ip。</p>
<p>修改hosts文件。添加以下内容:</p>
<pre><code>vi /etc/hosts

192.168.186.1 master
192.168.186.2 slave1
192.168.186.3 slave2
</code></pre><h3 id="三、安装Java-jdk"><a href="#三、安装Java-jdk" class="headerlink" title="三、安装Java jdk"></a>三、安装Java jdk</h3><p>查看是否安装openJDK.如果安装可以卸载，安装sun的JDK。</p>
<pre><code>java -version
rpm -qa|grep java #查看安装的openJDK的source
rpm -e --nodeps +source #source为openjdk源
vi /etc/profile
export JAVA_HOME=/home/java/jdk1.7.0_79
export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
export PATH=$PATH:$JAVA_HOME/bin 
</code></pre><p>使配置生效，查看Java 版本</p>
<pre><code>source /etc/profile
java -version
</code></pre><h3 id="三、关闭防火墙"><a href="#三、关闭防火墙" class="headerlink" title="三、关闭防火墙"></a>三、关闭防火墙</h3><pre><code>systemctl stop firewalld.service #停止firewall
systemctl disable firewalld.service #禁止firewall开机启动
</code></pre><h3 id="四、安装hadoop"><a href="#四、安装hadoop" class="headerlink" title="四、安装hadoop"></a>四、安装hadoop</h3><pre><code>tar hadoop-2.7.2.tar.gz #解压
hadoop目录下创建数据存放的文件夹，tmp、dfs、dfs/data、dfs/name
</code></pre><p>然后修改etc下面的配置文件。（不一一列举）</p>
<p>修改slaves文件：</p>
<pre><code>[root@master hadoop]# vi slaves
[root@master hadoop]# cat slaves
slave1
slave2
</code></pre><p>修改JAVA_HOME值（export JAVA_HOME=/usr/jdk1.7）：</p>
<pre><code>[root@master hadoop]# source hadoop-env.sh
[root@master hadoop]# source yarn-env.sh
</code></pre><p>修改以下四个文件（具体配置内容见度娘）：</p>
<pre><code>core-site.xml
hdfs-site.xml
mapred-site.xml
yarn-site.xml
</code></pre><p>遇到的问题：启动的时候datanode启动失败。</p>
<p>把整个hadoop复制到slave节点：</p>
<pre><code>sudo scp -r /usr/hadoop aboutyun@slave1:~/
</code></pre><h3 id="五、设置无密码登录ssh"><a href="#五、设置无密码登录ssh" class="headerlink" title="五、设置无密码登录ssh"></a>五、设置无密码登录ssh</h3><p>CentOS默认没有启动ssh无密登录，去掉/etc/ssh/sshd_config其中2行的注释，每台服务器都要设置。</p>
<pre><code>#RSAAuthentication yes
#PubkeyAuthentication yes
</code></pre><p>输入命令，<code>ssh-keygen -t rsa</code>，生成key，都不输入密码，一直回车，/root就会生成.ssh文件夹</p>
<p>在Master服务器，进入/root/.ssh目录，通过SSH命令合并，</p>
<pre><code>cat id_rsa.pub&gt;&gt; authorized_keys
</code></pre><p>slave节点:</p>
<p>生成rsa,将rsa.pub运城拷贝到master：</p>
<pre><code>scp id_rsa.pub master:/root/.ssh/id_rsa.pub.s2
</code></pre><p>主节点进行以下步骤：</p>
<pre><code>[root@master .ssh]# cat id_rsa.pub.s1&gt;&gt;authorized_keys 
[root@master .ssh]# cat id_rsa.pub.s2&gt;&gt;authorized_keys 
[root@master .ssh]# cat authorized_keys 
</code></pre><p>再将生成的复制到s1 s2：</p>
<pre><code>scp authorized_keys slave1:/root/.ssh
scp authorized_keys slave2:/root/.ssh
</code></pre><p>登录测试：</p>
<pre><code>ssh master
ssh slave1
</code></pre><p>在Master服务器启动hadoop，从节点会自动启动，进入/home/hadoop/hadoop-2.7.0目录。</p>
<pre><code>bin/hdfs namenode -format
sbin/start-all.sh，#也可以分开sbin/start-dfs.sh、sbin/start-yarn.sh
sbin/stop-all.sh#关闭
jps
</code></pre><p>Web访问，要先开放端口或者直接关闭防火墙：</p>
<pre><code>systemctl stop firewalld.service
http://192.168.0.182:8088/
http://192.168.0.182:50070/
</code></pre><h3 id="五、运行wordcount"><a href="#五、运行wordcount" class="headerlink" title="五、运行wordcount"></a>五、运行wordcount</h3><pre><code>bin/hdfs dfs -mkdir /test
bin/hdfs dfs -ls /
bin/hdfs dfs -put /home/words /test/
bin/hdfs dfs -ls /test/
bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar wordcount /test/words /test/out
bin/hdfs dfs -ls /test
bin/hdfs dfs -ls /test/out
bin/hadoop fs -cat /test/out/part-r-00000
</code></pre><p>另一种hadoop命令方式</p>
<pre><code>hadoop fs -mkdir /input
hadoop fs -put LICENSE.txt  /input
hadoop fs -ls /input
hadoop fs -cat /input/LICENSE.txt
hadoop jar /home/yy/hadoop-2.7.1/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.1.jar wordcount /input /output
hadoop fs -ls /output
hadoop fs -cat /output/part-r-00000
</code></pre><p>遇到的问题。</p>
<ul>
<li>yarn设置内存大小</li>
<li>put命令失败，由于ip没有配置对。</li>
<li>也有其他原因，内存不够，多次format节点，造成id不一致等。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在centos7环境下部署hadoop2.7.2&lt;br&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="http://yoursite.com/categories/Hadoop/"/>
    
    
  </entry>
  
  <entry>
    <title>mybatis</title>
    <link href="http://yoursite.com/2016/02/25/mybatis/"/>
    <id>http://yoursite.com/2016/02/25/mybatis/</id>
    <published>2016-02-25T14:26:18.000Z</published>
    <updated>2016-02-25T14:54:51.089Z</updated>
    
    <content type="html"><![CDATA[<p>MyBatis<br><a id="more"></a><br>1.xml映射配置文件<br>sqlMapConfig.xml</p>
<p>setting：设置信息</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"multipleResultSetsEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useColumnLabel"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingBehavior"</span> <span class="attr">value</span>=<span class="string">"PARTIAL"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultExecutorType"</span> <span class="attr">value</span>=<span class="string">"SIMPLE"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultStatementTimeout"</span> <span class="attr">value</span>=<span class="string">"25"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultFetchSize"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"safeRowBoundsEnabled"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"localCacheScope"</span> <span class="attr">value</span>=<span class="string">"SESSION"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"jdbcTypeForNull"</span> <span class="attr">value</span>=<span class="string">"OTHER"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadTriggerMethods"</span> <span class="attr">value</span>=<span class="string">"equals,clone,hashCode,toString"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div></pre></td></tr></table></figure>
<p>typeAliases；设置别名，用来减少类完全限定名的冗余<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Author"</span> <span class="attr">type</span>=<span class="string">"domain.blog.Author"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Blog"</span> <span class="attr">type</span>=<span class="string">"domain.blog.Blog"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Comment"</span> <span class="attr">type</span>=<span class="string">"domain.blog.Comment"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Post"</span> <span class="attr">type</span>=<span class="string">"domain.blog.Post"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Section"</span> <span class="attr">type</span>=<span class="string">"domain.blog.Section"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Tag"</span> <span class="attr">type</span>=<span class="string">"domain.blog.Tag"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>mappers 映射器<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Using classpath relative resources --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/AuthorMapper.xml"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/BlogMapper.xml"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/PostMapper.xml"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2.mapper xml 文件</p>
<p>SQL 映射文件有很少的几个顶级元素（按照它们应该被定义的顺序）：</p>
<p>cache – 给定命名空间的缓存配置。<br>cache-ref – 其他命名空间缓存配置的引用。<br>resultMap – 是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象。<br>sql – 可被其他语句引用的可重用语句块。<br>insert – 映射插入语句<br>update – 映射更新语句<br>delete – 映射删除语句<br>select – 映射查询语句</p>
<p>2.1 select<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;select</div><div class="line">  id=&quot;selectPerson&quot;</div><div class="line">  parameterType=&quot;int&quot;</div><div class="line">  parameterMap=&quot;deprecated&quot;</div><div class="line">  resultType=&quot;hashmap&quot;</div><div class="line">  resultMap=&quot;personResultMap&quot;</div><div class="line">  flushCache=&quot;false&quot;</div><div class="line">  useCache=&quot;true&quot;</div><div class="line">  timeout=&quot;10000&quot;</div><div class="line">  fetchSize=&quot;256&quot;</div><div class="line">  statementType=&quot;PREPARED&quot;</div><div class="line">  resultSetType=&quot;FORWARD_ONLY&quot;&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;selectPerson&quot; parameterType=&quot;int&quot; resultType=&quot;hashmap&quot;&gt;</div><div class="line">  SELECT * FROM PERSON WHERE ID = #&#123;id&#125;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>2.2 insert update delete<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;insert</div><div class="line">  id=&quot;insertAuthor&quot;</div><div class="line">  parameterType=&quot;domain.blog.Author&quot;</div><div class="line">  flushCache=&quot;true&quot;</div><div class="line">  statementType=&quot;PREPARED&quot;</div><div class="line">  keyProperty=&quot;&quot;</div><div class="line">  keyColumn=&quot;&quot;</div><div class="line">  useGeneratedKeys=&quot;&quot;</div><div class="line">  timeout=&quot;20&quot;&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;update</div><div class="line">  id=&quot;updateAuthor&quot;</div><div class="line">  parameterType=&quot;domain.blog.Author&quot;</div><div class="line">  flushCache=&quot;true&quot;</div><div class="line">  statementType=&quot;PREPARED&quot;</div><div class="line">  timeout=&quot;20&quot;&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;delete</div><div class="line">  id=&quot;deleteAuthor&quot;</div><div class="line">  parameterType=&quot;domain.blog.Author&quot;</div><div class="line">  flushCache=&quot;true&quot;</div><div class="line">  statementType=&quot;PREPARED&quot;</div><div class="line">  timeout=&quot;20&quot;&gt;</div></pre></td></tr></table></figure>
<p>2.3 sql 定义可充用代码段</p>
<p>2.4字符串替换</p>
<p>#{}<br>${} 不安全</p>
<p>2.5 resultmap</p>
<ol>
<li>动态sql<br>if<br>choose (when, otherwise)<br>trim (where, set)<br>foreach<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findActiveBlogLike&quot;</div><div class="line">     resultType=&quot;Blog&quot;&gt;</div><div class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’ </div><div class="line">  &lt;if test=&quot;title != null&quot;&gt;</div><div class="line">    AND title like #&#123;title&#125;</div><div class="line">  &lt;/if&gt;</div><div class="line">  &lt;if test=&quot;author != null and author.name != null&quot;&gt;</div><div class="line">    AND author_name like #&#123;author.name&#125;</div><div class="line">  &lt;/if&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findActiveBlogLike&quot;</div><div class="line">     resultType=&quot;Blog&quot;&gt;</div><div class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</div><div class="line">  &lt;choose&gt;</div><div class="line">    &lt;when test=&quot;title != null&quot;&gt;</div><div class="line">      AND title like #&#123;title&#125;</div><div class="line">    &lt;/when&gt;</div><div class="line">    &lt;when test=&quot;author != null and author.name != null&quot;&gt;</div><div class="line">      AND author_name like #&#123;author.name&#125;</div><div class="line">    &lt;/when&gt;</div><div class="line">    &lt;otherwise&gt;</div><div class="line">      AND featured = 1</div><div class="line">    &lt;/otherwise&gt;</div><div class="line">  &lt;/choose&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findActiveBlogLike&quot;</div><div class="line">     resultType=&quot;Blog&quot;&gt;</div><div class="line">  SELECT * FROM BLOG </div><div class="line">  &lt;where&gt; </div><div class="line">    &lt;if test=&quot;state != null&quot;&gt;</div><div class="line">         state = #&#123;state&#125;</div><div class="line">    &lt;/if&gt; </div><div class="line">    &lt;if test=&quot;title != null&quot;&gt;</div><div class="line">        AND title like #&#123;title&#125;</div><div class="line">    &lt;/if&gt;</div><div class="line">    &lt;if test=&quot;author != null and author.name != null&quot;&gt;</div><div class="line">        AND author_name like #&#123;author.name&#125;</div><div class="line">    &lt;/if&gt;</div><div class="line">  &lt;/where&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure>
<p>bind 元素可以从 OGNL 表达式中创建一个变量并将其绑定到上下文。比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;selectBlogsLike&quot; resultType=&quot;Blog&quot;&gt;</div><div class="line">  &lt;bind name=&quot;pattern&quot; value=&quot;&apos;%&apos; + _parameter.getTitle() + &apos;%&apos;&quot; /&gt;</div><div class="line">  SELECT * FROM BLOG</div><div class="line">  WHERE title LIKE #&#123;pattern&#125;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure></p>
<p>4.SQL语句构建器类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">private String selectPersonSql() &#123;</div><div class="line">  return new SQL() &#123;&#123;</div><div class="line">    SELECT(&quot;P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME&quot;);</div><div class="line">    SELECT(&quot;P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON&quot;);</div><div class="line">    FROM(&quot;PERSON P&quot;);</div><div class="line">    FROM(&quot;ACCOUNT A&quot;);</div><div class="line">    INNER_JOIN(&quot;DEPARTMENT D on D.ID = P.DEPARTMENT_ID&quot;);</div><div class="line">    INNER_JOIN(&quot;COMPANY C on D.COMPANY_ID = C.ID&quot;);</div><div class="line">    WHERE(&quot;P.ID = A.ID&quot;);</div><div class="line">    WHERE(&quot;P.FIRST_NAME like ?&quot;);</div><div class="line">    OR();</div><div class="line">    WHERE(&quot;P.LAST_NAME like ?&quot;);</div><div class="line">    GROUP_BY(&quot;P.ID&quot;);</div><div class="line">    HAVING(&quot;P.LAST_NAME like ?&quot;);</div><div class="line">    OR();</div><div class="line">    HAVING(&quot;P.FIRST_NAME like ?&quot;);</div><div class="line">    ORDER_BY(&quot;P.ID&quot;);</div><div class="line">    ORDER_BY(&quot;P.FULL_NAME&quot;);</div><div class="line">  &#125;&#125;.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5.logging 日志</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MyBatis&lt;br&gt;
    
    </summary>
    
      <category term="MyBatis" scheme="http://yoursite.com/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Java中OutOfMemoryError</title>
    <link href="http://yoursite.com/2015/12/31/Java%E4%B8%ADOutOfMemoryError/"/>
    <id>http://yoursite.com/2015/12/31/Java中OutOfMemoryError/</id>
    <published>2015-12-30T16:30:12.000Z</published>
    <updated>2015-12-30T16:36:49.549Z</updated>
    
    <content type="html"><![CDATA[<p>OutOfMemoryError<br><a id="more"></a><br>相信有一定java开发经验的人或多或少都会遇到OutOfMemoryError的问题，这个问题曾困扰了我很长时间，随着解决各类问题经验的积累以及对问题根源的探索，终于有了一个比较深入的认识。<br>在解决java内存溢出问题之前，需要对jvm（java虚拟机）的内存管理有一定的认识。jvm管理的内存大致包括三种不同类型的内存区域：Permanent Generation space（永久保存区域）、Heap space(堆区域)、Java Stacks(Java栈）。其中永久保存区域主要存放Class（类）和Meta的信息，Class第一次被Load的时候被放入PermGen space区域，Class需要存储的内容主要包括方法和静态属性。堆区域用来存放Class的实例（即对象），对象需要存储的内容主要是非静态属性。每次用new创建一个对象实例后，对象实例存储在堆区域中，这部分空间也被jvm的垃圾回收机制管理。而Java栈跟大多数编程语言包括汇编语言的栈功能相似，主要基本类型变量以及方法的输入输出参数。Java程序的每个线程中都有一个独立的堆栈。容易发生内存溢出问题的内存空间包括：Permanent Generation space和Heap space。</p>
<p>第一种OutOfMemoryError： PermGen space<br>发生这种问题的原意是程序中使用了大量的jar或class，使java虚拟机装载类的空间不够，与Permanent Generation space有关。解决这类问题有以下两种办法：</p>
<ol>
<li>增加java虚拟机中的XX:PermSize和XX:MaxPermSize参数的大小，其中XX:PermSize是初始永久保存区域大小，XX:MaxPermSize是最大永久保存区域大小。如针对tomcat6.0，在catalina.sh 或catalina.bat文件中一系列环境变量名说明结束处（大约在70行左右） 增加一行：<br>JAVA_OPTS=” -XX:PermSize=64M -XX:MaxPermSize=128m”<br>如果是windows服务器还可以在系统环境变量中设置。感觉用tomcat发布sprint+struts+hibernate架构的程序时很容易发生这种内存溢出错误。使用上述方法，我成功解决了部署ssh项目的tomcat服务器经常宕机的问题。</li>
<li>清理应用程序中web-inf/lib下的jar，如果tomcat部署了多个应用，很多应用都使用了相同的jar，可以将共同的jar移到tomcat共同的lib下，减少类的重复加载。这种方法是网上部分人推荐的，我没试过，但感觉减少不了太大的空间，最靠谱的还是第一种方法。</li>
</ol>
<p>第二种OutOfMemoryError：  Java heap space<br>发生这种问题的原因是java虚拟机创建的对象太多，在进行垃圾回收之间，虚拟机分配的到堆内存空间已经用满了，与Heap space有关。解决这类问题有两种思路：</p>
<ol>
<li>检查程序，看是否有死循环或不必要地重复创建大量对象。找到原因后，修改程序和算法。<br>我以前写一个使用K-Means文本聚类算法对几万条文本记录（每条记录的特征向量大约10来个）进行文本聚类时，由于程序细节上有问题，就导致了Java heap space的内存溢出问题，后来通过修改程序得到了解决。</li>
<li>增加Java虚拟机中Xms（初始堆大小）和Xmx（最大堆大小）参数的大小。如：set JAVA_OPTS= -Xms256m -Xmx1024m</li>
<li><strong>我遇到的问题是是由于在资源上读取一个文件，将其转换成对象，导致溢出，所以要设置tomact内存的大小.。在eclipse里面设置。debug as -&gt; debug configurations -&gt;tomact(项目部署的tomact) VM arguments -&gt;添加-Xms256m -Xmx1024m</strong></li>
</ol>
<p>第三种OutOfMemoryError：unable to create new native thread<br>这种错误在Java线程个数很多的情况下容易发生，我暂时还没遇到过，发生原意和解决办法可以参考：<a href="http://hi.baidu.com/hexiong/blog/item/16dc9e518fb10c2542a75b3c.html" target="_blank" rel="external">http://hi.baidu.com/hexiong/blog/item/16dc9e518fb10c2542a75b3c.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OutOfMemoryError&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
  </entry>
  
  <entry>
    <title>Pressure</title>
    <link href="http://yoursite.com/2015/12/31/Pressure/"/>
    <id>http://yoursite.com/2015/12/31/Pressure/</id>
    <published>2015-12-30T16:26:38.000Z</published>
    <updated>2015-12-30T16:28:06.439Z</updated>
    
    <content type="html"><![CDATA[<p>有种无力感。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有种无力感。&lt;/p&gt;

    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>simpleEmail</title>
    <link href="http://yoursite.com/2015/12/09/simpleEmail/"/>
    <id>http://yoursite.com/2015/12/09/simpleEmail/</id>
    <published>2015-12-09T11:36:02.000Z</published>
    <updated>2015-12-09T15:37:51.439Z</updated>
    
    <content type="html"><![CDATA[<p>simpleEmail实现邮件发送<br><a id="more"></a><br>需要的包<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">commons-email-<span class="number">1.4</span></div><div class="line">mail</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.mail;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> 吕云鹏</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MailService</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 发送邮件</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@param</span> from</div><div class="line">	 *            发件人</div><div class="line">	 * <span class="doctag">@param</span> to</div><div class="line">	 *            收件人</div><div class="line">	 * <span class="doctag">@param</span> title</div><div class="line">	 *            标题</div><div class="line">	 * <span class="doctag">@param</span> msg</div><div class="line">	 *            正文</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">(String from, String to, String title, String msg)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.mail;</div><div class="line"><span class="keyword">import</span> org.apache.commons.mail.EmailException;</div><div class="line"><span class="keyword">import</span> org.apache.commons.mail.SimpleEmail;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> 吕云鹏</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailServiceImpl</span> <span class="keyword">implements</span> <span class="title">MailService</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String host = <span class="string">"smtp.163.com"</span>;</div><div class="line">	<span class="keyword">private</span> String username = <span class="string">"****"</span>;</div><div class="line">	<span class="keyword">private</span> String password = <span class="string">"****"</span>;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">(String from, String to, String title, String msg)</span></span></div><div class="line">			<span class="keyword">throws</span> EmailException &#123;</div><div class="line">		SimpleEmail email = <span class="keyword">new</span> SimpleEmail();</div><div class="line">		email.setHostName(host); <span class="comment">// 设置邮件服务</span></div><div class="line">		email.setAuthentication(username, password);<span class="comment">// 登陆邮件服务</span></div><div class="line">		email.setCharset(<span class="string">"UTF-8"</span>);</div><div class="line">		<span class="comment">//email.setFrom(from, "ibm_test");</span></div><div class="line">		email.setFrom(from);</div><div class="line">		email.addTo(to);</div><div class="line">		email.setSubject(title);<span class="comment">// 设置标题</span></div><div class="line">		email.setMsg(msg);<span class="comment">// 设置正文</span></div><div class="line">		email.send();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		MailServiceImpl impl = <span class="keyword">new</span> MailServiceImpl();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			impl.sendMail(<span class="string">"***"</span>, <span class="string">"***"</span>, <span class="string">"about workflow"</span>, <span class="string">"请完成工作任务"</span>);</div><div class="line">			System.out.println(<span class="string">"邮件发送成功"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (EmailException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;simpleEmail实现邮件发送&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="邮件服务" scheme="http://yoursite.com/tags/%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>数据库SQL优化大总结之百万级数据库优化方案</title>
    <link href="http://yoursite.com/2015/11/30/%E6%95%B0%E6%8D%AE%E5%BA%93SQL%E4%BC%98%E5%8C%96%E5%A4%A7%E6%80%BB%E7%BB%93%E4%B9%8B%E7%99%BE%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2015/11/30/数据库SQL优化大总结之百万级数据库优化方案/</id>
    <published>2015-11-30T15:52:50.000Z</published>
    <updated>2015-12-09T15:38:37.071Z</updated>
    
    <content type="html"><![CDATA[<p>数据库SQL优化大总结之百万级数据库优化方案<br><a id="more"></a><br>1.对查询进行优化，要尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p>
<p>2.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select id from t where num is null</div></pre></td></tr></table></figure></p>
<p>最好不要给数据库留NULL，尽可能的使用 NOT NULL填充数据库.</p>
<p>备注、描述、评论之类的可以设置为 NULL，其他的，最好不要使用NULL。</p>
<p>不要以为 NULL 不需要空间，比如：char(100) 型，在字段建立时，空间就固定了， 不管是否插入值（NULL也包含在内），都是占用 100个字符的空间的，如果是varchar这样的变长字段， null 不占用空间。</p>
<p>可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select id from t where num = 0</div></pre></td></tr></table></figure></p>
<p>3.应尽量避免在 where 子句中使用 != 或 &lt;&gt; 操作符，否则将引擎放弃使用索引而进行全表扫描。</p>
<p>4.应尽量避免在 where 子句中使用 or 来连接条件，如果一个字段有索引，一个字段没有索引，将导致引擎放弃使用索引而进行全表扫描，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select id from t where num=10 or Name = &apos;admin&apos;</div></pre></td></tr></table></figure></p>
<p>可以这样查询：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select id from t where num = 10</div><div class="line">union all</div><div class="line">select id from t where Name = &apos;admin&apos;</div></pre></td></tr></table></figure></p>
<p>5.in 和 not in 也要慎用，否则会导致全表扫描，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select id from t where num in(1,2,3)</div></pre></td></tr></table></figure></p>
<p>对于连续的数值，能用 between 就不要用 in 了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select id from t where num between 1 and 3</div></pre></td></tr></table></figure></p>
<p>很多时候用 exists 代替 in 是一个好的选择：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select num from a where num in(select num from b)</div></pre></td></tr></table></figure></p>
<p>用下面的语句替换：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select num from a where exists(select 1 from b where num=a.num)</div></pre></td></tr></table></figure></p>
<p>6.下面的查询也将导致全表扫描：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select id from t where name like ‘%abc%’</div></pre></td></tr></table></figure></p>
<p>若要提高效率，可以考虑全文检索。</p>
<p>7.如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select id from t where num = @num</div></pre></td></tr></table></figure></p>
<p>可以改为强制查询使用索引：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select id from t with(index(索引名)) where num = @num</div></pre></td></tr></table></figure></p>
<p>.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select id from t where num/2 = 100</div></pre></td></tr></table></figure></p>
<p>应改为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select id from t where num = 100*2</div></pre></td></tr></table></figure></p>
<p>9.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">select id from t where substring(name,1,3) = ’abc’       -–name以abc开头的id</div><div class="line">select id from t where datediff(day,createdate,’2005-11-30′) = 0    -–‘2005-11-30’    --生成的id</div></pre></td></tr></table></figure></p>
<p>应改为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">select id from t where name like &apos;abc%&apos;</div><div class="line">select id from t where createdate &gt;= &apos;2005-11-30&apos; and createdate &lt; &apos;2005-12-1&apos;</div></pre></td></tr></table></figure></p>
<p>10.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p>
<p>11.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p>
<p>12.不要写一些没有意义的查询，如需要生成一个空表结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select col1,col2 into #t from t where 1=0</div></pre></td></tr></table></figure></p>
<p>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create table #t(…)</div></pre></td></tr></table></figure></p>
<p>13.Update 语句，如果只更改1、2个字段，不要Update全部字段，否则频繁调用会引起明显的性能消耗，同时带来大量日志。</p>
<p>14.对于多张大数据量（这里几百条就算大了）的表JOIN，要先分页再JOIN，否则逻辑读会很高，性能很差。</p>
<p>15.这样不带任何条件的count会引起全表扫描，并且没有任何业务意义，是一定要杜绝的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select count(*) from table；</div></pre></td></tr></table></figure></p>
<p>16.索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。</p>
<p>17.应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</p>
<p>18.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连 接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p>
<p>19.尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p>
<p>20.任何地方都不要使用 select <em> from t ，用具体的字段列表代替“</em>”，不要返回用不到的任何字段。</p>
<p>21.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</p>
<p>22.避免频繁创建和删除临时表，以减少系统表资源的消耗。临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件， 最好使用导出表。</p>
<p>23.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p>
<p>24.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p>
<p>25.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p>
<p>26.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p>
<p>27.与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p>
<p>28.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。</p>
<p>29.尽量避免大事务操作，提高系统并发能力。</p>
<p>30.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p>
<p>实际案例分析：拆分大的 DELETE 或INSERT 语句，批量提交SQL语句<br>    　　如果你需要在一个在线的网站上去执行一个大的 DELETE 或 INSERT         查询，你需要非常小心，要避免你的操作让你的整个网站停止相应。因为这两个操作是会锁表的，表一锁住了，别的操作都进不来了。<br>    　　Apache 会有很多的子进程或线程。所以，其工作起来相当有效率，而我们的服务器也不希望有太多的子进程，线程和数据库链接，这是极大的占服务器资源的事情，尤其是内存。<br>    　　如果你把你的表锁上一段时间，比如30秒钟，那么对于一个有很高访问量的站点来说，这30秒所积累的访问进程/线程，数据库链接，打开的文件数，可能不仅仅会让你的WEB服务崩溃，还可能会让你的整台服务器马上挂了。所以，如果你有一个大的处理，你一定把其拆分，使用 LIMIT oracle(rownum),sqlserver(top)条件是一个好的方法。<br>    　　下面是一个mysql示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">while(1)&#123;</div><div class="line"> 　　//每次只做1000条</div><div class="line">　　 mysql_query(“delete from logs where log_date &lt;= ’2012-11-01’ limit 1000”);</div><div class="line"> 　　if(mysql_affected_rows() == 0)&#123;</div><div class="line">　　 　　//删除完成，退出！</div><div class="line">　　 　　break；</div><div class="line">　　&#125;</div><div class="line">//每次暂停一段时间，释放表让其他进程/线程访问。</div><div class="line">usleep(50000)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据库SQL优化大总结之百万级数据库优化方案&lt;br&gt;
    
    </summary>
    
      <category term="SQL" scheme="http://yoursite.com/categories/SQL/"/>
    
    
      <category term="SQL优化" scheme="http://yoursite.com/tags/SQL%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Windows下安装scikit-learn</title>
    <link href="http://yoursite.com/2015/11/27/Windows%E4%B8%8B%E5%AE%89%E8%A3%85scikit-learn/"/>
    <id>http://yoursite.com/2015/11/27/Windows下安装scikit-learn/</id>
    <published>2015-11-27T12:39:32.000Z</published>
    <updated>2016-09-22T16:23:37.406Z</updated>
    
    <content type="html"><![CDATA[<p>###Windows下安装scikit-learn<br><a id="more"></a></p>
<hr>
<p>准备工作</p>
<ul>
<li>Python (&gt;= 2.6 or &gt;= 3.3),</li>
<li>Numpy (&gt;= 1.6.1)</li>
<li>Scipy (&gt;= 0.9),</li>
<li>Matplotlib（可选）</li>
</ul>
<hr>
<p>NumPy</p>
<p>NumPy系统是Python的一种开源的数值计算扩展。这种工具可用来存储和处理大型矩阵，比Python自身的嵌套列表（nested list structure)结构要高效的多（该结构也可以用来表示矩阵（matrix））。</p>
<p>Scipy</p>
<p>SciPy是一款方便、易于使用、专为科学和工程设计的Python工具包.它包括统计,优化,整合,线性代数模块,傅里叶变换,信号和图像处理,常微分方程求解器等等.</p>
<p>Matplotlib</p>
<p>matplotlib 是python最著名的绘图库，它提供了一整套和matlab相似的命令API，十分适合交互式地进行制图。而且也可以方便地将它作为绘图控件，嵌入GUI应用程序中。</p>
<hr>
<p>下载地址</p>
<p>Python：<a href="https://www.python.org/downloads/" target="_blank" rel="external">https://www.python.org/downloads/</a></p>
<p>Numpy：<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy" target="_blank" rel="external">http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy</a></p>
<p>Scipy：<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#scipy" target="_blank" rel="external">http://www.lfd.uci.edu/~gohlke/pythonlibs/#scipy</a></p>
<p>Matplotlib：<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#matplotlib" target="_blank" rel="external">http://www.lfd.uci.edu/~gohlke/pythonlibs/#matplotlib</a></p>
<p>scikit-learn：<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#scikit-learn" target="_blank" rel="external">http://www.lfd.uci.edu/~gohlke/pythonlibs/#scikit-learn</a></p>
<hr>
<p>安装步骤：</p>
<ol>
<li>安装python3.5,注意配置环境变量。</li>
<li>安装easy_install，安装pip（python官网下载）</li>
</ol>
<pre><code>python ez_setup.py
python setup.py install
</code></pre><ol>
<li><p>安装numpy,scipy,matployib,scikit-learn.例如</p>
<pre><code>pip install .\numpy-1.11.1-cp35-cp35m-win_amd64.whl         #安装numpy
pip install .\scipy-0.18.0-cp35-cp35m-win_amd64.whl         #安装scipy
pip install .\matplotlib-2.0.0b3-cp35-cp35m-win_amd64.whl         #安装matplotlib
pip install .\scikit_learn-0.17.1-cp35-cp35m-win_amd64.whl         #安装scikit-learn
</code></pre></li>
</ol>
<hr>
<p>测试：</p>
<pre><code>python
&gt;&gt;&gt; from sklearn import datasets
&gt;&gt;&gt; iris = datasets.load_iris()
&gt;&gt;&gt; digits = datasets.load_digits()
&gt;&gt;&gt; print(digits.data)  
[[  0.   0.   5. ...,   0.   0.   0.]
  [  0.   0.   0. ...,  10.   0.   0.]
 [  0.   0.   0. ...,  16.   9.   0.]
 ...,
 [  0.   0.   1. ...,   6.   0.   0.]
 [  0.   0.   2. ...,  12.   0.   0.]
 [  0.   0.  10. ...,  12.   1.   0.]]

&gt;&gt;&gt; digits.target
array([0, 1, 2, ..., 8, 9, 8])
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###Windows下安装scikit-learn&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="scikit-learn" scheme="http://yoursite.com/tags/scikit-learn/"/>
    
  </entry>
  
  <entry>
    <title>quartz in web</title>
    <link href="http://yoursite.com/2015/11/27/web/"/>
    <id>http://yoursite.com/2015/11/27/web/</id>
    <published>2015-11-27T12:39:32.000Z</published>
    <updated>2015-12-09T15:38:09.300Z</updated>
    
    <content type="html"><![CDATA[<p>##quartz在web的配置<br><a id="more"></a><br><strong>1. jar包</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">commons-collections.jar</div><div class="line">commons-logging-<span class="number">1.0</span>.4.jar</div><div class="line">log4j-<span class="number">1.2</span>.15.jar</div><div class="line">quartz-all-<span class="number">1.6</span>.1.jar</div><div class="line">slf4j-api-<span class="number">1.5</span>.6.jar</div><div class="line">slf4j-log4j12-<span class="number">1.5</span>.6.jar</div></pre></td></tr></table></figure>
<p><strong>2. 配置web.xml</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span>    </div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span> Listener.QuartzSchedulerListener <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>备注：Listener.QuartzSchedulerListener实现 ServletContextListene接口。并实现继承的方法。</p>
<p><strong>3. java方法（1、SchedulerTask ，2、SchedulerJob，3、QuartzSchedulerListener  ）</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.quartz.Job;</div><div class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</div><div class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzJob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext arg0)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</div><div class="line">		System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).format(<span class="keyword">new</span> Date())+ <span class="string">"★★★★★★★★★★★"</span>);  </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@Description</span>: </div><div class="line"> *</div><div class="line"> * <span class="doctag">@Title</span>: QuartzManager.java</div><div class="line"> * <span class="doctag">@Package</span> com.joyce.quartz</div><div class="line"> * <span class="doctag">@Copyright</span>: Copyright (c) 2014</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Comsys-LZP</div><div class="line"> * <span class="doctag">@date</span> 2014-6-26 下午03:15:52</div><div class="line"> * <span class="doctag">@version</span> V2.0</div><div class="line"> */</div><div class="line"><span class="keyword">package</span> com.joyce.quartz;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.quartz.CronTrigger;</div><div class="line"><span class="keyword">import</span> org.quartz.JobDetail;</div><div class="line"><span class="keyword">import</span> org.quartz.Scheduler;</div><div class="line"><span class="keyword">import</span> org.quartz.SchedulerFactory;</div><div class="line"><span class="keyword">import</span> org.quartz.impl.StdSchedulerFactory;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@Description</span>: 定时任务管理类</div><div class="line"> * </div><div class="line"> * <span class="doctag">@ClassName</span>: QuartzManager</div><div class="line"> * <span class="doctag">@Copyright</span>: Copyright (c) 2014</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> Comsys-LZP</div><div class="line"> * <span class="doctag">@date</span> 2014-6-26 下午03:15:52</div><div class="line"> * <span class="doctag">@version</span> V2.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzManager</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SchedulerFactory gSchedulerFactory = <span class="keyword">new</span> StdSchedulerFactory();</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String JOB_GROUP_NAME = <span class="string">"EXTJWEB_JOBGROUP_NAME"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String TRIGGER_GROUP_NAME = <span class="string">"EXTJWEB_TRIGGERGROUP_NAME"</span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@Description</span>: 添加一个定时任务，使用默认的任务组名，触发器名，触发器组名</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@param</span> jobName</div><div class="line">	 *            任务名</div><div class="line">	 * <span class="doctag">@param</span> cls</div><div class="line">	 *            任务</div><div class="line">	 * <span class="doctag">@param</span> time</div><div class="line">	 *            时间设置，参考quartz说明文档</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@Title</span>: QuartzManager.java</div><div class="line">	 * <span class="doctag">@Copyright</span>: Copyright (c) 2014</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@author</span> Comsys-LZP</div><div class="line">	 * <span class="doctag">@date</span> 2014-6-26 下午03:47:44</div><div class="line">	 * <span class="doctag">@version</span> V2.0</div><div class="line">	 */</div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addJob</span><span class="params">(String jobName, Class cls, String time)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Scheduler sched = gSchedulerFactory.getScheduler();</div><div class="line">			JobDetail jobDetail = <span class="keyword">new</span> JobDetail(jobName, JOB_GROUP_NAME, cls);<span class="comment">// 任务名，任务组，任务执行类</span></div><div class="line">			<span class="comment">// 触发器</span></div><div class="line">			CronTrigger trigger = <span class="keyword">new</span> CronTrigger(jobName, TRIGGER_GROUP_NAME);<span class="comment">// 触发器名,触发器组</span></div><div class="line">			trigger.setCronExpression(time);<span class="comment">// 触发器时间设定</span></div><div class="line">			sched.scheduleJob(jobDetail, trigger);</div><div class="line">			<span class="comment">// 启动</span></div><div class="line">			<span class="keyword">if</span> (!sched.isShutdown()) &#123;</div><div class="line">				sched.start();</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@Description</span>: 添加一个定时任务</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@param</span> jobName</div><div class="line">	 *            任务名</div><div class="line">	 * <span class="doctag">@param</span> jobGroupName</div><div class="line">	 *            任务组名</div><div class="line">	 * <span class="doctag">@param</span> triggerName</div><div class="line">	 *            触发器名</div><div class="line">	 * <span class="doctag">@param</span> triggerGroupName</div><div class="line">	 *            触发器组名</div><div class="line">	 * <span class="doctag">@param</span> jobClass</div><div class="line">	 *            任务</div><div class="line">	 * <span class="doctag">@param</span> time</div><div class="line">	 *            时间设置，参考quartz说明文档</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@Title</span>: QuartzManager.java</div><div class="line">	 * <span class="doctag">@Copyright</span>: Copyright (c) 2014</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@author</span> Comsys-LZP</div><div class="line">	 * <span class="doctag">@date</span> 2014-6-26 下午03:48:15</div><div class="line">	 * <span class="doctag">@version</span> V2.0</div><div class="line">	 */</div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addJob</span><span class="params">(String jobName, String jobGroupName,</span></span></div><div class="line">			String triggerName, String triggerGroupName, Class jobClass,</div><div class="line">			String time) &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Scheduler sched = gSchedulerFactory.getScheduler();</div><div class="line">			JobDetail jobDetail = <span class="keyword">new</span> JobDetail(jobName, jobGroupName, jobClass);<span class="comment">// 任务名，任务组，任务执行类</span></div><div class="line">			<span class="comment">// 触发器</span></div><div class="line">			CronTrigger trigger = <span class="keyword">new</span> CronTrigger(triggerName, triggerGroupName);<span class="comment">// 触发器名,触发器组</span></div><div class="line">			trigger.setCronExpression(time);<span class="comment">// 触发器时间设定</span></div><div class="line">			sched.scheduleJob(jobDetail, trigger);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@Description</span>: 修改一个任务的触发时间(使用默认的任务组名，触发器名，触发器组名)</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@param</span> jobName</div><div class="line">	 * <span class="doctag">@param</span> time</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@Title</span>: QuartzManager.java</div><div class="line">	 * <span class="doctag">@Copyright</span>: Copyright (c) 2014</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@author</span> Comsys-LZP</div><div class="line">	 * <span class="doctag">@date</span> 2014-6-26 下午03:49:21</div><div class="line">	 * <span class="doctag">@version</span> V2.0</div><div class="line">	 */</div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modifyJobTime</span><span class="params">(String jobName, String time)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Scheduler sched = gSchedulerFactory.getScheduler();</div><div class="line">			CronTrigger trigger = (CronTrigger) sched.getTrigger(jobName,TRIGGER_GROUP_NAME);</div><div class="line">			<span class="keyword">if</span> (trigger == <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">			String oldTime = trigger.getCronExpression();</div><div class="line">			<span class="keyword">if</span> (!oldTime.equalsIgnoreCase(time)) &#123;</div><div class="line">				JobDetail jobDetail = sched.getJobDetail(jobName,JOB_GROUP_NAME);</div><div class="line">				Class objJobClass = jobDetail.getJobClass();</div><div class="line">				removeJob(jobName);</div><div class="line">				addJob(jobName, objJobClass, time);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@Description</span>: 修改一个任务的触发时间</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@param</span> triggerName</div><div class="line">	 * <span class="doctag">@param</span> triggerGroupName</div><div class="line">	 * <span class="doctag">@param</span> time</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@Title</span>: QuartzManager.java</div><div class="line">	 * <span class="doctag">@Copyright</span>: Copyright (c) 2014</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@author</span> Comsys-LZP</div><div class="line">	 * <span class="doctag">@date</span> 2014-6-26 下午03:49:37</div><div class="line">	 * <span class="doctag">@version</span> V2.0</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modifyJobTime</span><span class="params">(String triggerName,</span></span></div><div class="line">			String triggerGroupName, String time) &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Scheduler sched = gSchedulerFactory.getScheduler();</div><div class="line">			CronTrigger trigger = (CronTrigger) sched.getTrigger(triggerName,triggerGroupName);</div><div class="line">			<span class="keyword">if</span> (trigger == <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">			String oldTime = trigger.getCronExpression();</div><div class="line">			<span class="keyword">if</span> (!oldTime.equalsIgnoreCase(time)) &#123;</div><div class="line">				CronTrigger ct = (CronTrigger) trigger;</div><div class="line">				<span class="comment">// 修改时间</span></div><div class="line">				ct.setCronExpression(time);</div><div class="line">				<span class="comment">// 重启触发器</span></div><div class="line">				sched.resumeTrigger(triggerName, triggerGroupName);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@Description</span>: 移除一个任务(使用默认的任务组名，触发器名，触发器组名)</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@param</span> jobName</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@Title</span>: QuartzManager.java</div><div class="line">	 * <span class="doctag">@Copyright</span>: Copyright (c) 2014</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@author</span> Comsys-LZP</div><div class="line">	 * <span class="doctag">@date</span> 2014-6-26 下午03:49:51</div><div class="line">	 * <span class="doctag">@version</span> V2.0</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeJob</span><span class="params">(String jobName)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Scheduler sched = gSchedulerFactory.getScheduler();</div><div class="line">			sched.pauseTrigger(jobName, TRIGGER_GROUP_NAME);<span class="comment">// 停止触发器</span></div><div class="line">			sched.unscheduleJob(jobName, TRIGGER_GROUP_NAME);<span class="comment">// 移除触发器</span></div><div class="line">			sched.deleteJob(jobName, JOB_GROUP_NAME);<span class="comment">// 删除任务</span></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@Description</span>: 移除一个任务</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@param</span> jobName</div><div class="line">	 * <span class="doctag">@param</span> jobGroupName</div><div class="line">	 * <span class="doctag">@param</span> triggerName</div><div class="line">	 * <span class="doctag">@param</span> triggerGroupName</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@Title</span>: QuartzManager.java</div><div class="line">	 * <span class="doctag">@Copyright</span>: Copyright (c) 2014</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@author</span> Comsys-LZP</div><div class="line">	 * <span class="doctag">@date</span> 2014-6-26 下午03:50:01</div><div class="line">	 * <span class="doctag">@version</span> V2.0</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeJob</span><span class="params">(String jobName, String jobGroupName,</span></span></div><div class="line">			String triggerName, String triggerGroupName) &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Scheduler sched = gSchedulerFactory.getScheduler();</div><div class="line">			sched.pauseTrigger(triggerName, triggerGroupName);<span class="comment">// 停止触发器</span></div><div class="line">			sched.unscheduleJob(triggerName, triggerGroupName);<span class="comment">// 移除触发器</span></div><div class="line">			sched.deleteJob(jobName, jobGroupName);<span class="comment">// 删除任务</span></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@Description</span>:启动所有定时任务</div><div class="line">	 * </div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@Title</span>: QuartzManager.java</div><div class="line">	 * <span class="doctag">@Copyright</span>: Copyright (c) 2014</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@author</span> Comsys-LZP</div><div class="line">	 * <span class="doctag">@date</span> 2014-6-26 下午03:50:18</div><div class="line">	 * <span class="doctag">@version</span> V2.0</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startJobs</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Scheduler sched = gSchedulerFactory.getScheduler();</div><div class="line">			sched.start();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@Description</span>:关闭所有定时任务</div><div class="line">	 * </div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@Title</span>: QuartzManager.java</div><div class="line">	 * <span class="doctag">@Copyright</span>: Copyright (c) 2014</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@author</span> Comsys-LZP</div><div class="line">	 * <span class="doctag">@date</span> 2014-6-26 下午03:50:26</div><div class="line">	 * <span class="doctag">@version</span> V2.0</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shutdownJobs</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Scheduler sched = gSchedulerFactory.getScheduler();</div><div class="line">			<span class="keyword">if</span> (!sched.isShutdown()) &#123;</div><div class="line">				sched.shutdown();</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.text.ParseException;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</div><div class="line"><span class="keyword">import</span> org.quartz.CronTrigger;</div><div class="line"><span class="keyword">import</span> org.quartz.JobDetail;</div><div class="line"><span class="keyword">import</span> org.quartz.Scheduler;</div><div class="line"><span class="keyword">import</span> org.quartz.SchedulerException;</div><div class="line"><span class="keyword">import</span> org.quartz.impl.StdSchedulerFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> Quartz.SchedulerJob;</div><div class="line"><span class="keyword">import</span> Quartz.SchedulerTask;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzSchedulerListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span></span>&#123; </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123; </div><div class="line">	<span class="comment">//銷毀任務</span></div><div class="line">	<span class="comment">//調用QuartzManager裡面的方法（一種辦法）</span></div><div class="line">	 &#125; </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123; </div><div class="line">	<span class="comment">//初始化任務</span></div><div class="line">	</div><div class="line">	 &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##quartz在web的配置&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
      <category term="quartz" scheme="http://yoursite.com/tags/quartz/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Calendar</title>
    <link href="http://yoursite.com/2015/11/24/Calendar/"/>
    <id>http://yoursite.com/2015/11/24/Calendar/</id>
    <published>2015-11-24T15:13:04.000Z</published>
    <updated>2015-12-09T15:36:59.600Z</updated>
    
    <content type="html"><![CDATA[<p>java中Calendar的使用方法<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.outofmemory.codes.Date;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Calendar;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarDemo</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">     Calendar calendar=Calendar.getInstance();</div><div class="line">     calendar.setTime(<span class="keyword">new</span> Date());</div><div class="line">     System.out.println(<span class="string">"现在时间是："</span>+<span class="keyword">new</span> Date());</div><div class="line">     String year=String.valueOf(calendar.get(Calendar.YEAR));</div><div class="line">     String month=String.valueOf(calendar.get(Calendar.MONTH)+<span class="number">1</span>);</div><div class="line">     String day=String.valueOf(calendar.get(Calendar.DAY_OF_MONTH));</div><div class="line">     String week=String.valueOf(calendar.get(Calendar.DAY_OF_WEEK)-<span class="number">1</span>);</div><div class="line">     System.out.println(<span class="string">"现在时间是："</span>+year+<span class="string">"年"</span>+month+<span class="string">"月"</span>+day+<span class="string">"日，星期"</span>+week);</div><div class="line">     <span class="keyword">long</span> year2009=calendar.getTimeInMillis();</div><div class="line">     calendar.set(<span class="number">1989</span>,<span class="number">9</span>,<span class="number">26</span>);<span class="comment">//这里与真实的月份之间相差1</span></div><div class="line">     <span class="keyword">long</span> year1989=calendar.getTimeInMillis();</div><div class="line">     <span class="keyword">long</span> days=(year2009-year1989)/(<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>);</div><div class="line">     System.out.println(<span class="string">"今天和1989年10月26日相隔"</span>+days+<span class="string">"天，"</span>+<span class="string">"也就是说我在这个美丽的星球上已经幸福的生活了"</span>+days+<span class="string">"天。"</span>);</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Calendar类的静态方法getInstance()可以初始化一个日历对象:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Calendar now = Calendar.getInstance();</div></pre></td></tr></table></figure></p>
<p>可以使用下面三个方法把日历定到任何一个时间：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">set(<span class="keyword">int</span> year ,<span class="keyword">int</span> month,<span class="keyword">int</span> date) </div><div class="line">set(<span class="keyword">int</span> year ,<span class="keyword">int</span> month,<span class="keyword">int</span> date,<span class="keyword">int</span> hour,<span class="keyword">int</span> minute) </div><div class="line">set(<span class="keyword">int</span> year ,<span class="keyword">int</span> month,<span class="keyword">int</span> date,<span class="keyword">int</span> hour,<span class="keyword">int</span> minute,<span class="keyword">int</span> second)</div></pre></td></tr></table></figure></p>
<p>如果想获得年份、月份、小时等信息可以使用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Now.get(Calendar.Month) <span class="comment">//这样的方法 0表示一月，1表示二月</span></div><div class="line">get(Calendar.DAY_OF_MONTH)<span class="comment">//获得这个月的第几天</span></div><div class="line">get(Calendar.DAY_OF_WEEK)<span class="comment">//获得这个星期的第几天</span></div><div class="line">get(Calendar.DAY_OF_YEAR)<span class="comment">//获得这个年的第几天</span></div><div class="line">getTimeMillis()<span class="comment">//获得当前时间的毫秒表示</span></div></pre></td></tr></table></figure></p>
<p>如下是Calendar类方法简介</p>
<pre><code> abstract void add(int field, int amount) 根据日历的规则，为给定的日历字段添加或减去指定的时间量。   
 boolean after(Object when) 判断此 Calendar 表示的时间是否在指定 Object表示的时间之后，返回判断结果。 
 boolean before(Object when)  判断此 Calendar 表示的时间是否在指定 Object表示的时间之前，返回判断结果。 
 void clear() 将此 Calendar的所日历字段值和时间值（从历元至现在的毫秒偏移量）设置成未定义。 
 void clear(int field)  将此 Calendar的给定日历字段值和时间值（从历元至现在的毫秒偏移量）设置成未定义。
 Object clone() 创建并返回此对象的一个副本。 
 int compareTo(Calendar anotherCalendar)  比较两个 Calendar对象表示的时间值（从历元至现在的毫秒偏移量）。 
 protected void complete() 填充日历字段中所有未设置的字段。
 protected abstract void computeFields() 将当前毫秒时间值 time 转换为 fields[]中的日历字段值。
 protected abstract void computeTime() 将 fields[] 中的当前日历字段值转换为毫秒时间值    time。 
 boolean equals(Object obj)  将此 Calendar 与指定 Object 比较。 
 int get(int field)返回给定日历字段的值。 
 int getActualMaximum(int field)给定此 Calendar 的时间值，返回指定日历字段可能拥有的最大值。
 int getActualMinimum(int field)给定此 Calendar 的时间值，返回指定日历字段可能拥有的最小值。 
 static Locale[] getAvailableLocales()返回所有语言环境的数组，此类的 getInstance方法可以为其返回本地化的实例。 
 String getDisplayName(int field, int style, Locale locale) 返回给定 style和locale下的日历 field 值的字符串表示形式。 
 Map&lt;String,Integer&gt; getDisplayNames(int field, int style, Locale locale) 返回给定 style 和 locale 下包含日历 field 所有名称的 Map 及其相应字段值。
int getFirstDayOfWeek()获取一星期的第一天；例如，在美国，这一天是 SUNDAY，而在法国，这一天是 MONDAY。
abstract int getGreatestMinimum(int field)返回此 Calendar实例给定日历字段的最高的最小值。 
static Calendar getInstance() 使用默认时区和语言环境获得一个日历。 
static Calendar getInstance(Locale aLocale) 使用默认时区和指定语言环境获得一个日历。 
static Calendar getInstance(TimeZone zone) 使用指定时区和默认语言环境获得一个日历。 
static Calendar getInstance(TimeZone zone, Locale aLocale)    使用指定时区和语言环境获得一个日历。
abstract int getLeastMaximum(int field) 返回此Calendar实例给定日历字段的最低的最大值。
abstract int getMaximum(int field) 返回此 Calendar 实例给定日历字段的最大值。 
int getMinimalDaysInFirstWeek()获取一年中第一个星期所需的最少天数，例如，如果定义第一个星期包含一年第一个月的第一天，则此方法将返回 1。 
 abstract int getMinimum(int field) 返回此 Calendar 实例给定日历字段的最小值。
Date getTime()返回一个表示此 Calendar 时间值（从历元至现在的毫秒偏移量）的 Date 对象。
long getTimeInMillis()返回此 Calendar 的时间值，以毫秒为单位。 
TimeZone getTimeZone()获得时区。 int hashCode()返回该此日历的哈希码。 
protected int internalGet(int field)返回给定日历字段的值。 
boolean isLenient()判断日期/时间的解释是否为宽松的。 
boolean isSet(int field) 确定给定日历字段是否已经设置了一个值，其中包括因为调用 get方法触发内部字段计算而导致已经设置该值的情况。 
abstract void roll(int field, boolean up)    在给定的时间字段上添加或减去（上/下）单个时间单元，不更改更大的字段。 
void roll(int field, int amount) 向指定日历字段添加指定（有符号的）时间量，不更改更大的字段。 
void set(int field, int value) 将给定的日历字段设置为给定值。
void set(int year, int month, int date) 设置日历字段 YEAR、MONTH 和 DAY_OF_MONTH 的值。
void set(int year, int month, int date, int hourOfDay, int minute)设置日历字段 YEAR、MONTH、DAY_OF_MONTH、HOUR_OF_DAY 和 MINUTE 的值。 
void set(int year, int month, int date, int hourOfDay, int minute, int second) 设置字段 YEAR、MONTH、DAY_OF_MONTH、HOUR、MINUTE 和    SECOND 的值。
void setFirstDayOfWeek(int value) 设置一星期的第一天是哪一天；例如，在美国，这一天是SUNDAY，而在法国，这一天是 MONDAY。 
void setLenient(boolean lenient) 指定日期/时间解释是否是宽松的。 
void setMinimalDaysInFirstWeek(int value)设置一年中第一个星期所需的最少天数，例如，如果定义第一个星期包含一年第一个月的第一天，则使用值 1 调用此方法。 
void setTime(Date date) 使用给定的 Date 设置此 Calendar 的时间。 
void setTimeInMillis(long millis) 用给定的 long 值设置此 Calendar 的当前时间值。
void setTimeZone(TimeZone value) 使用给定的时区值来设置时区。 
String toString() 返回此日历的字符串表示形式
</code></pre><h2 id="Calendar的常用方法示例"><a href="#Calendar的常用方法示例" class="headerlink" title="Calendar的常用方法示例"></a>Calendar的常用方法示例</h2><p>1、计算某一月份的最大天数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Calendar time=Calendar.getInstance(); </div><div class="line">time.clear(); </div><div class="line">time.set(Calendar.YEAR,year); </div><div class="line">time.set(Calendar.MONTH,i-<span class="number">1</span>);<span class="comment">//注意,Calendar对象默认一月为0             </span></div><div class="line"><span class="keyword">int</span> day=time.getActualMaximum(Calendar.DAY_OF_MONTH);<span class="comment">//本月份的天数</span></div></pre></td></tr></table></figure></p>
<p>注：在使用set方法之前，必须先clear一下，否则很多信息会继承自系统当前时间</p>
<p>2、Calendar和Date的转化</p>
<p>(1) Calendar转化为Date<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Calendar cal=Calendar.getInstance();</div><div class="line">Date date=cal.getTime();</div></pre></td></tr></table></figure></p>
<p>(2) Date转化为Calendar<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Date date=<span class="keyword">new</span> Date();</div><div class="line">Calendar cal=Calendar.getInstance();</div><div class="line">cal.setTime(date);</div></pre></td></tr></table></figure></p>
<p>3、格式化输出日期时间<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Date date=<span class="keyword">new</span> Date();</div><div class="line">SimpleDateFormat df=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</div><div class="line">System.out.println(df.format(date));</div></pre></td></tr></table></figure></p>
<p>4、计算一年中的第几星期</p>
<p>(1)计算某一天是一年中的第几星期<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Calendar cal=Calendar.getInstance();</div><div class="line">cal.set(Calendar.YEAR, <span class="number">2006</span>);</div><div class="line">cal.set(Calendar.MONTH, <span class="number">8</span>);</div><div class="line">cal.set(Calendar.DAY_OF_MONTH, <span class="number">3</span>);</div><div class="line"><span class="keyword">int</span> weekno=cal.get(Calendar.WEEK_OF_YEAR);</div></pre></td></tr></table></figure></p>
<p>(2)计算一年中的第几星期是几号<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SimpleDateFormat df=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</div><div class="line">Calendar cal=Calendar.getInstance();</div><div class="line">cal.set(Calendar.YEAR, <span class="number">2006</span>);</div><div class="line">cal.set(Calendar.WEEK_OF_YEAR, <span class="number">1</span>);</div><div class="line">cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);</div><div class="line">System.out.println(df.format(cal.getTime()));</div></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">2006</span>-<span class="number">01</span>-<span class="number">02</span></div></pre></td></tr></table></figure></p>
<p>5、add()和roll()的用法</p>
<p>(1) add()方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">SimpleDateFormat df=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</div><div class="line">Calendar cal=Calendar.getInstance();</div><div class="line">cal.set(Calendar.YEAR, <span class="number">2006</span>);</div><div class="line">cal.set(Calendar.MONTH, <span class="number">8</span>);</div><div class="line">cal.set(Calendar.DAY_OF_MONTH, <span class="number">3</span>);</div><div class="line">cal.add(Calendar.DATE, -<span class="number">4</span>);</div><div class="line">Date date=cal.getTime();</div><div class="line">System.out.println(df.format(date));</div><div class="line">cal.add(Calendar.DATE, <span class="number">4</span>);</div><div class="line">date=cal.getTime();</div><div class="line">System.out.println(df.format(date));</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">2006</span>-<span class="number">08</span>-<span class="number">30</span></div><div class="line"><span class="number">2006</span>-<span class="number">09</span>-<span class="number">03</span></div></pre></td></tr></table></figure></p>
<p>(2)roll方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">cal.set(Calendar.YEAR, <span class="number">2006</span>);</div><div class="line">cal.set(Calendar.MONTH, <span class="number">8</span>);</div><div class="line">cal.set(Calendar.DAY_OF_MONTH, <span class="number">3</span>);</div><div class="line">cal.roll(Calendar.DATE, -<span class="number">4</span>);</div><div class="line">date=cal.getTime();</div><div class="line">System.out.println(df.format(date));</div><div class="line">cal.roll(Calendar.DATE, <span class="number">4</span>);</div><div class="line">date=cal.getTime();</div><div class="line">System.out.println(df.format(date));</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">2006</span>-<span class="number">09</span>-<span class="number">29</span></div><div class="line"><span class="number">2006</span>-<span class="number">09</span>-<span class="number">03</span></div></pre></td></tr></table></figure></p>
<p>可见，roll()方法在本月内循环，一般使用add()方法；</p>
<p>6、计算两个任意时间中间的间隔天数</p>
<p>(1)传进Calendar对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/</div><div class="line">**计算两个时间之间相隔天数</div><div class="line"> * <span class="meta">@param</span> startday  开始时间</div><div class="line"> * <span class="meta">@param</span> endday 结束时间</div><div class="line"> * <span class="meta">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIntervalDays</span><span class="params">(Calendar startday,Calendar endday)</span></span>&#123;</div><div class="line">    <span class="comment">//确保startday在endday之前</span></div><div class="line">    <span class="keyword">if</span>(startday.after(endday))&#123;</div><div class="line">        Calendar cal=startday;</div><div class="line">        startday=endday;</div><div class="line">        endday=cal;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//分别得到两个时间的毫秒数</span></div><div class="line">    <span class="keyword">long</span> sl=startday.getTimeInMillis();</div><div class="line">    <span class="keyword">long</span> el=endday.getTimeInMillis();</div><div class="line"></div><div class="line">    <span class="keyword">long</span> ei=el-sl;    </div><div class="line">    <span class="comment">//根据毫秒数计算间隔天数</span></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)(ei/(<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>(2)传进Date对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**计算两个时间之间相隔天数</span></div><div class="line"> * <span class="doctag">@param</span> startday  开始时间</div><div class="line"> * <span class="doctag">@param</span> endday 结束时间</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIntervalDays</span><span class="params">(Date startday,Date endday)</span></span>&#123;</div><div class="line">    <span class="comment">//确保startday在endday之前</span></div><div class="line">    <span class="keyword">if</span>(startday.after(endday))&#123;</div><div class="line">        Date cal=startday;</div><div class="line">        startday=endday;</div><div class="line">        endday=cal;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//分别得到两个时间的毫秒数</span></div><div class="line">    <span class="keyword">long</span> sl=startday.getTime();</div><div class="line">    <span class="keyword">long</span> el=endday.getTime();</div><div class="line"></div><div class="line">    <span class="keyword">long</span> ei=el-sl;    </div><div class="line">    <span class="comment">//根据毫秒数计算间隔天数</span></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)(ei/(<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同理，可以用相同的方法计算出任意两个时间相隔的小时数，分钟数，秒钟数等</p>
<p>注：以上方法是完全按时间计算，有时并不能令人满意，如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">startday=<span class="string">"2006-10-11 20:00:00"</span> endday=<span class="string">"2006-10-12 8:00:00"</span></div></pre></td></tr></table></figure></p>
<p>计算结果为0，但是我们也许相让计算结果变为1，此时可以用如下方法实现：</p>
<p>在传参之前，先设定endday的时间，如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">endday.set(Calendar.HOUR_OF_DAY, <span class="number">23</span>);</div><div class="line">endday.set(Calendar.MINUTE, <span class="number">59</span>);</div><div class="line">endday.set(Calendar.SECOND, <span class="number">59</span>);</div><div class="line">endday.set(Calendar.MILLISECOND, <span class="number">59</span>);</div></pre></td></tr></table></figure></p>
<p>这样再传进去startday,endday，则结果就如我们所愿了。不过，如果嫌以上方法麻烦，可以参考以下方法：</p>
<p>(3)改进精确计算相隔天数的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDaysBetween</span> <span class="params">(Calendar d1, Calendar d2)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (d1.after(d2)) &#123;  <span class="comment">// swap dates so that d1 is start and d2 is end</span></div><div class="line">        java.util.Calendar swap = d1;</div><div class="line">        d1 = d2;</div><div class="line">        d2 = swap;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> days = d2.get(Calendar.DAY_OF_YEAR) - d1.get(Calendar.DAY_OF_YEAR);</div><div class="line">    <span class="keyword">int</span> y2 = d2.get(Calendar.YEAR);</div><div class="line">    <span class="keyword">if</span> (d1.get(Calendar.YEAR) != y2) &#123;</div><div class="line">        d1 = (Calendar) d1.clone();</div><div class="line">        do &#123;</div><div class="line">            days += d1.getActualMaximum(Calendar.DAY_OF_YEAR);<span class="comment">//得到当年的实际天数</span></div><div class="line">            d1.add(Calendar.YEAR, <span class="number">1</span>);</div><div class="line">        &#125; <span class="keyword">while</span> (d1.get(Calendar.YEAR) != y2);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> days;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java中Calendar的使用方法&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
      <category term="Calendar" scheme="http://yoursite.com/tags/Calendar/"/>
    
  </entry>
  
  <entry>
    <title>JSONObject</title>
    <link href="http://yoursite.com/2015/11/23/JSONObject/"/>
    <id>http://yoursite.com/2015/11/23/JSONObject/</id>
    <published>2015-11-23T11:32:48.000Z</published>
    <updated>2015-12-09T15:37:30.157Z</updated>
    
    <content type="html"><![CDATA[<p>JSONObject<br><a id="more"></a><br>1.public Object put (Object key, Object value)<br>将value映射到key下。如果此JSONObject对象之前存在一个value在这个key下，当前的value会替换掉之前的value<br>Associates the specified value with the specified key in this map(optional operation). If the map previously contained . a mapping for this key, the old value is replaced by the specified value. (A map m is said to contain a mapping for a key k if and only if m.containsKey(k) would return true .))</p>
<p>2.public JSONObject accumulate (String key, Object value) 累积value到这个key下。这个方法同element()方法类似，特殊的是，如果当前已经存在一个value在这个key下那么一个JSONArray将会存储在这个key下来保存所有累积的value。如果已经存在一个JSONArray，那么当前的value就会添加到这个JSONArray中<br>。相比之下replace方法会替代先前的value<br>Accumulate values under a key. It is similar to the element method except that if there is already an object stored<br>under the key then a JSONArray is stored under the key to hold all of the accumulated values. If there is already a<br>JSONArray, then the new value is appended to it. In contrast, the replace method replaces the previous value.</p>
<p>3.public JSONObject element (String key, Object value) 将键/值对放到这个JSONObject对象里面。如果当前value为空(null)，那么如果这个key存在的话，这个key就会移除掉。如果这<br>个key之前有value值，那么此方法会调用accumulate()方法。<br>Put a key/value pair in the JSONObject. If the value is null, then the key will be removed from the JSONObject if it is<br>present. If there is a previous value assigned to the key, it will call accumulate.</p>
<p>转载：<a href="http://blog.csdn.net/z69183787/article/details/18655143" target="_blank" rel="external">http://blog.csdn.net/z69183787/article/details/18655143</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSONObject&lt;br&gt;
    
    </summary>
    
      <category term="JSON" scheme="http://yoursite.com/categories/JSON/"/>
    
    
      <category term="JSONObject" scheme="http://yoursite.com/tags/JSONObject/"/>
    
      <category term="put" scheme="http://yoursite.com/tags/put/"/>
    
      <category term="accumulate" scheme="http://yoursite.com/tags/accumulate/"/>
    
      <category term="element" scheme="http://yoursite.com/tags/element/"/>
    
  </entry>
  
  <entry>
    <title>如何声明数组及push,pop,shift,unshift操作</title>
    <link href="http://yoursite.com/2015/11/21/%E5%A6%82%E4%BD%95%E5%A3%B0%E6%98%8E%E6%95%B0%E7%BB%84%E5%8F%8Apush-pop-shift-unshift%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2015/11/21/如何声明数组及push-pop-shift-unshift操作/</id>
    <published>2015-11-21T08:47:25.000Z</published>
    <updated>2015-11-21T09:19:05.514Z</updated>
    
    <content type="html"><![CDATA[<p>#如何声明数组及push,pop,shift,unshift操作<br><a id="more"></a></p>
<p>###一、js中数组的声明可以有几种方式声明<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tmp = [];  <span class="comment">// 简写模式</span></div><div class="line"><span class="keyword">var</span> tmp = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// 直接new一个</span></div><div class="line"><span class="keyword">var</span> tmp = <span class="built_in">Array</span>();  <span class="comment">// 或者new也可以</span></div><div class="line"><span class="keyword">var</span> tmp = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>); <span class="comment">// new的时候传入一个参数表示初始化数组长度</span></div></pre></td></tr></table></figure></p>
<p>但如果你想创建一个只有一个元素3的数组，那么使用 new 方法是不能实现的，因为系统会把你传入的3当作数组的长度，除非你使用引号引起来当作字符串，如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tmp = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'3'</span>); </div><div class="line">alert(tmp);  <span class="comment">// 3</span></div></pre></td></tr></table></figure></p>
<p>我们可以使用简写模式创建数组，这样就可以创建只有一个数字元素3的数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tmp = [<span class="number">3</span>]</div><div class="line">alert(<span class="keyword">typeof</span> tmp[<span class="number">0</span>]);  <span class="comment">// number</span></div></pre></td></tr></table></figure></p>
<p>也可以初始多个元素，并且元素的值可以是任意类型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 简约模式创建数组</span></div><div class="line"><span class="comment">// 数组的元素可以是任意一种数据类型</span></div><div class="line"><span class="keyword">var</span> tmp = [<span class="number">3</span>,<span class="literal">true</span>,<span class="number">8.5</span>,&#123;<span class="string">'name'</span>:<span class="string">'lizhong'</span>&#125;,[<span class="string">'a'</span>,<span class="string">'b'</span>]];</div><div class="line">alert(tmp.length); <span class="comment">// 5</span></div></pre></td></tr></table></figure></p>
<p>###二、unshift 在数组第一个元素前插入元素<br>unshift // 在数组第一个元素前插入元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用unshift在数组第一个元素前插入元素</span></div><div class="line"><span class="comment">// 返回数组长度</span></div><div class="line"><span class="keyword">var</span> tmp = [<span class="string">'a'</span>,<span class="string">'b'</span>];</div><div class="line"><span class="keyword">var</span> len = tmp.unshift(<span class="string">'c'</span>);</div><div class="line">alert(len); <span class="comment">// 3</span></div><div class="line">alert(tmp); <span class="comment">// c,a,b</span></div></pre></td></tr></table></figure></p>
<p>也可以一次插入多个元素，顺序依次从左边排起<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用unshift在数组第一个元素前插入元素</span></div><div class="line"><span class="comment">// 返回数组长度</span></div><div class="line"><span class="keyword">var</span> tmp = [<span class="string">'a'</span>,<span class="string">'b'</span>];</div><div class="line"><span class="keyword">var</span> len = tmp.unshift(<span class="string">'c'</span>,<span class="string">'d'</span>);</div><div class="line">alert(len); <span class="comment">// 4</span></div><div class="line">alert(tmp); <span class="comment">// c,d,a,b</span></div></pre></td></tr></table></figure></p>
<p>###三、shift弹出数组第一个元素，返回被弹出的元素值<br>小实例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用shift弹出数组第一个元素</span></div><div class="line"><span class="comment">// 返回被弹出的元素值</span></div><div class="line"><span class="keyword">var</span> tmp = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</div><div class="line"><span class="keyword">var</span> val = tmp.shift();</div><div class="line">alert(val); <span class="comment">// a</span></div><div class="line">alert(tmp); <span class="comment">// b,c</span></div></pre></td></tr></table></figure></p>
<p>如果是一个空数组：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用shift弹出数组第一个元素</span></div><div class="line"><span class="comment">// 返回被弹出的元素值</span></div><div class="line"><span class="keyword">var</span> tmp = [];</div><div class="line"><span class="keyword">var</span> val = tmp.shift();</div><div class="line">alert(val); <span class="comment">// undefined</span></div><div class="line">alert(tmp); <span class="comment">// 空</span></div></pre></td></tr></table></figure></p>
<p>###四、push在数组末尾添加元素<br>跟unshift相反，push在数组末尾添加元素，返回添加元素以后的数组长度<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用push在数组末尾添加多个元素</span></div><div class="line"><span class="comment">// 返回数组最新长度</span></div><div class="line"><span class="keyword">var</span> tmp = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</div><div class="line"><span class="keyword">var</span> len = tmp.push(<span class="string">'d'</span>);</div><div class="line">alert(len); <span class="comment">// 4</span></div><div class="line">alert(tmp); <span class="comment">// a,b,c,d</span></div></pre></td></tr></table></figure></p>
<p>也可以一次添加多个元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用push在数组末尾添加多个元素</span></div><div class="line"><span class="comment">// 返回数组最新长度</span></div><div class="line"><span class="keyword">var</span> tmp = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</div><div class="line"><span class="keyword">var</span> len = tmp.push(<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>);</div><div class="line">alert(len); <span class="comment">// 6</span></div><div class="line">alert(tmp); <span class="comment">// a,b,c,d,e,f</span></div></pre></td></tr></table></figure></p>
<p>###五、pop函数删除数组末尾元素<br>跟shift相反，pop弹出的是数组末尾元素，返回被弹出的元素值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用pop弹出数组末尾元素</span></div><div class="line"><span class="comment">// 返回被弹出的元素值</span></div><div class="line"><span class="keyword">var</span> tmp = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</div><div class="line"><span class="keyword">var</span> val = tmp.pop();</div><div class="line">alert(val); <span class="comment">// c</span></div><div class="line">alert(tmp); <span class="comment">// a,b</span></div></pre></td></tr></table></figure></p>
<p>如果数组为空，返回undefined<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用pop弹出数组末尾元素</span></div><div class="line"><span class="comment">// 返回被弹出的元素值</span></div><div class="line"><span class="keyword">var</span> tmp = [];</div><div class="line"><span class="keyword">var</span> val = tmp.pop();</div><div class="line">alert(val); <span class="comment">// undefined</span></div><div class="line">alert(tmp); <span class="comment">// 空</span></div></pre></td></tr></table></figure></p>
<p>利用以上四个函数，我们可以做一些队列处理，具体案例就不写代码了。<br>push功能其实也可以这么实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tmp = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</div><div class="line">tmp[tmp.length] = <span class="string">'d'</span>;</div><div class="line">alert(tmp); <span class="comment">// a,b,c,d</span></div></pre></td></tr></table></figure></p>
<p>注意：以上四个函数unshift、shift、pop、push函数操作都会在数组本身上修改。</p>
<p>转载：<a href="http://www.qttc.net/201303296.html" target="_blank" rel="external">http://www.qttc.net/201303296.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#如何声明数组及push,pop,shift,unshift操作&lt;br&gt;
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="push" scheme="http://yoursite.com/tags/push/"/>
    
      <category term="pop" scheme="http://yoursite.com/tags/pop/"/>
    
      <category term="shift" scheme="http://yoursite.com/tags/shift/"/>
    
      <category term="unshift" scheme="http://yoursite.com/tags/unshift/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://yoursite.com/2015/11/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/11/21/设计模式/</id>
    <published>2015-11-21T08:47:25.000Z</published>
    <updated>2016-09-22T16:16:55.986Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>设计模式<br><a href="http://www.cnblogs.com/maowang1991/archive/2013/04/15/3023236.html" target="_blank" rel="external">http://www.cnblogs.com/maowang1991/archive/2013/04/15/3023236.html</a></p>
<p>一、设计模式的分类</p>
<p>总体来说设计模式分为三大类：</p>
<p>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p>
<p>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p>
<p>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p>
<p>二、设计模式的六大原则</p>
<p>1、开闭原则（Open Close Principle）</p>
<p>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>
<p>2、里氏代换原则（Liskov Substitution Principle）</p>
<p>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科</p>
<p>3、依赖倒转原则（Dependence Inversion Principle）</p>
<p>这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。</p>
<p>4、接口隔离原则（Interface Segregation Principle）</p>
<p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</p>
<p>5、迪米特法则（最少知道原则）（Demeter Principle）</p>
<p>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>
<p>6、合成复用原则（Composite Reuse Principle）</p>
<p>原则是尽量使用合成/聚合的方式，而不是使用继承。</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;设计模式&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/maowang1991/archive/2013/04/15/3023236.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;htt
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>北京的夜</title>
    <link href="http://yoursite.com/2015/11/19/%E5%8C%97%E4%BA%AC%E7%9A%84%E5%A4%9C/"/>
    <id>http://yoursite.com/2015/11/19/北京的夜/</id>
    <published>2015-11-18T18:21:53.000Z</published>
    <updated>2015-12-09T15:38:22.800Z</updated>
    
    <content type="html"><![CDATA[<p>随笔<br><a id="more"></a><br>晚上八点、回到家中.整个人昏昏沉沉的. 便睡着了.醒来才发现依旧是漆黑的夜…   感觉好漫长.我想我是失眠了.鼻子干干的.<br>应该算是来了有段时间了.感觉还好.生活有着他预定的轨迹.然后就开始乱想.尝试了趴着睡 横着睡 抱成一团 总之就是睡不着.</p>
<p>突然发呆怎么能三年挣到100万. 好像工作的话  待遇好一点的话 一年也就20万么？ 我纯粹是不了解行情 在yy. 貌似拿不到100万。只能创业吧. 但是创业能做什么 总是说工作几年和朋友去创业 可是能做什么.一直总是也只是说说而已. 其实想想能做什么.nothing，sorry. 不过后来又脑洞大开了 100万貌似买一辆车和一个房子就没了… 貌似根本不够啊.  那么问题来了. 假设两年后毕业一个月1万多一点的工资 怎么能实现自己的追求. 想想 好像是做不到的 … 好吧想的有点多了 两年后能找到工作再说吧… 你们要是有什么见解 可以告诉我哈 怎么三年拿到100万.. 我貌似想不到了.人艰不拆</p>
<p>工作后 觉得开始怀念. 总之说不出来 或更加珍惜以前觉得无所谓或者不怎么在乎的事.总想找个机会 在会学校下..见见室友 和朋友装个逼..  哦 其实我免修还没办.体测也没做.也不知道后果是什么.. 再然后 最近比较经常和哈吉和我狗语音 每次挺开心的 这是一种在学校一起生活三年都没有的感觉 以前会因为小事吵架.比谁懒不下楼拿外卖.为了寝室值日生气.也不会去怀念 觉得感情也就这样 毕竟不会说一些心里话 总是嘻嘻哈哈 打打闹闹.. 现在呢 说不出来只是觉得 温暖.. 大概是没人来看我装逼了吧 …  也不能一起面对面打游戏 嘲讽了. 好烦 哦 .以前和春哥还打过架呢. 总和他闹别扭 可是现在觉得自己太折腾自己了..  挺好的人.除了睡觉打呼噜 还是很可爱的 现在和春哥说话也蛮开心.一样的真心感觉温暖.</p>
<p>再然后 人会一瞬间就懂了很多 或者自己觉得自己成长了. </p>
<p>对了.其实我特别羡慕500.长得帅.（我也挺帅的啊 天生觉得不丑咋办 哼哼哼）个子高.脾气不错.最主要唱歌好听啊 说到这个 .感觉公司里王腾也挺帅.. 事实证明 程序员里面真的有帅哥.. 我很喜欢听歌 却从来不会唱歌 .一直幻想在众人面前唱首歌 大家用惊叹的目光看着我 233…  好吧纯属yy.. 总之就是很渴望 渴望渴望 . 不过我貌似真的不会.只能听着别人唱.高中就羡慕兰..只能听着他唱.</p>
<p>毕业了.发现了身边的人都好厉害.以前没觉得.结果 工作一个比一个6.百度华为什么的.出国读研的也都不错.很好的学校. 自己也就普普通通 一般的大学 一般的研究生 一般的实习..  有点不甘心. 估计以后会带着不甘度过好几年吧 然后走向一个自己觉得满意的地方.至少不能比别人差太多嘛.  喜欢走在前方. 不是跟随. 虽然嘴里这么说 但是还是渣的要命. 哎 啥时候才能nb点.. 好好装个逼… 一步一步来吧 希望我能自己有一天对自己感到满意.</p>
<p>md.写到3点多了 还是睡不着.明早还要上班啊…崩溃 我已经预感到白天没精神一天的情况了.话说 早上还起得来么.</p>
<p>题外话 炒菜 油热了 放进食物 用加水么？ 为什么 我感觉有水的会砰砰的乱溅.. 吓得差点把锅扔了…<br>晚上喝牛奶时有助于睡眠还是不利于消化… </p>
<p>最后 附上我新到的衣服.总之就这样吧 . 我去听歌 让自己赶紧睡着.<br>额… 怎么添加图片？ 算了..</p>
<p>看了看窗外 夜还是那么黑.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随笔&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
</feed>
